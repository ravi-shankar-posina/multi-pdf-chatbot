*&---------------------------------------------------------------------*
*&  Include           ZNMM_MARC_GR_PROCESS_FORM
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GET_HARDCODE_VALUES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
*07/06/2024 CHG2068956 DE3K9A0RJS RITM7539793 Adjust the code to improve
*                                the performance of reprocessing program.
*----------------------------------------------------------------------*
FORM GET_HARDCODE_VALUES .
  CLEAR : GT_ZTUHCD1, GI_ZTUHCD1.
  GI_ZTUHCD1-NAME = GC_NAME.
  APPEND     GI_ZTUHCD1 TO GT_ZTUHCD1.
  CLEAR      GI_ZTUHCD1.
*To read data from hardcode table where orber types will be dynamic
  CALL FUNCTION 'Z_UHARD_CODE_VALUE'
    TABLES
      T_ZTUHCD1     = GT_ZTUHCD1
    EXCEPTIONS
      NO_DATA_FOUND = 1
      OTHERS        = 2.
  IF SY-SUBRC = 0.
    SORT GT_ZTUHCD1 BY NAME.
  ENDIF.
  LOOP AT GT_ZTUHCD1 INTO GI_ZTUHCD1 WHERE ZKEY = 'IBD'
                                      AND   FIELD = 'LFART'.
    GR_LFART_IBD-SIGN = 'I'.
    GR_LFART_IBD-OPTION = 'EQ'.
    GR_LFART_IBD-LOW =  GI_ZTUHCD1-LOW.
    APPEND GR_LFART_IBD TO GR_LFART_IBD.
  ENDLOOP.
  LOOP AT GT_ZTUHCD1 INTO GI_ZTUHCD1 WHERE ZKEY = 'OBD'
                                     AND   FIELD = 'LFART'.
    GR_LFART_OBD-SIGN = 'I'.
    GR_LFART_OBD-OPTION = 'EQ'.
    GR_LFART_OBD-LOW =  GI_ZTUHCD1-LOW.
    APPEND GR_LFART_OBD TO GR_LFART_OBD.
  ENDLOOP.
ENDFORM.                    " GET_HARDCODE_VALUES
*&---------------------------------------------------------------------*
*&      Form  GET_FILE_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_FILE_DATA .
** Get data from RECH table
IF NOT p_delta IS INITIAL.    "++USRAING DE3K9A0RJS CHG2068956 07.06.2024
  SELECT * FROM ztmm_marc_gr_h
    INTO TABLE gt_gr_rech_main
    WHERE comp_code = p_ccode
      AND tran_seq_no IN s_tran
      AND rech_seq IN s_poseq.
**** Begin of change by USRAING DE3K9A0RJS CHG2068956 07.06.2024
  ELSE.
    SELECT * FROM ztmm_marc_gr_h
  INTO TABLE gt_gr_rech_main
  WHERE comp_code = p_ccode
    AND tran_seq_no IN s_tran
    AND rech_seq IN s_poseq
    AND process_status = gc_error.
**** End of change by USRAING DE3K9A0RJS CHG2068956 07.06.2024
  ENDIF.
**** Begin of change by USRAING DE3K9A0RJS CHG2068956 07.06.2024
*  IF SY-SUBRC IS INITIAL.
  IF NOT gt_gr_rech_main[] IS INITIAL.
**** End of change by USRAING DE3K9A0RJS CHG2068956 07.06.2024
    SORT GT_GR_RECH_MAIN BY COMP_CODE TRAN_SEQ_NO.
    SELECT * FROM ZTMM_MARC_GR_L
        INTO TABLE GT_GR_RECL_MAIN
      FOR ALL ENTRIES IN GT_GR_RECH_MAIN
        WHERE COMP_CODE = GT_GR_RECH_MAIN-COMP_CODE
          AND TRAN_SEQ_NO = GT_GR_RECH_MAIN-TRAN_SEQ_NO
          AND RECH_SEQ = GT_GR_RECH_MAIN-RECH_SEQ.
    IF SY-SUBRC IS INITIAL.
      SORT GT_GR_RECL_MAIN BY COMP_CODE TRAN_SEQ_NO.
    ENDIF.
  ELSE.
    MESSAGE TEXT-079  TYPE 'S' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.

ENDFORM.                    " GET_FILE_DATA
*&---------------------------------------------------------------------*
*&      Form  MODIFY_SCREEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM MODIFY_SCREEN .
  LOOP AT SCREEN.
    IF SCREEN-GROUP1 = 'M2'.
      SCREEN-INPUT = 0.
    ENDIF.
    IF SCREEN-GROUP1 = 'M3'.
      IF P_REPR = 'X'.
        SCREEN-INPUT = 0.
      ELSE.
        SCREEN-INPUT = 1.
      ENDIF.
    ENDIF.
    IF SCREEN-GROUP1 = 'M1'.
      IF P_REPR = 'X'.
        SCREEN-ACTIVE = 1.
      ELSE.
        SCREEN-ACTIVE = 0.
      ENDIF.
    ENDIF.
    IF SCREEN-GROUP1 = 'M4'.
      IF P_EMAIL = 'X'.
        SCREEN-ACTIVE = 1.
      ELSE.
        SCREEN-ACTIVE = 0.
      ENDIF.
    ENDIF.
    MODIFY SCREEN.
  ENDLOOP.
ENDFORM.                    " MODIFY_SCREEN
*&---------------------------------------------------------------------*
*&      Form  FILL_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_DATA .
  CLEAR: GI_GR_RECH, GI_ALV_DATA.
  REFRESH GT_ALV_DATA.
  LOOP AT GT_GR_RECH INTO GI_GR_RECH WHERE PROCESS_STATUS = 'E'.
    MOVE-CORRESPONDING GI_GR_RECH TO GI_ALV_DATA.
    APPEND GI_ALV_DATA TO GT_ALV_DATA.
    CLEAR: GI_GR_RECH, GI_ALV_DATA.
  ENDLOOP.

ENDFORM.                    " FILL_DATA
*&---------------------------------------------------------------------*
*&      Form  PROCESS_GR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GT_GR_RECH_SEL  text
*      -->P_GT_GR_RECL_SEL  text
*      -->P_P_REPR  text
*----------------------------------------------------------------------*
FORM PROCESS_GR ." USING    pt_gr_rech TYPE tty_gr_rech
  " pt_gr_recl TYPE tty_gr_recl.

** Do the processing for Main/Reprocessing - create GR using BAPI
  PERFORM MAIN_PROCESSING." USING  pt_gr_rech
  " pt_gr_recl .


  IF P_DELTA = 'X'. "Main processing
    PERFORM UPDATE_FILE_TABLE.
  ENDIF.
***Calculating No Of Error Records
  DESCRIBE TABLE GT_ERROR_MARC LINES GW_ERR_CNT.
  IF GT_ERROR_MARC IS NOT INITIAL.
    IF P_PRNT IS NOT INITIAL.
****Calling Smartform
      PERFORM PRINT_SMARTFORM.
    ENDIF.
    IF P_EMAIL IS NOT INITIAL.
      PERFORM SEND_MAIL_ATT.
    ENDIF.
  ENDIF.
  IF GW_ERR_CNT LT 1 AND GW_SAP_ERROR_FLAG IS INITIAL AND GW_SAP_ERROR_SH_FLAG IS INITIAL.
    SKIP.
    SKIP.
    WRITE:/ TEXT-002.
    WRITE:/10 GW_FILE_PATH ,  TEXT-003.
  ENDIF.
  IF GW_SAP_ERROR_FLAG IS NOT INITIAL OR GW_SAP_ERROR_SH_FLAG IS NOT INITIAL.
    SKIP.
    SKIP.
    WRITE:/ TEXT-002.
    WRITE:/10 GW_FILE_PATH , TEXT-004.
  ENDIF.
  IF P_DELTA = 'X'. "Main processing
** File being archieved in RFC
******* Move file from Active Folder to Archieve Folder
*    PERFORM file_archive.
  ENDIF.


ENDFORM.                    " PROCESS_GR
*&---------------------------------------------------------------------*
*&      Form  GET_MOVEMENT_TYPE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_MOVEMENT_TYPE .
  SELECT * FROM ZTMM_MARC_GR_TR INTO TABLE GT_ZTMM_MARC_TRANS.
  IF SY-SUBRC = 0.
    SORT GT_ZTMM_MARC_TRANS BY
    REC_TYPE
    PROD_STAT
    BWART
    INDEX_NO.
  ENDIF.
ENDFORM.                    " GET_MOVEMENT_TYPE
*&---------------------------------------------------------------------*
*&      Form  MAIN_PROCESSING
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM MAIN_PROCESSING." USING pt_gr_rech TYPE tty_gr_rech
  " pt_gr_recl TYPE tty_gr_recl.

  DATA: LW_VENDOR TYPE ELIFN,
        LW_MBLNR  TYPE BAPI2017_GM_HEAD_RET-MAT_DOC.

** Begin of changes by USVICHI on 18.11.2022 - DE3K9A0HE2
  DATA : LV_LFART    TYPE LIKP-LFART,
         LV_RSTO_FLG TYPE C,
         LV_STAT     TYPE C,
         LV_REPR     TYPE C.
** End of changes by USVICHI on 18.11.2022 - DE3K9A0HE2

  CLEAR: GV_RECTYPE, GV_PROD_STATUS,GI_GR_RECH, GI_GR_RECL, GW_MATNR, "gv_fail_step,
         GW_ZZALTMN, GW_FLAG, GW_STRLN, GW_SWITCH, GI_BAPI_GM_ITEM, GV_TRAN_SEQ.
** Begin of changes by USPRADI DE3K9A0DSF on 02.06.2022
  READ TABLE GT_ZTUHCD1 INTO GI_ZTUHCD1 WITH KEY NAME  = 'MARC_INTERFACE'
                                                 ZKEY  = 'MARA'
                                                 FIELD = 'ZZALTMN'.
  IF SY-SUBRC  = 0.
    GW_SWITCH = GI_ZTUHCD1-LOW.
    SELECT SINGLE * FROM ZTMM_MARC_PRINT
                    INTO GW_MARC_PRINT
                    WHERE INTERFACE  = 'GR_MAT'
                     AND COMP_CODE = P_CCODE.
  ENDIF.
** End of changes by USPRADI DE3K9A0DSF on 02.06.2022
  LOOP AT GT_GR_RECH ASSIGNING <GFS_RECH>.
    IF <GFS_RECH> IS ASSIGNED.
      REFRESH: GT_BAPI_GM_ITEM.
      CLEAR: GV_RECTYPE, GV_PROD_STATUS, GV_BATCH, GV_OVERAGE, GV_LINKED_SURP,
      GW_TRAN_NO_TAB, GW_TRANS_SEQ_NO_TAB, GW_COMP_CODE_TAB , GW_PO_NO_TAB, LW_VENDOR.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      CLEAR: GV_RECH_SEQ.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      GW_HEADER_TXT = <GFS_RECH>-TRAN_SEQ_NO.
      GV_RECTYPE = <GFS_RECH>-REC_TYPE.
      GW_TRAN_NO_TAB = <GFS_RECH>-TRAN_NO.
      GW_TRANS_SEQ_NO_TAB = <GFS_RECH>-TRAN_SEQ_NO.
      GV_TRAN_SEQ = <GFS_RECH>-TRAN_SEQ_NO.
      GI_BAPI_GM_HEAD-HEADER_TXT     = GW_HEADER_TXT.  "TRAN_SEQ_NO
      GI_BAPI_GM_HEAD-BILL_OF_LADING = <GFS_RECH>-SHIPPER_BL_NO. "SHIPPER_BL_NO
      GI_BAPI_GM_HEAD-DOC_DATE       = SY-DATUM.   "Document Date
      GI_BAPI_GM_HEAD-PSTNG_DATE     = SY-DATUM.   "Posting Date
      GW_COMP_CODE_TAB = <GFS_RECH>-COMP_CODE.   "COMP_CODE
      GW_PO_NO_TAB     = <GFS_RECH>-PO_NO. "PO_NO
      LW_VENDOR  = <GFS_RECH>-VEND_ID. "VEND_ID
      GW_DATA_TYPE_TAB = P_DATA. "Data type
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      GV_RECH_SEQ = <GFS_RECH>-RECH_SEQ. "Header sequence
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = LW_VENDOR
        IMPORTING
          OUTPUT = LW_VENDOR.
** Set RECH to status I (in process) at the beginning of processing
      <GFS_RECH>-PROCESS_STATUS = 'I'.
      MODIFY ZTMM_MARC_GR_H FROM <GFS_RECH>. "TRANSPORTING process_status.
** Begin of changes by USPRADI DE3K9A0DZ9 on 09.06.2022
*      COMMIT WORK.
      COMMIT WORK AND WAIT.
** End of changes by USPRADI DE3K9A0DZ9 on 09.06.2022
      LOOP AT GT_GR_RECL ASSIGNING <GFS_RECL> WHERE FILE_NAME = <GFS_RECH>-FILE_NAME
                                                AND COMP_CODE = <GFS_RECH>-COMP_CODE
                                                AND TRAN_SEQ_NO = <GFS_RECH>-TRAN_SEQ_NO
                                                AND PO_NO = <GFS_RECH>-PO_NO
                                                AND RECH_SEQ = <GFS_RECH>-RECH_SEQ .
        IF <GFS_RECL> IS ASSIGNED.
** Begin of changes by USVICHI on 18.11.2022 - DE3K9A0HE2
          CLEAR : LV_LFART,LV_RSTO_FLG,LV_STAT.

          IF GV_RECTYPE = 04.
            SELECT SINGLE VBELV,
                          POSNV,
                          VBELN,
                          POSNN
                          INTO @DATA(LI_VBFA)
                          FROM VBFA
                          WHERE VBELV = @<GFS_RECL>-PO_NO
                          AND   VBTYP_N = '7'.
            IF SY-SUBRC IS INITIAL.
              SELECT SINGLE LFART
                FROM LIKP
                INTO LV_LFART
                WHERE VBELN = LI_VBFA-VBELN.
              IF SY-SUBRC IS INITIAL.
                READ TABLE GT_ZTUHCD1 INTO GI_ZTUHCD1 WITH KEY NAME  = 'MARC_INTERFACE'
                                                               ZKEY  = 'RSTO'
                                                               FIELD = 'LFART'
                                                               LOW   = LV_LFART.
                IF SY-SUBRC  IS INITIAL.
                  """ This is a Returns STO scenario.
                  LV_RSTO_FLG = ABAP_TRUE.
                  IF P_REPR IS NOT INITIAL.
                    LV_REPR  = ABAP_TRUE." Reprocess flag
                  ENDIF.
                  CALL FUNCTION 'ZMM_MARC_GR_RETURNS_STO_FM'
                    EXPORTING
                      IV_VBELN     = LI_VBFA-VBELN
                      IS_RECH      = <GFS_RECH>
                      IS_RECL      = <GFS_RECL>
                      IV_REPROCESS = LV_REPR
                    IMPORTING
                      EV_STAT      = LV_STAT.
** Logic to capture error and send email with smartform as attachment
                  IF LV_STAT = 'M'.
                    GI_ERROR_FILE-TRAN_SEQ_NO = <GFS_RECH>-TRAN_SEQ_NO.
                    GI_ERROR_FILE-COMP_CODE   = <GFS_RECH>-COMP_CODE.
                    GI_ERROR_FILE-PO_NO       = <GFS_RECL>-PO_NO.
                    GI_ERROR_FILE-PO_LINE_NO  = <GFS_RECL>-PO_LINE_NO.
                    GI_ERROR_FILE-SKU         = <GFS_RECL>-SKU.
                    GI_ERROR_FILE-QTY_EXPE    = <GFS_RECL>-QTY_EXPE.
                    GI_ERROR_FILE-CART_LP     = <GFS_RECL>-CART_LP.
                    GI_ERROR_FILE-LP          = <GFS_RECL>-LP.
                    GI_ERROR_FILE-RECORD_DATE = SY-DATUM.
                    GI_ERROR_FILE-RECORD_TIME = SY-UZEIT.
                    READ TABLE GT_MARC_MSG_PR INTO DATA(LI_MARC_MSG_PR) WITH KEY MSG_ID_NUM = 'ZMM141'.
                    IF SY-SUBRC IS INITIAL.
                      GI_ERROR_FILE-REJECT_REASON =  LI_MARC_MSG_PR-MSG_DESCR.
                    ENDIF.
                    MOVE-CORRESPONDING GI_ERROR_FILE TO GI_ERROR_MARC_SMF.
                    MOVE-CORRESPONDING GI_ERROR_FILE TO GI_ERROR_MARC.
                    GI_ERROR_MARC-TRAN_NO     = GW_TRAN_NO_TAB.
                    CONCATENATE SY-TIMLO+0(2) ':' SY-TIMLO+2(2) INTO GI_ERROR_MARC_SMF-RECORD_TIME.
                    APPEND GI_ERROR_MARC_SMF TO GT_ERROR_MARC_SMF.
                    APPEND GI_ERROR_MARC TO GT_ERROR_MARC.
                    CLEAR :GI_ERROR_FILE,GI_ERROR_MARC_SMF, GI_ERROR_MARC, LI_MARC_MSG_PR.
                  ENDIF.
                  CONTINUE.
                  CLEAR LI_VBFA.
                ENDIF.
              ELSE.
                CLEAR LV_RSTO_FLG.
              ENDIF.
            ENDIF.
          ELSE.
            CLEAR LV_RSTO_FLG.
          ENDIF.
** End of changes by USVICHI on 18.11.2022 - DE3K9A0HE2

** Validate RECL data and fill data to BAPi structures
          PERFORM FILL_BAPI USING LW_VENDOR.
          IF GV_CONTINUE = 'X'.
            CLEAR: GV_CONTINUE, GW_REJECT_REASON_TAB.
** Modify the status and faiulure reason in RECL table
            MODIFY ZTMM_MARC_GR_L FROM <GFS_RECL>.
*            COMMIT WORK.
            COMMIT WORK AND WAIT. "JE3K906487 06.04.2022
            CONTINUE.
          ENDIF.
*****Fill Temp Table with File Data***
          IF GI_BAPI_GM_ITEM IS NOT INITIAL.
            PERFORM FILE_TEMP_DATA.
          ENDIF.
          CLEAR: GI_BAPI_GM_ITEM.

        ENDIF.

      ENDLOOP.
      IF LV_RSTO_FLG IS INITIAL.
** With the above filled data proceed to process further steps of GR
        IF GT_BAPI_GM_ITEM IS NOT INITIAL.
          IF P_DELTA = 'X'.
            GW_INPUT_STATUS_TAB  = 'I'.
            PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
          ENDIF.
          PERFORM GR_STEPS.
          REFRESH: GT_BAPI_GM_ITEM, GT_MARC_GR_ITEM.
        ENDIF.
** Update RECH and RECL database tables with the process status and other fields
        PERFORM RECH_RECL_UPDATE USING GV_TRAN_SEQ.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " MAIN_PROCESSING
*&---------------------------------------------------------------------*
*&      Form  UPDATE_FILE_TABLE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM UPDATE_FILE_TABLE .
  DATA: LI_ZTMM_MARC_GR_FN TYPE ZTMM_MARC_GR_FN,
        LI_ZTMM_MARC_FILE  TYPE ZTMM_MARC_FILE,
        LT_MARC_GR_FN      TYPE STANDARD TABLE OF ZTMM_MARC_GR_FN,
        LI_MARC_GR_FN      TYPE ZTMM_MARC_GR_FN,
        LV_TRAN_SEQ_NO     TYPE ZTRAN_SEQ_NO,
        LW_STARTDATE       TYPE BTCXDATE,
        LW_STARTTIME       TYPE BTCXTIME,
        LW_ENDDATE         TYPE BTCXDATE,
        LW_ENDTIME         TYPE BTCXTIME,
        LW_DURATION        TYPE  LTAK_ISTWM.

  SELECT SINGLE
  JOBNAME
  JOBCOUNT
  STRTDATE
  STRTTIME
  ENDDATE
  ENDTIME
    INTO GI_TBTCO
    FROM TBTCO
    WHERE JOBNAME  = P_BGNAME
    AND   JOBCOUNT = P_BGNO.
  IF SY-SUBRC = 0.
    LI_ZTMM_MARC_GR_FN-STARTDATE   = GI_TBTCO-STRTDATE.
    LW_STARTDATE   = GI_TBTCO-STRTDATE.
    LI_ZTMM_MARC_GR_FN-STARTTIME   = GI_TBTCO-STRTTIME.
    LW_STARTTIME   = GI_TBTCO-STRTTIME.
    LI_ZTMM_MARC_GR_FN-ENDDATE     = SY-DATUM."gi_tbtco-enddate.
    LW_ENDDATE     = LI_ZTMM_MARC_GR_FN-ENDDATE .
    LI_ZTMM_MARC_GR_FN-ENDTIME     = SY-UZEIT."gi_tbtco-endtime.
    LW_ENDTIME     = LI_ZTMM_MARC_GR_FN-ENDTIME.

**** Calculating the duration b/w time
    CALL FUNCTION 'L_TO_TIME_DIFF'
      EXPORTING
        I_START_DATE     = LW_STARTDATE
        I_START_TIME     = LW_STARTTIME
        I_END_DATE       = LW_ENDDATE
        I_END_TIME       = LW_ENDTIME
        I_TIME_UOM       = 'SEC'
      IMPORTING
        E_TIME_DIFF      = LW_DURATION
      EXCEPTIONS
        INPUT_DATA_EMPTY = 1
        OTHERS           = 2.

    IF SY-SUBRC = 0.
* Implement suitable error handling here
      LI_ZTMM_MARC_GR_FN-DURATION     = LW_DURATION.
    ENDIF.
  ENDIF.

**  IF li_ztmm_marc_gr_fn IS NOT INITIAL.
  READ TABLE S_TRAN INDEX 1.
  UPDATE ZTMM_MARC_GR_FN SET STATUS      = 'C'
                             ENDDATE     = LI_ZTMM_MARC_GR_FN-ENDDATE
                             ENDTIME     = LI_ZTMM_MARC_GR_FN-ENDTIME
                             DURATION    = LI_ZTMM_MARC_GR_FN-DURATION
                         WHERE  DATA_TYPE   = P_DATA
                         AND    TRAN_SEQ_NO = S_TRAN-LOW " p_seq_no
                         AND    FILE_NAME   = P_FILE
                         AND    COMP_CODE   = P_CCODE.
  IF SY-SUBRC EQ 0.
    LV_TRAN_SEQ_NO                =  S_TRAN-LOW. "p_seq_no.
    LI_ZTMM_MARC_FILE-DATA_TYPE   =  P_DATA.
    WRITE LV_TRAN_SEQ_NO TO LI_ZTMM_MARC_FILE-TRAN_SEQ_NO.
    LI_ZTMM_MARC_FILE-COMP_CODE   = P_CCODE.
    LI_ZTMM_MARC_FILE-CREATE_DATE = SY-DATUM.
    LI_ZTMM_MARC_FILE-CREATE_TIME = SY-UZEIT.
    LI_ZTMM_MARC_FILE-CREATE_USER = SY-UNAME.
    LI_ZTMM_MARC_FILE-STATUS      = 'C'.

    IF LI_ZTMM_MARC_FILE IS NOT INITIAL.
      MODIFY ZTMM_MARC_FILE FROM LI_ZTMM_MARC_FILE.
    ENDIF.
  ENDIF.
*  ENDIF.
  CLEAR: LI_ZTMM_MARC_GR_FN.
ENDFORM.                    " UPDATE_FILE_TABLE
*&---------------------------------------------------------------------*
*&      Form  PRINT_SMARTFORM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM PRINT_SMARTFORM .
  IF GT_ERROR_MARC_SMF[] IS NOT INITIAL.
    SORT GT_ERROR_MARC_SMF BY TRAN_SEQ_NO COMP_CODE PO_NO PO_LINE_NO.
****    Get Printer & mail details
    IF P_CCODE IS NOT INITIAL.
      SELECT SINGLE * FROM ZTMM_MARC_PRINT INTO GI_MARC_PRINT
        WHERE INTERFACE = 'GR'
        AND   COMP_CODE EQ P_CCODE.
      IF SY-SUBRC <> 0.
        MESSAGE TEXT-017 TYPE 'E'.
      ENDIF.
    ENDIF.
****  Calling FM Name for Smartforrm
    CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
      EXPORTING
        FORMNAME           = GC_FORMNAME
      IMPORTING
        FM_NAME            = GW_FMNAME
      EXCEPTIONS
        NO_FORM            = 1
        NO_FUNCTION_MODULE = 2
        OTHERS             = 3.

    GI_SSFCTRLOP-DEVICE    = 'PRINTER'.
    GI_SSFCTRLOP-NO_DIALOG = 'X'.

    GI_SSFCOMPOP-TDDEST    = GI_MARC_PRINT-PRINTER.
    GI_SSFCOMPOP-TDNOPRINT = 'X'.
    GI_SSFCOMPOP-TDIMMED   = 'X'.
    GI_SSFCOMPOP-TDNEWID   = 'X'.
    GI_SSFCOMPOP-TDARMOD   = '1'.
    GI_SSFCOMPOP-TDCOPIES  = '001'.
    GI_SSFCOMPOP-RQPOSNAME = TEXT-036.

    CALL FUNCTION GW_FMNAME
      EXPORTING
        CONTROL_PARAMETERS = GI_SSFCTRLOP
        OUTPUT_OPTIONS     = GI_SSFCOMPOP
        USER_SETTINGS      = ' '          "Change by 503187592 CHG0158498 DE3K9A076S
        GT_MARC_GR_ERROR   = GT_ERROR_MARC_SMF
      IMPORTING
        JOB_OUTPUT_INFO    = GI_SSFCRESCL
      EXCEPTIONS
        FORMATTING_ERROR   = 1
        INTERNAL_ERROR     = 2
        SEND_ERROR         = 3
        USER_CANCELED      = 4
        OTHERS             = 5.
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
      WRITE:/ TEXT-018.
    ELSE.
      WRITE:/ TEXT-019.
    ENDIF.

  ENDIF.
ENDFORM.                    " PRINT_SMARTFORM
*&---------------------------------------------------------------------*
*&      Form  SEND_MAIL_ATT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SEND_MAIL_ATT .
  DATA: LO_SEND_REQUEST   TYPE REF TO CL_BCS,
        LO_DOCUMENT       TYPE REF TO CL_DOCUMENT_BCS,
        LO_SENDER         TYPE REF TO IF_SENDER_BCS,
        LO_RECIPIENT      TYPE REF TO IF_RECIPIENT_BCS VALUE IS INITIAL,
        LT_MSG_BODY       TYPE BCSY_TEXT,
        LI_MSG_BODY       TYPE SOLI,
        LX_DOCUMENT_BCS   TYPE REF TO CX_DOCUMENT_BCS,
        LV_SENT_TO_ALL    TYPE OS_BOOLEAN,
        LV_SUBJECT        TYPE SO_OBJ_DES,
        LV_ATT_SUB        TYPE SO_OBJ_DES,
        IN_MAILID         TYPE AD_SMTPADR,
        IN_MAILID1        TYPE AD_SMTPADR,
        V_MESSAGE(100),
        LCL_BCS_EXCEPTION TYPE REF TO CX_BCS.

  IF GT_ERROR_MARC_SMF[] IS NOT INITIAL.
    SORT GT_ERROR_MARC_SMF BY TRAN_SEQ_NO COMP_CODE PO_NO PO_LINE_NO.
****    Get Printer & mail details
    IF P_CCODE IS NOT INITIAL.
      SELECT SINGLE * FROM ZTMM_MARC_PRINT INTO GI_MARC_PRINT
        WHERE INTERFACE = 'GR'
        AND   COMP_CODE EQ P_CCODE.
      IF SY-SUBRC <> 0.
        MESSAGE TEXT-017 TYPE 'E'.
      ENDIF.
    ENDIF.
****  Calling FM Name for Smartforrm
    CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
      EXPORTING
        FORMNAME           = GC_FORMNAME
      IMPORTING
        FM_NAME            = GW_FMNAME
      EXCEPTIONS
        NO_FORM            = 1
        NO_FUNCTION_MODULE = 2
        OTHERS             = 3.

    GI_SSFCTRLOP-NO_DIALOG = 'X'.
    GI_SSFCTRLOP-GETOTF    = 'X'.

    GI_SSFCOMPOP-TDNOPRINT = 'X'.
    GI_SSFCOMPOP-TDIMMED   = 'X'.
    GI_SSFCOMPOP-TDNEWID   = 'X'.
    GI_SSFCOMPOP-TDARMOD   = '1'.
    GI_SSFCOMPOP-TDCOPIES  = '001'.
    GI_SSFCOMPOP-RQPOSNAME = TEXT-036.

*CALL FUNCTION '/1BCDWB/SF00000180'
    CALL FUNCTION GW_FMNAME
      EXPORTING
        CONTROL_PARAMETERS = GI_SSFCTRLOP
        OUTPUT_OPTIONS     = GI_SSFCOMPOP
        USER_SETTINGS      = ' '          "Change by 503187592 CHG0158498 DE3K9A076S
        GT_MARC_GR_ERROR   = GT_ERROR_MARC_SMF
      IMPORTING
        JOB_OUTPUT_INFO    = GI_SSFCRESCL.
  ENDIF.

  GT_OTF = GI_SSFCRESCL-OTFDATA[].
**** Convert OTF to PDF
  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      FORMAT                = 'PDF'
      MAX_LINEWIDTH         = 132
    IMPORTING
      BIN_FILESIZE          = GV_LEN_IN
      BIN_FILE              = GI_XSTRING   " This is NOT Binary. This is Hexa
    TABLES
      OTF                   = GT_OTF
      LINES                 = GT_TLINE
    EXCEPTIONS
      ERR_MAX_LINEWIDTH     = 1
      ERR_FORMAT            = 2
      ERR_CONV_NOT_POSSIBLE = 3
      OTHERS                = 4.

* Convert Hexa String to Binary format
  CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
    EXPORTING
      BUFFER     = GI_XSTRING
    TABLES
      BINARY_TAB = GT_OBJBIN[].

*  in_mailid = gi_marc_print-marc_mail.
  "create send request
  TRY .
      LO_SEND_REQUEST = CL_BCS=>CREATE_PERSISTENT( ).

      "create message body and subject
      LI_MSG_BODY-LINE = TEXT-024.
      APPEND LI_MSG_BODY TO LT_MSG_BODY.
      APPEND INITIAL LINE TO LT_MSG_BODY.
      APPEND INITIAL LINE TO LT_MSG_BODY.
      APPEND INITIAL LINE TO LT_MSG_BODY.
      LI_MSG_BODY-LINE = TEXT-025.
      APPEND LI_MSG_BODY TO LT_MSG_BODY.
      APPEND INITIAL LINE TO LT_MSG_BODY.
      APPEND INITIAL LINE TO LT_MSG_BODY.
      APPEND INITIAL LINE TO LT_MSG_BODY.
      APPEND INITIAL LINE TO LT_MSG_BODY.
      LI_MSG_BODY-LINE = TEXT-020.
      APPEND LI_MSG_BODY TO LT_MSG_BODY.
      LI_MSG_BODY-LINE = TEXT-021.
      APPEND LI_MSG_BODY TO LT_MSG_BODY.
      LI_MSG_BODY-LINE = TEXT-022.
      APPEND LI_MSG_BODY TO LT_MSG_BODY.
      LI_MSG_BODY-LINE = TEXT-023.
      APPEND LI_MSG_BODY TO LT_MSG_BODY.

      LV_SUBJECT = TEXT-026.
      "put your text into the document
      LO_DOCUMENT = CL_DOCUMENT_BCS=>CREATE_DOCUMENT(
      I_TYPE = 'RAW'
      I_TEXT = LT_MSG_BODY
      I_SUBJECT = LV_SUBJECT ).

      LV_ATT_SUB = TEXT-027.
      TRY.
          LO_DOCUMENT->ADD_ATTACHMENT(
          EXPORTING
          I_ATTACHMENT_TYPE = 'PDF'
          I_ATTACHMENT_SUBJECT = LV_ATT_SUB
          I_ATT_CONTENT_HEX = GT_OBJBIN[] ).
        CATCH CX_DOCUMENT_BCS INTO LX_DOCUMENT_BCS.
      ENDTRY.

* Add attachment
* Pass the document to send request
      LO_SEND_REQUEST->SET_DOCUMENT( LO_DOCUMENT ).

      "Create sender
      LO_SENDER = CL_SAPUSER_BCS=>CREATE( SY-UNAME ).

      "Set sender
      LO_SEND_REQUEST->SET_SENDER( LO_SENDER ).

** If email id is specified on the screen, send mail only to that id
** else send to MARC DL and SAP DL obtined from ZTMM_MARC_PRINT table
      IF P_MAILID IS NOT INITIAL.
        IN_MAILID = P_MAILID.
        CLEAR IN_MAILID1.
      ELSE.
        IN_MAILID = GI_MARC_PRINT-MARC_MAIL. "MARC DL
        IN_MAILID1 = GI_MARC_PRINT-MAIL."SAP DL
      ENDIF.

      "Create recipient
      LO_RECIPIENT = CL_CAM_ADDRESS_BCS=>CREATE_INTERNET_ADDRESS( IN_MAILID ).

*Set recipient
      LO_SEND_REQUEST->ADD_RECIPIENT(
      EXPORTING
      I_RECIPIENT = LO_RECIPIENT
      I_EXPRESS = ABAP_TRUE
      ).

*      lo_send_request->add_recipient( lo_recipient ).

* Send email
*      lo_send_request->send(
*      EXPORTING
*      i_with_error_screen = abap_true
*      RECEIVING
*      result = lv_sent_to_all ).
      IF IN_MAILID1 IS NOT INITIAL.
        LO_RECIPIENT = CL_CAM_ADDRESS_BCS=>CREATE_INTERNET_ADDRESS( IN_MAILID1 ).

*Set recipient
        LO_SEND_REQUEST->ADD_RECIPIENT(
        EXPORTING
        I_RECIPIENT = LO_RECIPIENT
        I_EXPRESS = ABAP_TRUE
        ).
      ENDIF.
*     ---------- send document ---------------------------------------
      LV_SENT_TO_ALL = LO_SEND_REQUEST->SEND( I_WITH_ERROR_SCREEN = 'X' ).

    CATCH CX_BCS INTO LCL_BCS_EXCEPTION.
      V_MESSAGE = LCL_BCS_EXCEPTION->GET_TEXT( ).
      MESSAGE E119 WITH V_MESSAGE.
  ENDTRY.

* Commit Work to send the email
  COMMIT WORK.
  IF SY-SUBRC = 0.
    WRITE:/ TEXT-033.
  ENDIF.
ENDFORM.                    " SEND_MAIL_ATT
*&---------------------------------------------------------------------*
*&      Form  GET_FILEPATH_PRINTER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_FILEPATH_PRINTER .
****    Get Printer & mail & Path details
  SELECT SINGLE * FROM ZTMM_MARC_PRINT INTO GI_MARC_PRINT
    WHERE INTERFACE = 'GR'
    AND   COMP_CODE = P_CCODE.
  IF SY-SUBRC = 0.
    CONCATENATE GI_MARC_PRINT-FILE_PATH P_FILE INTO GW_FILE_PATH.
    CONCATENATE GI_MARC_PRINT-ARC_FILE_PATH P_FILE INTO GW_ARC_FILE_PATH.
  ENDIF.
ENDFORM.                    " GET_FILEPATH_PRINTER
*&---------------------------------------------------------------------*
*&      Form  FILE_ARCHIVE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILE_ARCHIVE .
  GW_SOURCE_PATH = GW_FILE_PATH.
  GW_TARGET_PATH = GW_ARC_FILE_PATH.
******* Move file from Active Folder to Archieve Folder
  CALL FUNCTION 'ARCHIVFILE_SERVER_TO_SERVER'
    EXPORTING
      SOURCEPATH       = GW_SOURCE_PATH
      TARGETPATH       = GW_TARGET_PATH
    EXCEPTIONS
      ERROR_FILE       = 1
      NO_AUTHORIZATION = 2
      OTHERS           = 3.
  IF SY-SUBRC = 0.
**** Delete Source File
    DELETE DATASET GW_FILE_PATH.
* Implement suitable error handling here
  ELSE.
    WRITE: / TEXT-039.
  ENDIF.
ENDFORM.                    " FILE_ARCHIVE
*&---------------------------------------------------------------------*
*&      Form  GET_MESSAGE_DETAILS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_MESSAGE_DETAILS .
  SELECT * FROM ZTMM_MARC_MSG_PR
    INTO TABLE GT_MARC_MSG_PR
    WHERE PROG_NAME = GC_PROG.
  IF SY-SUBRC IS INITIAL.
    SORT GT_MARC_MSG_PR BY PROG_NAME MSG_ID_NUM.
  ENDIF.
  LOOP AT GT_MARC_MSG_PR INTO GI_MARC_MSG_PR WHERE PROG_NAME = GC_PROG
                                               AND REPROCESS = 'E'. "to be reprocessed by SAP
    S_RETURN-SIGN   = 'I'.
    S_RETURN-OPTION = 'EQ'.
    S_RETURN-LOW    = GI_MARC_MSG_PR-MSG_ID_NUM.
    APPEND S_RETURN TO S_RETURN.
  ENDLOOP.
ENDFORM.                    " GET_MESSAGE_DETAILS
*&---------------------------------------------------------------------*
*&      Form  FILE_TABLE_UPDATE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LW_MBLNR  text
*      -->P_GT_BAPI_GM_ITEM  text
*----------------------------------------------------------------------*
FORM FILE_TABLE_UPDATE  USING P_MBLNR PT_BAPI_GM_ITEM TYPE STANDARD TABLE.
  DATA: LI_ZTMM_MARC_FILE TYPE ZTMM_MARC_GR_FL.
  DATA: LW_QTY(9) TYPE N.
  DATA: LT_BAPI_GM_ITEM TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE,
        LI_BAPI_GM_ITEM TYPE BAPI2017_GM_ITEM_CREATE.
  CLEAR:LI_BAPI_GM_ITEM,LW_QTY.
  LT_BAPI_GM_ITEM[] = PT_BAPI_GM_ITEM[].

  IF P_DELTA = 'X'.
    IF GW_SEQ_NO = 0.
      GW_SEQ_NO = GW_SEQ_NO + 1.
    ELSE.
      IF GW_PRE_PO_NO_TAB NE GW_PO_NO_TAB.
        GW_SEQ_NO = GW_SEQ_NO + 1.
      ENDIF.
    ENDIF.
  ENDIF.

  GW_PRE_PO_NO_TAB              = GW_PO_NO_TAB.
  GI_ZTMM_MARC_FILE-SEQ_NO      = GW_SEQ_NO.
  GI_ZTMM_MARC_FILE-TRAN_NO     = GW_TRAN_NO_TAB.
  GI_ZTMM_MARC_FILE-TRAN_SEQ_NO = GW_TRANS_SEQ_NO_TAB.
  GI_ZTMM_MARC_FILE-DATA_TYPE   = GW_DATA_TYPE_TAB.
  GI_ZTMM_MARC_FILE-COMP_CODE   = GW_COMP_CODE_TAB.
  GI_ZTMM_MARC_FILE-PO_NO         = GW_PO_NO_TAB.
  GI_ZTMM_MARC_FILE-MAT_DOC       = P_MBLNR.
  GI_ZTMM_MARC_FILE-INPUT_STATUS  = GW_INPUT_STATUS_TAB.
  GI_ZTMM_MARC_FILE-RECORD_DATE   = SY-DATUM.
  GI_ZTMM_MARC_FILE-RECORD_TIME   = SY-UZEIT.
  GI_ZTMM_MARC_FILE-RECORD_USER   = SY-UNAME.
  GI_ZTMM_MARC_FILE-REJECT_REASON = GW_REJECT_REASON_TAB.
  GI_ZTMM_MARC_FILE-ERROR_TYPE    = GW_ERROR_TYPE_TAB.

**If entry is available in FL table then update orelse modify

  SELECT SINGLE * INTO LI_ZTMM_MARC_FILE FROM ZTMM_MARC_GR_FL
  WHERE TRAN_NO = GW_TRAN_NO_TAB
  AND TRAN_SEQ_NO = GW_TRANS_SEQ_NO_TAB
  AND SEQ_NO      = GW_SEQ_NO
  AND DATA_TYPE   = GW_DATA_TYPE_TAB
  AND COMP_CODE   = GW_COMP_CODE_TAB
  AND PO_NO       = GW_PO_NO_TAB.

  IF SY-SUBRC = 0.
    IF P_MBLNR IS NOT INITIAL.
      IF LI_ZTMM_MARC_FILE-MAT_DOC IS NOT INITIAL.
        CONCATENATE LI_ZTMM_MARC_FILE-MAT_DOC '/' P_MBLNR INTO GI_ZTMM_MARC_FILE-MAT_DOC.
      ELSE.
        CONCATENATE LI_ZTMM_MARC_FILE-MAT_DOC P_MBLNR INTO GI_ZTMM_MARC_FILE-MAT_DOC.
      ENDIF.
      UPDATE ZTMM_MARC_GR_FL SET MAT_DOC       = GI_ZTMM_MARC_FILE-MAT_DOC
                                 INPUT_STATUS  = GW_INPUT_STATUS_TAB
                                 CHANGE_DATE   = SY-DATUM
                                 CHANGE_TIME   = SY-UZEIT
                                 CHANGE_USER   = SY-UNAME
                                 REJECT_REASON = GW_REJECT_REASON_TAB
                                 ERROR_TYPE    = GW_ERROR_TYPE_TAB
                             WHERE TRAN_NO = GW_TRAN_NO_TAB
                              AND TRAN_SEQ_NO = GW_TRANS_SEQ_NO_TAB
                              AND SEQ_NO      = GW_SEQ_NO
                              AND DATA_TYPE   = GW_DATA_TYPE_TAB
                              AND COMP_CODE   = GW_COMP_CODE_TAB
                              AND PO_NO       = GW_PO_NO_TAB.
    ELSE.
      UPDATE ZTMM_MARC_GR_FL SET INPUT_STATUS  = GW_INPUT_STATUS_TAB
                                 CHANGE_DATE   = SY-DATUM
                                 CHANGE_TIME   = SY-UZEIT
                                 CHANGE_USER   = SY-UNAME
                                 REJECT_REASON = GW_REJECT_REASON_TAB
                                 ERROR_TYPE    = GW_ERROR_TYPE_TAB
                             WHERE TRAN_NO = GW_TRAN_NO_TAB
                              AND TRAN_SEQ_NO = GW_TRANS_SEQ_NO_TAB
                              AND SEQ_NO      = GW_SEQ_NO
                              AND DATA_TYPE   = GW_DATA_TYPE_TAB
                              AND COMP_CODE   = GW_COMP_CODE_TAB
                              AND PO_NO       = GW_PO_NO_TAB.
    ENDIF.
  ELSE. " FL entry is not available
    IF GI_ZTMM_MARC_FILE IS NOT INITIAL.
      MODIFY ZTMM_MARC_GR_FL FROM GI_ZTMM_MARC_FILE.
    ENDIF.
  ENDIF. " FL entry is available

  SORT LT_BAPI_GM_ITEM BY ITEM_TEXT UNLOAD_PT.
  SORT GT_MARC_GR_ITEM BY BAPI_PO_NO BAPI_PO_LINE_NO BAPI_UNLOAD_PT .
  IF GW_INPUT_STATUS_TAB = 'E' AND GW_ERROR_TYPE_TAB = 'MARC' AND GW_CUS_RET_ERROR NE 'X'.
    IF LT_BAPI_GM_ITEM IS NOT INITIAL AND GW_REC_ERROR NE 'X' AND GW_TEST = 'X'.
      LOOP AT PT_BAPI_GM_ITEM INTO LI_BAPI_GM_ITEM.
        CLEAR:  GI_MARC_GR_ITEM.
        READ TABLE GT_MARC_GR_ITEM INTO GI_MARC_GR_ITEM WITH KEY BAPI_PO_NO      = LI_BAPI_GM_ITEM-ITEM_TEXT(10) "deliv_numb
                                                                 BAPI_PO_LINE_NO = LI_BAPI_GM_ITEM-ITEM_TEXT+10(6) "deliv_item
                                                                 BAPI_UNLOAD_PT  = LI_BAPI_GM_ITEM-UNLOAD_PT
                                                                 BINARY SEARCH.
        IF SY-SUBRC = 0.
          GI_ERROR_FILE-PO_NO       = GI_MARC_GR_ITEM-PO_NO.
          GI_ERROR_FILE-PO_LINE_NO  = GI_MARC_GR_ITEM-PO_LINE_NO.
          GI_ERROR_FILE-LP          = GI_MARC_GR_ITEM-LP.
          GI_ERROR_FILE-CART_LP     = GI_MARC_GR_ITEM-CART_LP.
          GI_ERROR_FILE-SKU         = GI_MARC_GR_ITEM-MARC_SKU.
          LW_QTY = FLOOR( LI_BAPI_GM_ITEM-ENTRY_QNT ).
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = LW_QTY
            IMPORTING
              OUTPUT = GI_ERROR_FILE-QTY_EXPE.
        ENDIF.
        GI_ERROR_FILE-TRAN_SEQ_NO = GW_TRANS_SEQ_NO_TAB.
        GI_ERROR_FILE-COMP_CODE   = GW_COMP_CODE_TAB.
        GI_ERROR_FILE-RECORD_DATE = SY-DATUM.
        GI_ERROR_FILE-RECORD_TIME = SY-UZEIT.
        GI_ERROR_FILE-REJECT_REASON = GW_REJECT_REASON_TAB.
        APPEND GI_ERROR_FILE TO GT_ERROR_FILE.
        MOVE-CORRESPONDING GI_ERROR_FILE TO GI_ERROR_MARC_SMF.
        MOVE-CORRESPONDING GI_ERROR_FILE TO GI_ERROR_MARC.
        GI_ERROR_MARC-TRAN_NO     = GW_TRAN_NO_TAB.
        APPEND GI_ERROR_MARC TO GT_ERROR_MARC.
        CONCATENATE SY-TIMLO+0(2) ':' SY-TIMLO+2(2) INTO GI_ERROR_MARC_SMF-RECORD_TIME.
        APPEND GI_ERROR_MARC_SMF TO GT_ERROR_MARC_SMF.
      ENDLOOP.
      IF GT_ERROR_MARC IS NOT INITIAL.
*        MODIFY ztmm_marc_gr_me FROM TABLE gt_error_marc.
      ENDIF.
    ELSE.
      GI_ERROR_FILE-TRAN_SEQ_NO = GW_TRANS_SEQ_NO_TAB.
      GI_ERROR_FILE-COMP_CODE   = GW_COMP_CODE_TAB.
      GI_ERROR_FILE-PO_NO       = GW_PO_NO_TAB.
      GI_ERROR_FILE-PO_LINE_NO  = GW_PO_LINE_NO_TAB.
      GI_ERROR_FILE-SKU         = GW_SKU_TAB.
      GI_ERROR_FILE-QTY_EXPE    = GW_QTY_EXPE_TAB.
      GI_ERROR_FILE-CART_LP     = GW_CART_LP_TAB.
      GI_ERROR_FILE-LP          = GW_LP_TAB.
      GI_ERROR_FILE-RECORD_DATE = SY-DATUM.
      GI_ERROR_FILE-RECORD_TIME = SY-UZEIT.
      GI_ERROR_FILE-REJECT_REASON = GW_REJECT_REASON_TAB.
      APPEND GI_ERROR_FILE TO GT_ERROR_FILE.
      MOVE-CORRESPONDING GI_ERROR_FILE TO GI_ERROR_MARC.
      MOVE-CORRESPONDING GI_ERROR_FILE TO GI_ERROR_MARC_SMF.
      GI_ERROR_MARC-TRAN_NO     = GW_TRAN_NO_TAB.
      APPEND GI_ERROR_MARC TO GT_ERROR_MARC.
      CONCATENATE SY-TIMLO+0(2) ':' SY-TIMLO+2(2) INTO GI_ERROR_MARC_SMF-RECORD_TIME.
      GI_ERROR_MARC_SMF-QTY_EXPE = GW_QTY_EXPE.
      APPEND GI_ERROR_MARC_SMF TO GT_ERROR_MARC_SMF.
      IF GT_ERROR_MARC IS NOT INITIAL.
*        MODIFY ztmm_marc_gr_me FROM TABLE gt_error_marc.
      ENDIF.
    ENDIF.
  ELSEIF GW_INPUT_STATUS_TAB = 'E' AND GW_ERROR_TYPE_TAB = 'SAP' AND GW_CUS_RET_ERROR NE 'X'.
    READ TABLE GT_MARC_MSG_PR INTO GI_MARC_MSG_PR WITH KEY MSG_ID_NUM = GW_BAPI_ERROR.
    IF SY-SUBRC IS INITIAL.
      IF GI_MARC_MSG_PR-ZPRINT = 'Y'.
        IF LT_BAPI_GM_ITEM IS NOT INITIAL AND GW_REC_ERROR NE 'X' AND GW_TEST = 'X'.
          LOOP AT PT_BAPI_GM_ITEM INTO LI_BAPI_GM_ITEM.
            CLEAR:  GI_MARC_GR_ITEM.
            READ TABLE GT_MARC_GR_ITEM INTO GI_MARC_GR_ITEM WITH KEY BAPI_PO_NO      = LI_BAPI_GM_ITEM-ITEM_TEXT(10) "deliv_numb
                                                                     BAPI_PO_LINE_NO = LI_BAPI_GM_ITEM-ITEM_TEXT+10(6) "deliv_item
                                                                     BAPI_UNLOAD_PT  = LI_BAPI_GM_ITEM-UNLOAD_PT
                                                                     BINARY SEARCH.
            IF SY-SUBRC = 0.
              GI_ERROR_FILE-PO_NO       = GI_MARC_GR_ITEM-PO_NO.
              GI_ERROR_FILE-PO_LINE_NO  = GI_MARC_GR_ITEM-PO_LINE_NO.
              GI_ERROR_FILE-LP          = GI_MARC_GR_ITEM-LP.
              GI_ERROR_FILE-CART_LP     = GI_MARC_GR_ITEM-CART_LP.
              GI_ERROR_FILE-SKU         = GI_MARC_GR_ITEM-MARC_SKU.
              LW_QTY = FLOOR( LI_BAPI_GM_ITEM-ENTRY_QNT ).
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  INPUT  = LW_QTY
                IMPORTING
                  OUTPUT = GI_ERROR_FILE-QTY_EXPE.
            ENDIF.
            GI_ERROR_FILE-TRAN_SEQ_NO = GW_TRANS_SEQ_NO_TAB.
            GI_ERROR_FILE-COMP_CODE   = GW_COMP_CODE_TAB.
            GI_ERROR_FILE-RECORD_DATE = SY-DATUM.
            GI_ERROR_FILE-RECORD_TIME = SY-UZEIT.
            GI_ERROR_FILE-REJECT_REASON = GW_REJECT_REASON_TAB.
            APPEND GI_ERROR_FILE TO GT_ERROR_FILE.
            MOVE-CORRESPONDING GI_ERROR_FILE TO GI_ERROR_MARC_SMF.
            MOVE-CORRESPONDING GI_ERROR_FILE TO GI_ERROR_MARC.
            GI_ERROR_MARC-TRAN_NO     = GW_TRAN_NO_TAB.
            APPEND GI_ERROR_MARC TO GT_ERROR_MARC.
            CONCATENATE SY-TIMLO+0(2) ':' SY-TIMLO+2(2) INTO GI_ERROR_MARC_SMF-RECORD_TIME.
            APPEND GI_ERROR_MARC_SMF TO GT_ERROR_MARC_SMF.
          ENDLOOP.
          IF GT_ERROR_MARC IS NOT INITIAL.
*            MODIFY ztmm_marc_gr_me FROM TABLE gt_error_marc.
          ENDIF.
        ELSE.
          GI_ERROR_FILE-TRAN_SEQ_NO = GW_TRANS_SEQ_NO_TAB.
          GI_ERROR_FILE-COMP_CODE   = GW_COMP_CODE_TAB.
          GI_ERROR_FILE-PO_NO       = GW_PO_NO_TAB.
          GI_ERROR_FILE-PO_LINE_NO  = GW_PO_LINE_NO_TAB.
          GI_ERROR_FILE-SKU         = GW_SKU_TAB.
          GI_ERROR_FILE-QTY_EXPE    = GW_QTY_EXPE_TAB.
          GI_ERROR_FILE-CART_LP     = GW_CART_LP_TAB.
          GI_ERROR_FILE-LP          = GW_LP_TAB.
          GI_ERROR_FILE-RECORD_DATE = SY-DATUM.
          GI_ERROR_FILE-RECORD_TIME = SY-UZEIT.
          GI_ERROR_FILE-REJECT_REASON = GW_REJECT_REASON_TAB.
          APPEND GI_ERROR_FILE TO GT_ERROR_FILE.
          MOVE-CORRESPONDING GI_ERROR_FILE TO GI_ERROR_MARC.
          MOVE-CORRESPONDING GI_ERROR_FILE TO GI_ERROR_MARC_SMF.
          GI_ERROR_MARC-TRAN_NO     = GW_TRAN_NO_TAB.
          APPEND GI_ERROR_MARC TO GT_ERROR_MARC.
          CONCATENATE SY-TIMLO+0(2) ':' SY-TIMLO+2(2) INTO GI_ERROR_MARC_SMF-RECORD_TIME.
          GI_ERROR_MARC_SMF-QTY_EXPE = GW_QTY_EXPE.
          APPEND GI_ERROR_MARC_SMF TO GT_ERROR_MARC_SMF.
          IF GT_ERROR_MARC IS NOT INITIAL.
*            MODIFY ztmm_marc_gr_me FROM TABLE gt_error_marc.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
*  ENDIF.
  ENDIF.

  IF GW_INPUT_STATUS_TAB = 'E' AND GW_ERROR_TYPE_TAB = 'MARC' AND GW_CUS_RET_ERROR = 'X'.
    GI_ERROR_FILE-TRAN_SEQ_NO = GW_TRANS_SEQ_NO_TAB.
    GI_ERROR_FILE-COMP_CODE   = GW_COMP_CODE_TAB.
    GI_ERROR_FILE-PO_NO       = GW_PO_NO_TAB.
    GI_ERROR_FILE-PO_LINE_NO  = GW_PO_LINE_NO_TAB.
    GI_ERROR_FILE-SKU         = GW_SKU_TAB.
    GI_ERROR_FILE-QTY_EXPE    = GW_QTY_EXPE_TAB.
    GI_ERROR_FILE-CART_LP     = GW_CART_LP_TAB.
    GI_ERROR_FILE-LP          = GW_LP_TAB.
    GI_ERROR_FILE-RECORD_DATE = SY-DATUM.
    GI_ERROR_FILE-RECORD_TIME = SY-UZEIT.
    GI_ERROR_FILE-REJECT_REASON = GW_REJECT_REASON_TAB.
    APPEND GI_ERROR_FILE TO GT_ERROR_FILE.
    MOVE-CORRESPONDING GI_ERROR_FILE TO GI_ERROR_MARC.
    MOVE-CORRESPONDING GI_ERROR_FILE TO GI_ERROR_MARC_SMF.
    GI_ERROR_MARC-TRAN_NO     = GW_TRAN_NO_TAB.
    APPEND GI_ERROR_MARC TO GT_ERROR_MARC.
    CONCATENATE SY-TIMLO+0(2) ':' SY-TIMLO+2(2) INTO GI_ERROR_MARC_SMF-RECORD_TIME.
    GI_ERROR_MARC_SMF-QTY_EXPE = GW_QTY_EXPE.
    APPEND GI_ERROR_MARC_SMF TO GT_ERROR_MARC_SMF.
    IF GT_ERROR_MARC IS NOT INITIAL.
*      MODIFY ztmm_marc_gr_me FROM TABLE gt_error_marc.
    ENDIF.
  ELSEIF GW_INPUT_STATUS_TAB = 'E' AND GW_ERROR_TYPE_TAB = 'SAP' AND GW_CUS_RET_ERROR = 'X'.
    READ TABLE GT_MARC_MSG_PR INTO GI_MARC_MSG_PR WITH KEY MSG_ID_NUM = GW_BAPI_ERROR.
    IF SY-SUBRC IS INITIAL.
      IF GI_MARC_MSG_PR-ZPRINT = 'Y'.
        GI_ERROR_FILE-TRAN_SEQ_NO = GW_TRANS_SEQ_NO_TAB.
        GI_ERROR_FILE-COMP_CODE   = GW_COMP_CODE_TAB.
        GI_ERROR_FILE-PO_NO       = GW_PO_NO_TAB.
        GI_ERROR_FILE-PO_LINE_NO  = GW_PO_LINE_NO_TAB.
        GI_ERROR_FILE-SKU         = GW_SKU_TAB.
        GI_ERROR_FILE-QTY_EXPE    = GW_QTY_EXPE_TAB.
        GI_ERROR_FILE-CART_LP     = GW_CART_LP_TAB.
        GI_ERROR_FILE-LP          = GW_LP_TAB.
        GI_ERROR_FILE-RECORD_DATE = SY-DATUM.
        GI_ERROR_FILE-RECORD_TIME = SY-UZEIT.
        GI_ERROR_FILE-REJECT_REASON = GW_REJECT_REASON_TAB.
        APPEND GI_ERROR_FILE TO GT_ERROR_FILE.
        MOVE-CORRESPONDING GI_ERROR_FILE TO GI_ERROR_MARC.
        MOVE-CORRESPONDING GI_ERROR_FILE TO GI_ERROR_MARC_SMF.
        GI_ERROR_MARC-TRAN_NO     = GW_TRAN_NO_TAB.
        APPEND GI_ERROR_MARC TO GT_ERROR_MARC.
        CONCATENATE SY-TIMLO+0(2) ':' SY-TIMLO+2(2) INTO GI_ERROR_MARC_SMF-RECORD_TIME.
        GI_ERROR_MARC_SMF-QTY_EXPE = GW_QTY_EXPE.
        APPEND GI_ERROR_MARC_SMF TO GT_ERROR_MARC_SMF.
        IF GT_ERROR_MARC IS NOT INITIAL.
*          MODIFY ztmm_marc_gr_me FROM TABLE gt_error_marc.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

  CLEAR: GI_ZTMM_MARC_FILE,GI_ERROR_FILE,GW_MBLNR,GW_ERROR_TYPE_TAB,GI_ERROR_MARC,GI_ERROR_MARC_SMF,GW_REJECT_REASON_TAB.

ENDFORM.                    " FILE_TABLE_UPDATE
*&---------------------------------------------------------------------*
*&      Form  FILE_TEMP_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILE_TEMP_DATA .
  GI_MARC_GR_ITEM-TRAN_NO     = GW_TRAN_NO_TAB.
  GI_MARC_GR_ITEM-TRAN_SEQ_NO = GW_TRANS_SEQ_NO_TAB.
  GI_MARC_GR_ITEM-DATA_TYPE   = GW_DATA_TYPE_TAB.
  GI_MARC_GR_ITEM-COMP_CODE   = GW_COMP_CODE_TAB.
  GI_MARC_GR_ITEM-PO_NO       = GW_PO_NO_TAB.
  IF GI_BAPI_GM_ITEM-DELIV_NUMB IS NOT INITIAL.
    GI_MARC_GR_ITEM-BAPI_PO_NO  = GI_BAPI_GM_ITEM-DELIV_NUMB.
    <GFS_RECL>-BAPI_PO_NO = GI_BAPI_GM_ITEM-DELIV_NUMB.
  ELSE.
    GI_MARC_GR_ITEM-BAPI_PO_NO  = GI_BAPI_GM_ITEM-ITEM_TEXT(10).
    <GFS_RECL>-BAPI_PO_NO = GI_BAPI_GM_ITEM-ITEM_TEXT(10).
  ENDIF.
  IF GI_BAPI_GM_ITEM-DELIV_ITEM IS NOT INITIAL.
    GI_MARC_GR_ITEM-BAPI_PO_LINE_NO = GI_BAPI_GM_ITEM-DELIV_ITEM.
    <GFS_RECL>-BAPI_PO_LINE_NO = GI_BAPI_GM_ITEM-DELIV_ITEM.
  ELSE.
    GI_MARC_GR_ITEM-BAPI_PO_LINE_NO = GI_BAPI_GM_ITEM-ITEM_TEXT+10(6).
    <GFS_RECL>-BAPI_PO_LINE_NO = GI_BAPI_GM_ITEM-ITEM_TEXT+10(6).
  ENDIF.
  GI_MARC_GR_ITEM-PO_LINE_NO    = GW_PO_LINE_NO_TAB.
  GI_MARC_GR_ITEM-SHIPPER_BL_NO = GI_BAPI_GM_HEAD-BILL_OF_LADING.
  GI_MARC_GR_ITEM-REC_TYPE      = GV_RECTYPE.
  GI_MARC_GR_ITEM-SKU           = GI_BAPI_GM_ITEM-MATERIAL.
  GI_MARC_GR_ITEM-MARC_SKU      = GW_SKU_TAB.
  GI_MARC_GR_ITEM-UOM_ABBREV    = GW_UOM_ABBREV.
  GI_MARC_GR_ITEM-QTY_EXPE      = GI_BAPI_GM_ITEM-ENTRY_QNT.
  GI_MARC_GR_ITEM-PROD_STAT     = GW_PROD_STAT.
  GI_MARC_GR_ITEM-LOT           = GW_LOT.
  GI_MARC_GR_ITEM-LP            = GW_LP.
  GI_MARC_GR_ITEM-CART_LP       = GW_CART_LP.
  GI_MARC_GR_ITEM-BAPI_VENDOR_ID      = GW_VENDOR.
  GI_MARC_GR_ITEM-BAPI_REF_DOC_NO     = GI_BAPI_GM_HEAD-REF_DOC_NO.
  GI_MARC_GR_ITEM-BAPI_BILL_OF_LADING = GI_BAPI_GM_HEAD-BILL_OF_LADING.
  GI_MARC_GR_ITEM-BAPI_HEADER_TXT     = GI_BAPI_GM_HEAD-HEADER_TXT.
  GI_MARC_GR_ITEM-BAPI_PLANT     = GI_BAPI_GM_ITEM-PLANT.
  GI_MARC_GR_ITEM-BAPI_ENTRY_UOM = GI_BAPI_GM_ITEM-ENTRY_UOM.
  GI_MARC_GR_ITEM-BAPI_MOVE_TYPE = GI_BAPI_GM_ITEM-MOVE_TYPE.
  GI_MARC_GR_ITEM-BAPI_MOVE_REAS = GI_BAPI_GM_ITEM-MOVE_REAS.
  GI_MARC_GR_ITEM-BAPI_STGE_LOC  = GI_BAPI_GM_ITEM-STGE_LOC.
  GI_MARC_GR_ITEM-BAPI_MOVE_STLOC  = GI_BAPI_GM_ITEM-MOVE_STLOC.
  GI_MARC_GR_ITEM-BAPI_STCK_TYPE = GI_BAPI_GM_ITEM-STCK_TYPE.
  GI_MARC_GR_ITEM-BAPI_BATCH     = GI_BAPI_GM_ITEM-BATCH .
  GI_MARC_GR_ITEM-BAPI_UNLOAD_PT = GI_BAPI_GM_ITEM-UNLOAD_PT.
  GI_MARC_GR_ITEM-BAPI_ITEM_TEXT = GI_BAPI_GM_ITEM-ITEM_TEXT.
  GI_MARC_GR_ITEM-BAPI_PO_NUMBER = GI_BAPI_GM_ITEM-PO_NUMBER.
  GI_MARC_GR_ITEM-BAPI_PO_ITEM   = GI_BAPI_GM_ITEM-PO_ITEM.
  GI_MARC_GR_ITEM-BAPI_MVT_IND   = GI_BAPI_GM_ITEM-MVT_IND.
  GI_MARC_GR_ITEM-BAPI_GM_CODE   = GI_BAPI_GM_CODE-GM_CODE.
  GI_MARC_GR_ITEM-BAPI_DEC_CODE  = GW_INSP_CODE.
  GI_MARC_GR_ITEM-BAPI_FU_CODE   = GW_FOLLOWUP_ACT.
  GI_MARC_GR_ITEM-RECORD_DATE    = SY-DATUM.
  GI_MARC_GR_ITEM-RECORD_TIME    = SY-UZEIT.
  GI_MARC_GR_ITEM-RECORD_USER    = SY-UNAME.

  APPEND GI_MARC_GR_ITEM TO GT_MARC_GR_ITEM.
  CLEAR GI_MARC_GR_ITEM.

ENDFORM.                    " FILE_TEMP_DATA
*&---------------------------------------------------------------------*
*&      Form  FILL_BAPI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_BAPI USING PW_VENDOR.
  DATA: LW_MBLNR      TYPE BAPI2017_GM_HEAD_RET-MAT_DOC,
        LW_XCHPF      TYPE CHAR1,
        LW_CHAR       TYPE STRING,
        LW_ERROR      TYPE CHAR1,
        LW_VENDOR1    TYPE ELIFN,
        LW_SUP_VENDOR TYPE ELIFN,
        LW_REF_DOC_NO TYPE XBLNR,
        LW_LIFEX      TYPE CHAR10,
        LV_ZZALTMN    TYPE ZALTMN.
  DATA: LW_PLANT TYPE WERKS_D. "USPRADI DE3K9A0DSF on 02.06.2022
  GV_PROD_STATUS = <GFS_RECL>-PROD_STAT.
*  gv_fail_step = <gfs_recl>-fail_step.
*  gi_bapi_gm_item-rech_seq = <gfs_recl>-rech_seq.
*  gi_bapi_gm_item-recl_seq = <gfs_recl>-record_sqn.
  LW_REF_DOC_NO                 = <GFS_RECL>-PO_NO.
  GW_PO_NO_TAB                  = <GFS_RECL>-PO_NO.
  GW_PO_LINE_NO_TAB             = <GFS_RECL>-PO_LINE_NO.  "PO_LINE_NO
  GW_PROD_STAT                  = <GFS_RECL>-PROD_STAT.  "PROD_STAT
  GW_SKU_TAB                    = <GFS_RECL>-SKU.  "SKU
  GW_QTY_EXPE_TAB               = <GFS_RECL>-QTY_EXPE.   "QTY_EXPE
  GW_QTY_EXPE                   = <GFS_RECL>-QTY_EXPE.   "QTY_EXPE
  GW_LP_TAB                     = <GFS_RECL>-LP.  "LP
  GW_CART_LP_TAB                = <GFS_RECL>-CART_LP.  "CART_LP

** Validate RECL data and fill structures for BAPI
** Material conversion and Validation
  LV_ZZALTMN = <GFS_RECL>-SKU.
** Begin of changes by USPRADI DE3K9A0DSF on 02.06.2022
  CLEAR:GI_ZTUHCD1.
  READ TABLE GT_ZTUHCD1 INTO GI_ZTUHCD1 WITH KEY NAME = 'MARC_INTERFACE'
                                                 ZKEY = ''
                                                 FIELD = 'WERKS'
                                                 HIGH  = P_CCODE.   "COMP_CODE
  IF SY-SUBRC = 0.
    LW_PLANT = GI_ZTUHCD1-LOW.
  ENDIF.
*  CALL FUNCTION 'ZMM_MARC_ALT_MAT_CONV_FM'
*    EXPORTING
*      im_matnum     = lv_zzaltmn
*    IMPORTING
*      ex_matnr      = gw_matnr
*      ex_zzaltmn    = gw_zzaltmn
*      ex_found      = gw_flag
*      ex_alt_length = gw_strln
*      ex_switch     = gw_switch.
  CALL FUNCTION 'ZMM_MARC_ALT_MAT_CONV_FM'
    EXPORTING
      IM_MATNUM      = LV_ZZALTMN
      IM_WERKS       = LW_PLANT
      IM_MAT_TYPE    = GW_MARC_PRINT-RFC
    IMPORTING
      EX_MATNR       = GW_MATNR
      EX_ALT_LMT     = GW_ZZALTMN
      EX_FOUND       = GW_FLAG
      EX_ALT_LMT_LEN = GW_STRLN.
** End of changes by USPRADI DE3K9A0DSF on 02.06.2022
  IF GW_SWITCH = 'ON'.
    IF GW_FLAG EQ 'X'.
      IF GW_ZZALTMN IS NOT INITIAL.
        IF  GW_STRLN LE 20.
          GI_BAPI_GM_ITEM-MATERIAL      = GW_MATNR."gi_input_data-data+58(20).  "SKU
        ELSE.
****Process the record to error report***    ???
          GW_REC_ERROR         = 'X'.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'MARC'.
          GW_REJECT_REASON_TAB = TEXT-046.
          CONCATENATE GW_REJECT_REASON_TAB ':' <GFS_RECL>-SKU INTO GW_REJECT_REASON_TAB.
          <GFS_RECL>-PROCESS_STATUS = 'M'.
          <GFS_RECL>-REASON = GW_REJECT_REASON_TAB.
          IF P_REPR = 'X'. "USPRADI JE3K906283 30.03.2022
            <GFS_RECL>-CHANGED_DATE = SY-DATUM.
            <GFS_RECL>-CHANGED_TIME = SY-UZEIT.
            <GFS_RECL>-CHANGED_BY = SY-UNAME.
          ENDIF. "USPRADI JE3K906283 30.03.2022
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
          CLEAR: GI_BAPI_GM_ITEM.
*          CONTINUE.
          GV_CONTINUE = 'X'.
          RETURN.
        ENDIF.
      ELSE.
        GI_BAPI_GM_ITEM-MATERIAL      = GW_MATNR."gi_input_data-data+58(20).  "SKU
      ENDIF.
    ELSE.
****Process the record to error report***    ???
      GW_REC_ERROR         = 'X'.
      GW_INPUT_STATUS_TAB  = 'E'.
      GW_ERROR_TYPE_TAB    = 'MARC'.
      GW_REJECT_REASON_TAB = TEXT-047.
      CONCATENATE GW_REJECT_REASON_TAB ':' <GFS_RECL>-SKU INTO GW_REJECT_REASON_TAB.
      <GFS_RECL>-PROCESS_STATUS = 'M'.
      <GFS_RECL>-REASON = GW_REJECT_REASON_TAB.
      IF P_REPR = 'X'. "USPRADI JE3K906283 30.03.2022
        <GFS_RECL>-CHANGED_DATE = SY-DATUM.
        <GFS_RECL>-CHANGED_TIME = SY-UZEIT.
        <GFS_RECL>-CHANGED_BY = SY-UNAME.
      ENDIF. "USPRADI JE3K906283 30.03.2022
      PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
      CLEAR: GI_BAPI_GM_ITEM.
*      CONTINUE.
      GV_CONTINUE = 'X'.
      RETURN.
    ENDIF.
  ELSE.
    GI_BAPI_GM_ITEM-MATERIAL      = <GFS_RECL>-SKU.  "SKU
  ENDIF.

*****PO Line has Non-Numeric Values
  GW_VALUE                  = <GFS_RECL>-PO_LINE_NO.  "PO_LINE_NO
  CALL FUNCTION 'NUMERIC_CHECK'
    EXPORTING
      STRING_IN = GW_VALUE
    IMPORTING
      HTYPE     = GW_NTYPE.
  IF GW_NTYPE NE 'NUMC'.
****Process the record to error report***    ???
    GW_REC_ERROR         = 'X'.
    GW_INPUT_STATUS_TAB  = 'E'.
    GW_ERROR_TYPE_TAB    = 'MARC'.
    GW_REJECT_REASON_TAB = TEXT-007.
    CONCATENATE GW_REJECT_REASON_TAB ':' GW_VALUE  INTO GW_REJECT_REASON_TAB.
    <GFS_RECL>-PROCESS_STATUS = 'M'.
    <GFS_RECL>-REASON = GW_REJECT_REASON_TAB.
    IF P_REPR = 'X'. "USPRADI JE3K906283 30.03.2022
      <GFS_RECL>-CHANGED_DATE = SY-DATUM.
      <GFS_RECL>-CHANGED_TIME = SY-UZEIT.
      <GFS_RECL>-CHANGED_BY = SY-UNAME.
    ENDIF. "USPRADI JE3K906283 30.03.2022
    PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
    CLEAR: GI_BAPI_GM_ITEM.
*    CONTINUE.
    GV_CONTINUE = 'X'.
    RETURN.
  ENDIF.

*****Quantity has Non-Numeric Values
  GW_VALUE                  = <GFS_RECL>-QTY_EXPE.   "QTY_EXPE
  CALL FUNCTION 'NUMERIC_CHECK'
    EXPORTING
      STRING_IN = GW_VALUE
    IMPORTING
      HTYPE     = GW_NTYPE.
  IF GW_NTYPE NE 'NUMC'.
****Process the record to error report***    ???
    GW_REC_ERROR         = 'X'.
    GW_INPUT_STATUS_TAB  = 'E'.
    GW_ERROR_TYPE_TAB    = 'MARC'.
    GW_REJECT_REASON_TAB = TEXT-008.
    CONCATENATE GW_REJECT_REASON_TAB ':' GW_VALUE  INTO GW_REJECT_REASON_TAB.
    <GFS_RECL>-PROCESS_STATUS = 'M'.
    <GFS_RECL>-REASON = GW_REJECT_REASON_TAB.
    IF P_REPR = 'X'. "USPRADI JE3K906283 30.03.2022
      <GFS_RECL>-CHANGED_DATE = SY-DATUM.
      <GFS_RECL>-CHANGED_TIME = SY-UZEIT.
      <GFS_RECL>-CHANGED_BY = SY-UNAME.
    ENDIF. "USPRADI JE3K906283 30.03.2022
    PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
    CLEAR: GI_BAPI_GM_ITEM.
*    CONTINUE.
    GV_CONTINUE = 'X'.
    RETURN.
  ELSE.
    GI_BAPI_GM_ITEM-ENTRY_QNT     = <GFS_RECL>-QTY_EXPE.   "QTY_EXPE
  ENDIF.

*****Unit Of Measure***
  GW_UOM_ABBREV = <GFS_RECL>-UOM_ABBREV.  "UOM_ABBREV
  GW_UOM        = <GFS_RECL>-UOM_ABBREV.  "UOM_ABBREV
  CLEAR:GI_ZTUHCD1.
  READ TABLE GT_ZTUHCD1 INTO GI_ZTUHCD1 WITH KEY ZKEY = 'UOM'
                                                 HIGH  = <GFS_RECL>-UOM_ABBREV .  "UOM_ABBREV
  IF SY-SUBRC = 0.
    GI_BAPI_GM_ITEM-ENTRY_UOM     = GI_ZTUHCD1-LOW.
  ELSE.
****Process the record to error report***    ???
    GW_REC_ERROR         = 'X'.
    GW_INPUT_STATUS_TAB  = 'E'.
    GW_ERROR_TYPE_TAB    = 'MARC'.
    GW_REJECT_REASON_TAB = TEXT-009.
    CONCATENATE GW_REJECT_REASON_TAB ':' GW_UOM INTO GW_REJECT_REASON_TAB.
    <GFS_RECL>-PROCESS_STATUS = 'M'.
    <GFS_RECL>-REASON = GW_REJECT_REASON_TAB.
    IF P_REPR = 'X'. "USPRADI JE3K906283 30.03.2022
      <GFS_RECL>-CHANGED_DATE = SY-DATUM.
      <GFS_RECL>-CHANGED_TIME = SY-UZEIT.
      <GFS_RECL>-CHANGED_BY = SY-UNAME.
    ENDIF. "USPRADI JE3K906283 30.03.2022
    PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
    CLEAR: GI_BAPI_GM_ITEM.
*    CONTINUE.
    GV_CONTINUE = 'X'.
    RETURN.
  ENDIF.

****Plant***
  CLEAR:GI_ZTUHCD1.
  READ TABLE GT_ZTUHCD1 INTO GI_ZTUHCD1 WITH KEY FIELD = 'WERKS'
                                                 HIGH  = <GFS_RECL>-COMP_CODE.   "COMP_CODE
  IF SY-SUBRC = 0.
    GI_BAPI_GM_ITEM-PLANT         = GI_ZTUHCD1-LOW.
  ELSE.
****Process the record to error report***
    GW_REC_ERROR         = 'X'.
    GW_INPUT_STATUS_TAB  = 'E'.
    GW_ERROR_TYPE_TAB    = 'MARC'.
    GW_REJECT_REASON_TAB = TEXT-010.
    <GFS_RECL>-PROCESS_STATUS = 'M'.
    <GFS_RECL>-REASON = GW_REJECT_REASON_TAB.
    IF P_REPR = 'X'. "USPRADI JE3K906283 30.03.2022
      <GFS_RECL>-CHANGED_DATE = SY-DATUM.
      <GFS_RECL>-CHANGED_TIME = SY-UZEIT.
      <GFS_RECL>-CHANGED_BY = SY-UNAME.
    ENDIF. "USPRADI JE3K906283 30.03.2022
    PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
    CLEAR: GI_BAPI_GM_ITEM.
*    CONTINUE.
    GV_CONTINUE = 'X'.
    RETURN.
  ENDIF.

*****LOT - Batch Number***
  GW_LOT = <GFS_RECL>-LOT. "LOT
  IF GI_BAPI_GM_ITEM-PLANT IS NOT INITIAL AND GI_BAPI_GM_ITEM-MATERIAL IS NOT INITIAL.
    SELECT SINGLE XCHPF
      INTO LW_XCHPF
      FROM MARC
      WHERE MATNR = GI_BAPI_GM_ITEM-MATERIAL
      AND   WERKS = GI_BAPI_GM_ITEM-PLANT.
    IF SY-SUBRC = 0.
      IF LW_XCHPF = 'X'.
        IF GW_LOT IS NOT INITIAL.
***IF BATCH contains NO-LOT
          IF GW_LOT CS 'NO-LOT'.
****Process the record to error report***
            GW_REC_ERROR         = 'X'.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'MARC'.
            GW_REJECT_REASON_TAB = TEXT-042.
            <GFS_RECL>-PROCESS_STATUS = 'M'.
            <GFS_RECL>-REASON = GW_REJECT_REASON_TAB.
            IF P_REPR = 'X'. "USPRADI JE3K906283 30.03.2022
              <GFS_RECL>-CHANGED_DATE = SY-DATUM.
              <GFS_RECL>-CHANGED_TIME = SY-UZEIT.
              <GFS_RECL>-CHANGED_BY = SY-UNAME.
            ENDIF. "USPRADI JE3K906283 30.03.2022
            PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
            CLEAR: GI_BAPI_GM_ITEM.
*            CONTINUE.
            GV_CONTINUE = 'X'.
            RETURN.
          ELSE.
***IF BATCH contains Special Characters
            CLEAR: LW_CHAR,LW_ERROR.
            CALL FUNCTION 'CHECK_STRING_SPEC_CHARACTERS'
              EXPORTING
                STRING    = GW_LOT
              IMPORTING
                CHARACTER = LW_CHAR
                ERRORFLAG = LW_ERROR.
            IF LW_ERROR IS NOT INITIAL.
****Process the record to error report***
              GW_REC_ERROR         = 'X'.
              GW_INPUT_STATUS_TAB  = 'E'.
              GW_ERROR_TYPE_TAB    = 'MARC'.
              GW_REJECT_REASON_TAB = TEXT-043.
              CONCATENATE TEXT-043 ':' GW_LOT INTO GW_REJECT_REASON_TAB.
              <GFS_RECL>-PROCESS_STATUS = 'M'.
              <GFS_RECL>-REASON = GW_REJECT_REASON_TAB.
              IF P_REPR = 'X'. "USPRADI JE3K906283 30.03.2022
                <GFS_RECL>-CHANGED_DATE = SY-DATUM.
                <GFS_RECL>-CHANGED_TIME = SY-UZEIT.
                <GFS_RECL>-CHANGED_BY = SY-UNAME.
              ENDIF. "USPRADI JE3K906283 30.03.2022
              PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
              CLEAR: GI_BAPI_GM_ITEM.
*              CONTINUE.
              GV_CONTINUE = 'X'.
              RETURN.
            ELSE.
              GI_BAPI_GM_ITEM-BATCH         = <GFS_RECL>-LOT. "LOT
            ENDIF.
          ENDIF.
        ELSE.
****Process the record to error report***
          GW_REC_ERROR         = 'X'.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'MARC'.
          GW_REJECT_REASON_TAB = TEXT-040.
          <GFS_RECL>-PROCESS_STATUS = 'M'.
          <GFS_RECL>-REASON = GW_REJECT_REASON_TAB.
          IF P_REPR = 'X'. "USPRADI JE3K906283 30.03.2022
            <GFS_RECL>-CHANGED_DATE = SY-DATUM.
            <GFS_RECL>-CHANGED_TIME = SY-UZEIT.
            <GFS_RECL>-CHANGED_BY = SY-UNAME.
          ENDIF. "USPRADI JE3K906283 30.03.2022
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
          CLEAR: GI_BAPI_GM_ITEM.
*          CONTINUE.
          GV_CONTINUE = 'X'.
          RETURN.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

*****Unloading Point******
  GW_LP       = <GFS_RECL>-LP.  "LP
  GW_CART_LP  = <GFS_RECL>-CART_LP.  "CART_LP
  IF GW_LP IS INITIAL
  AND GW_CART_LP IS INITIAL.
****Process the record to error report***
    GW_REC_ERROR         = 'X'.
    GW_INPUT_STATUS_TAB  = 'E'.
    GW_ERROR_TYPE_TAB    = 'MARC'.
    GW_REJECT_REASON_TAB = TEXT-011.
    <GFS_RECL>-PROCESS_STATUS = 'M'.
    <GFS_RECL>-REASON = GW_REJECT_REASON_TAB.
    IF P_REPR = 'X'. "USPRADI JE3K906283 30.03.2022
      <GFS_RECL>-CHANGED_DATE = SY-DATUM.
      <GFS_RECL>-CHANGED_TIME = SY-UZEIT.
      <GFS_RECL>-CHANGED_BY = SY-UNAME.
    ENDIF.. "USPRADI JE3K906283 30.03.2022
    PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
    CLEAR: GI_BAPI_GM_ITEM.
*    CONTINUE.
    GV_CONTINUE = 'X'.
    RETURN.
  ELSE.
    IF GW_CART_LP IS NOT INITIAL.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
*      gi_bapi_gm_item-unload_pt     = <gfs_recl>-cart_lp.  "CART_LP
      CONCATENATE <GFS_RECL>-CART_LP '-' <GFS_RECL>-RECL_SEQ INTO GI_BAPI_GM_ITEM-UNLOAD_PT.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
    ELSE.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
*      gi_bapi_gm_item-unload_pt     = <gfs_recl>-lp.  "LP
      CONCATENATE <GFS_RECL>-LP '-' <GFS_RECL>-RECL_SEQ INTO GI_BAPI_GM_ITEM-UNLOAD_PT.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
    ENDIF.
  ENDIF.

*****Transformations****
*****          Surprise Receipts Linked-- Rec Type - 01/02 / 04 / 05
  IF GW_PO_LINE_NO_TAB IS INITIAL AND GV_RECTYPE NE 10.
    CLEAR: GI_ZTMM_MARC_TRANS.
    READ TABLE GT_ZTMM_MARC_TRANS INTO GI_ZTMM_MARC_TRANS WITH KEY REC_TYPE  = GV_RECTYPE
                                                         PROD_STAT = GW_PROD_STAT
                                                         LINE_ITEM = GW_PO_LINE_NO_TAB.

    IF SY-SUBRC NE 0.
****Process the record to error report***
      GW_REC_ERROR         = 'X'.
      GW_INPUT_STATUS_TAB  = 'E'.
      GW_ERROR_TYPE_TAB    = 'MARC'.
      CONCATENATE TEXT-034 GV_RECTYPE TEXT-035 GW_PROD_STAT TEXT-012
      INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.
      <GFS_RECL>-PROCESS_STATUS = 'M'.
      <GFS_RECL>-REASON = GW_REJECT_REASON_TAB.
      IF P_REPR = 'X'. "USPRADI JE3K906283 30.03.2022
        <GFS_RECL>-CHANGED_DATE = SY-DATUM.
        <GFS_RECL>-CHANGED_TIME = SY-UZEIT.
        <GFS_RECL>-CHANGED_BY = SY-UNAME.
      ENDIF. "USPRADI JE3K906283 30.03.2022
      PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
      CLEAR: GI_BAPI_GM_ITEM.
*      CONTINUE.
      GV_CONTINUE = 'X'.
      RETURN.
    ELSE.
      GI_BAPI_GM_ITEM-MOVE_TYPE     = GI_ZTMM_MARC_TRANS-BWART.  "Movement Type
      GI_BAPI_GM_ITEM-MOVE_REAS     = GI_ZTMM_MARC_TRANS-GRUND.  "Reason for Goods movement
      GI_BAPI_GM_ITEM-STGE_LOC      = GI_ZTMM_MARC_TRANS-SRC_LGORT.  " Source Storage Location
      GI_BAPI_GM_ITEM-STCK_TYPE     = GI_ZTMM_MARC_TRANS-INSMK.  "Stock Type
      GI_BAPI_GM_CODE-GM_CODE       = GI_ZTMM_MARC_TRANS-GM_CODE." '03'.  "GM_CODE
      GI_BAPI_GM_ITEM-MOVE_STLOC    = GI_ZTMM_MARC_TRANS-DES_LGORT.  "Destination Storage Location
    ENDIF.
  ELSE.
    CLEAR: GI_ZTMM_MARC_TRANS.
    READ TABLE GT_ZTMM_MARC_TRANS INTO GI_ZTMM_MARC_TRANS WITH KEY REC_TYPE = GV_RECTYPE
                                                                   PROD_STAT = GW_PROD_STAT.

    IF SY-SUBRC NE 0.
****Process the record to error report***
      GW_REC_ERROR         = 'X'.
      GW_INPUT_STATUS_TAB  = 'E'.
      GW_ERROR_TYPE_TAB    = 'MARC'.
      CONCATENATE TEXT-034 GV_RECTYPE TEXT-035 GW_PROD_STAT TEXT-012
      INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.
      <GFS_RECL>-PROCESS_STATUS = 'M'.
      <GFS_RECL>-REASON = GW_REJECT_REASON_TAB.
      IF P_REPR = 'X'. "USPRADI JE3K906283 30.03.2022
        <GFS_RECL>-CHANGED_DATE = SY-DATUM.
        <GFS_RECL>-CHANGED_TIME = SY-UZEIT.
        <GFS_RECL>-CHANGED_BY = SY-UNAME.
      ENDIF. "USPRADI JE3K906283 30.03.2022
      PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
      CLEAR: GI_BAPI_GM_ITEM.
*      CONTINUE.
      GV_CONTINUE = 'X'.
      RETURN.
    ELSE.
      GI_BAPI_GM_ITEM-MOVE_TYPE     = GI_ZTMM_MARC_TRANS-BWART.  "Movement Type
      GI_BAPI_GM_ITEM-MOVE_REAS     = GI_ZTMM_MARC_TRANS-GRUND.  "Reason for Goods movement
      GI_BAPI_GM_ITEM-STGE_LOC      = GI_ZTMM_MARC_TRANS-SRC_LGORT.  " Source Storage Location
      GI_BAPI_GM_ITEM-STCK_TYPE     = GI_ZTMM_MARC_TRANS-INSMK.  "Stock Type
      GI_BAPI_GM_CODE-GM_CODE       = GI_ZTMM_MARC_TRANS-GM_CODE." '01'.  "GM_CODE
      GI_BAPI_GM_ITEM-MOVE_STLOC    = GI_ZTMM_MARC_TRANS-DES_LGORT.  "Destination Storage Location
      GW_INSP_CODE        = GI_ZTMM_MARC_TRANS-INSP_CODE.  "Inspection Code
      GW_FOLLOWUP_ACT     = GI_ZTMM_MARC_TRANS-FOLLOWUP_ACT.  "Follow-Up Activity Code
    ENDIF.
  ENDIF.

** Vendor check - Surprise receipts non-linked
  IF GW_PO_LINE_NO_TAB IS INITIAL AND GV_RECTYPE NE 10.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = PW_VENDOR
      IMPORTING
        OUTPUT = LW_VENDOR1.

    CLEAR: LW_SUP_VENDOR.
    SELECT SINGLE LIFNR INTO LW_SUP_VENDOR FROM EORD
      WHERE MATNR = GI_BAPI_GM_ITEM-MATERIAL
      AND   WERKS = GI_BAPI_GM_ITEM-PLANT.
    IF  SY-SUBRC NE 0 OR LW_SUP_VENDOR IS INITIAL OR
      ( SY-SUBRC EQ 0 AND LW_VENDOR1 NE LW_SUP_VENDOR ).
****Process the record to error report***
      GW_REC_ERROR         = 'X'.
      GW_INPUT_STATUS_TAB  = 'E'.
      GW_ERROR_TYPE_TAB    = 'MARC'.
*      gw_reject_reason_tab = text-048.
      CONCATENATE LW_VENDOR1 ':' TEXT-048 INTO GW_REJECT_REASON_TAB.
      <GFS_RECL>-PROCESS_STATUS = 'M'.
      <GFS_RECL>-REASON = GW_REJECT_REASON_TAB.
      IF P_REPR = 'X'. "USPRADI JE3K906283 30.03.2022
        <GFS_RECL>-CHANGED_DATE = SY-DATUM.
        <GFS_RECL>-CHANGED_TIME = SY-UZEIT.
        <GFS_RECL>-CHANGED_BY = SY-UNAME.
      ENDIF. "USPRADI JE3K906283 30.03.2022
      PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
      CLEAR: GI_BAPI_GM_ITEM.
*      CONTINUE.
      GV_CONTINUE = 'X'.
      RETURN.
    ENDIF.
  ENDIF.

*****Record Type is Surprise Receipts Non Linked
  IF GV_RECTYPE NE 10.
*****Record Type is Surprise Receipts Linked
    IF GW_PO_LINE_NO_TAB IS NOT INITIAL .
***PO Number & Line Item***
      IF GW_PO_NO_TAB IS NOT INITIAL AND GW_PO_LINE_NO_TAB IS NOT INITIAL.
        SELECT
            VBELN
            LFART
            LIFNR
            LIFEX
            INTO GI_LIKP
            FROM LIKP
            WHERE VBELN = GW_PO_NO_TAB.
        ENDSELECT.
*****PO Number == IBD if LFART = EL  OR LR2
        IF GI_LIKP-LFART IN GR_LFART_IBD.
          SELECT SINGLE  VGBEL VGPOS FROM LIPS
            INTO (GI_BAPI_GM_ITEM-PO_NUMBER, GI_BAPI_GM_ITEM-PO_ITEM)
            WHERE VBELN = GW_PO_NO_TAB
            AND   POSNR = GW_PO_LINE_NO_TAB.
          GI_BAPI_GM_ITEM-DELIV_NUMB = GW_PO_NO_TAB.
          GI_BAPI_GM_ITEM-DELIV_ITEM = GW_PO_LINE_NO_TAB.
          IF SY-SUBRC NE 0.
****Process the record to error report***
            GW_REC_ERROR         = 'X'.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'MARC'.
            GW_REJECT_REASON_TAB = TEXT-013.
            <GFS_RECL>-PROCESS_STATUS = 'M'.
            <GFS_RECL>-REASON = GW_REJECT_REASON_TAB.
            IF P_REPR = 'X'. "USPRADI JE3K906283 30.03.2022
              <GFS_RECL>-CHANGED_DATE = SY-DATUM.
              <GFS_RECL>-CHANGED_TIME = SY-UZEIT.
              <GFS_RECL>-CHANGED_BY = SY-UNAME.
            ENDIF. "USPRADI JE3K906283 30.03.2022
            PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
            CLEAR: GI_BAPI_GM_ITEM.
*            CONTINUE.
            GV_CONTINUE = 'X'.
            RETURN.
          ENDIF.
        ENDIF.
*****PO Number == OBD if LFART = NL OR NLCC
        IF GI_LIKP-LFART IN GR_LFART_OBD.
          SELECT SINGLE  VGBEL VGPOS FROM LIPS
          INTO (GI_BAPI_GM_ITEM-PO_NUMBER, GI_BAPI_GM_ITEM-PO_ITEM)
          WHERE VBELN = GW_PO_NO_TAB
          AND   POSNR = GW_PO_LINE_NO_TAB.
***  Get inbound delivery number
          SELECT
          VBELV
          POSNV
          VBELN
          POSNN
          VBTYP_N
          RFMNG
          VBTYP_V
          PLMIN
          BWART
          MJAHR
          INTO GI_VBFA
          FROM VBFA
          WHERE VBELV = GW_PO_NO_TAB
          AND   VBTYP_N = '7'
          ORDER BY PRIMARY KEY.
          ENDSELECT.
          SELECT SINGLE  VBELN POSNR FROM LIPS
          INTO (GI_BAPI_GM_ITEM-DELIV_NUMB, GI_BAPI_GM_ITEM-DELIV_ITEM)
          WHERE VBELN = GI_VBFA-VBELN
          AND   VGBEL = GI_BAPI_GM_ITEM-PO_NUMBER
          AND   VGPOS = GI_BAPI_GM_ITEM-PO_ITEM.
          IF SY-SUBRC NE 0.
****Process the record to error report***
            GW_REC_ERROR         = 'X'.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'MARC'.
            GW_REJECT_REASON_TAB = TEXT-013.
            <GFS_RECL>-PROCESS_STATUS = 'M'.
            <GFS_RECL>-REASON = GW_REJECT_REASON_TAB.
            IF P_REPR = 'X'. "USPRADI JE3K906283 30.03.2022
              <GFS_RECL>-CHANGED_DATE = SY-DATUM.
              <GFS_RECL>-CHANGED_TIME = SY-UZEIT.
              <GFS_RECL>-CHANGED_BY = SY-UNAME.
            ENDIF. "USPRADI JE3K906283 30.03.2022
            PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
            CLEAR: GI_BAPI_GM_ITEM.
*            CONTINUE.
            GV_CONTINUE = 'X'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF. " PO line initial
  ENDIF." Non Linked Surprise Receipts

*****Good Movement Code
*****Record Type is Surprise Receipts Non Linked
  IF GV_RECTYPE EQ 10 .
    GI_BAPI_GM_HEAD-REF_DOC_NO    =  PW_VENDOR. "VEND_ID
    CONCATENATE GW_PO_NO_TAB GW_PO_LINE_NO_TAB INTO GI_BAPI_GM_ITEM-ITEM_TEXT."Item Text
    GI_BAPI_GM_ITEM-MVT_IND       = ' '.  "Movement Indicator
    GW_VENDOR =  PW_VENDOR ."VEND_ID
*****Record Type is Surprise Receipts Linked
  ELSEIF ( GV_RECTYPE EQ 01 OR GV_RECTYPE EQ 02 OR GV_RECTYPE EQ 03 OR GV_RECTYPE EQ 05 ) AND GW_PO_LINE_NO_TAB IS INITIAL .
    GI_BAPI_GM_HEAD-REF_DOC_NO    =  PW_VENDOR ."VEND_ID
    CONCATENATE GW_PO_NO_TAB GW_PO_LINE_NO_TAB INTO GI_BAPI_GM_ITEM-ITEM_TEXT."Item Text
    GI_BAPI_GM_ITEM-MVT_IND       = ' '.  "Movement Indicator
    GW_VENDOR =  PW_VENDOR ."VEND_ID
***Record Type is Customer Returns
  ELSEIF GV_RECTYPE EQ 04.
    GI_BAPI_GM_HEAD-REF_DOC_NO    =  PW_VENDOR ."VEND_ID
    CONCATENATE GW_PO_NO_TAB GW_PO_LINE_NO_TAB INTO GI_BAPI_GM_ITEM-ITEM_TEXT."Item Text
    GI_BAPI_GM_ITEM-MVT_IND       = ' '.  "Movement Indicator
  ELSE.
    GI_BAPI_GM_HEAD-REF_DOC_NO    = LW_REF_DOC_NO. "PO_NO
    GW_VENDOR =  PW_VENDOR ."VEND_ID
    CONCATENATE GI_BAPI_GM_ITEM-DELIV_NUMB GI_BAPI_GM_ITEM-DELIV_ITEM INTO GI_BAPI_GM_ITEM-ITEM_TEXT."Item Text
    GI_BAPI_GM_ITEM-MVT_IND       = 'B'.  "Movement Indicator
  ENDIF.

  APPEND GI_BAPI_GM_ITEM TO GT_BAPI_GM_ITEM.


ENDFORM.                    " FILL_BAPI
*&---------------------------------------------------------------------*
*&      Form  GR_STEPS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GR_STEPS .
  REFRESH: GT_MARC_OVG_ITEM,GT_MARC_SUP_ITEM,GT_MARC_SPLIT_ITEM.
  SORT GT_MARC_GR_ITEM BY TRAN_NO
                          TRAN_SEQ_NO
                          SEQ_NO
                          DATA_TYPE
                          COMP_CODE
                          PO_NO
                          PO_LINE_NO
                          BAPI_UNLOAD_PT.
  GT_MARC_OVG_ITEM[] = GT_MARC_GR_ITEM[].
*  gt_marc_split_item[] = gt_marc_gr_item[].
  SORT GT_MARC_OVG_ITEM BY  TRAN_NO
                            TRAN_SEQ_NO
                            SEQ_NO
                            DATA_TYPE
                            COMP_CODE
                            PO_NO
                            PO_LINE_NO
                            BAPI_UNLOAD_PT.
  DELETE GT_MARC_OVG_ITEM WHERE BAPI_PO_LINE_NO IS INITIAL OR REC_TYPE EQ 10 OR REC_TYPE EQ 04.

  CLEAR: GI_MARC_GR_ITEM.
  LOOP AT GT_MARC_GR_ITEM INTO GI_MARC_GR_ITEM.
    CLEAR GI_MARC_OVG_ITEM.
    READ TABLE GT_MARC_OVG_ITEM INTO GI_MARC_OVG_ITEM WITH KEY  TRAN_NO      = GI_MARC_GR_ITEM-TRAN_NO
                                                                TRAN_SEQ_NO  = GI_MARC_GR_ITEM-TRAN_SEQ_NO
                                                                SEQ_NO       = GI_MARC_GR_ITEM-SEQ_NO
                                                                DATA_TYPE    = GI_MARC_GR_ITEM-DATA_TYPE
                                                                COMP_CODE    = GI_MARC_GR_ITEM-COMP_CODE
                                                                PO_NO        = GI_MARC_GR_ITEM-PO_NO
                                                                PO_LINE_NO   = GI_MARC_GR_ITEM-PO_LINE_NO
                                                                BAPI_UNLOAD_PT = GI_MARC_GR_ITEM-BAPI_UNLOAD_PT
                                                                BINARY SEARCH.
****Fetching Surprise Receipts Linked & Non Linked
    IF SY-SUBRC NE 0 AND GI_MARC_GR_ITEM-REC_TYPE NE 04.
      MOVE-CORRESPONDING GI_MARC_GR_ITEM TO GI_MARC_SUP_ITEM.
      APPEND GI_MARC_SUP_ITEM TO GT_MARC_SUP_ITEM.
      CLEAR: GI_MARC_SUP_ITEM.
    ENDIF.
***Fetching Customer Returns
*    IF p_delta = 'X'.
    IF SY-SUBRC NE 0 AND GI_MARC_GR_ITEM-REC_TYPE EQ 04.
      MOVE-CORRESPONDING GI_MARC_GR_ITEM TO GI_MARC_SPLIT_ITEM.
      APPEND GI_MARC_SPLIT_ITEM TO GT_MARC_SPLIT_ITEM.
      CLEAR: GI_MARC_SPLIT_ITEM.
    ENDIF.
*    ENDIF.
  ENDLOOP.
  IF P_REPR = 'X'.
    SELECT * FROM ZTMM_MARC_GR_CUS INTO TABLE GT_MARC_SPLIT_ITEM1
      FOR ALL ENTRIES IN GT_MARC_GR_ITEM
      WHERE TRAN_SEQ_NO = GT_MARC_GR_ITEM-TRAN_SEQ_NO
        AND PO_NO       = GT_MARC_GR_ITEM-PO_NO
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
        AND PO_LINE_NO  = GT_MARC_GR_ITEM-PO_LINE_NO
        AND BAPI_UNLOAD_PT = GT_MARC_GR_ITEM-BAPI_UNLOAD_PT
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
        AND PROCESS_STATUS = 'F'
        AND LP    = GT_MARC_GR_ITEM-LP
        AND CART_LP = GT_MARC_GR_ITEM-CART_LP.
    IF SY-SUBRC IS INITIAL.

    ENDIF.
  ENDIF.
** For Customer returns data is in  gt_marc_split_item
** For Surprise receipts data is in gt_marc_sup_item
** For the rest data is in gt_marc_ovg_item
  CASE GV_RECTYPE.
    WHEN '01'. " Mfg to DC
      PERFORM GR_01.
      REFRESH: GT_MARC_OVG_ITEM,
               GT_MARC_SPLIT_ITEM.
    WHEN '02'. " DC to DC
      PERFORM GR_02.
      REFRESH: GT_MARC_OVG_ITEM,
               GT_MARC_SPLIT_ITEM.
    WHEN '04'." Customer Returns
      PERFORM GR_04.
      REFRESH GT_MARC_SPLIT_ITEM.
    WHEN '05'. " Resale to DC
      PERFORM GR_05.
      REFRESH: GT_MARC_OVG_ITEM,
               GT_MARC_SPLIT_ITEM.
    WHEN '10'. " Surprise
      PERFORM GR_10.
      REFRESH GT_MARC_SPLIT_ITEM.
  ENDCASE.
ENDFORM.                    " GR_STEPS
*&---------------------------------------------------------------------*
*&      Form  GR_01
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GR_01 .
** Since Linked surprises may occur in any scenario
  PERFORM GR_10.

  CLEAR: GI_BAPI_GM_HEAD,GI_BAPI_GM_CODE,GI_BAPI_GM_ITEM,
         GI_BAPI_GM_HEAD_SH,GI_BAPI_GM_CODE_SH,GI_BAPI_GM_ITEM_SH.
  REFRESH: GT_BAPI_GM_ITEM,GT_BAPI_GM_ITEM_SH.
**Sorting based on delivery & line
  SORT GT_MARC_OVG_ITEM BY BAPI_PO_NO BAPI_PO_LINE_NO.
***  Segregate unique line items
  CLEAR: GI_MARC_OVG_ITEM,GW_LINE_COUNT,GW_PRE_LINE_NO.
  LOOP AT GT_MARC_OVG_ITEM INTO GI_MARC_OVG_ITEM.
    IF GW_PRE_LINE_NO EQ GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO OR GI_MARC_OVG_ITEM-BAPI_BATCH IS NOT INITIAL.
      GW_LINE_COUNT = GW_LINE_COUNT + 1.
      IF GW_LINE_COUNT GE 1.
        EXIT.
      ENDIF.
    ENDIF.
    GW_PRE_LINE_NO = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
  ENDLOOP.


  IF GW_LINE_COUNT GE 1.
    LOOP AT GT_MARC_OVG_ITEM INTO GI_MARC_OVG_ITEM.
      CLEAR: GI_BAPI_GM_HEAD,GI_BAPI_GM_CODE,GI_BAPI_GM_ITEM,
             GI_BAPI_GM_HEAD_SH,GI_BAPI_GM_CODE_SH,GI_BAPI_GM_ITEM_SH,
             GV_FSTEP, GV_PROCESS_STATUS.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      CLEAR: GV_TEMP_ABLAD, GV_RECL_SEQ.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      REFRESH: GT_BAPI_GM_ITEM,GT_BAPI_GM_ITEM_SH.
** Populate variables for RECL table update
      GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
      GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
      GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
      GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      SPLIT GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT AT '-' INTO GV_TEMP_ABLAD GV_RECL_SEQ.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
**incase of error reprocessing, get the fail step number
      IF P_REPR = 'X'.
        READ TABLE GT_GR_RECL INTO GI_GR_RECL WITH KEY PO_NO = GI_MARC_OVG_ITEM-PO_NO
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
                                                       RECH_SEQ = GV_RECH_SEQ
                                                       RECL_SEQ = GV_RECL_SEQ
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
                                                       PO_LINE_NO = GI_MARC_OVG_ITEM-PO_LINE_NO
                                                       LP = GI_MARC_OVG_ITEM-LP
                                                       CART_LP = GI_MARC_OVG_ITEM-CART_LP.
        IF SY-SUBRC IS INITIAL.
          GV_FSTEP = GI_GR_RECL-FAIL_STEP.
          GV_PROCESS_STATUS = GI_GR_RECL-PROCESS_STATUS.
        ENDIF.
      ENDIF.
      IF GI_MARC_OVG_ITEM-BAPI_BATCH IS NOT INITIAL.  "For Batch managed materials
        IF P_REPR = 'X'.
*For any step failed less than or equal to 30, execute from step 10
          GW_FAIL_STEP = '30'.
          IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP.
            PERFORM PROCESS_BATCH_REMOVE. "Step 10 and 20
          ENDIF.
        ELSE.
****Remove Batch & Batch Split from Inbound Delivery
          PERFORM PROCESS_BATCH_REMOVE. "Step 10 and 20
        ENDIF.
      ELSE.
        IF P_REPR = 'X'.
          GW_FAIL_STEP = '30'.
          IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP.
            PERFORM CALC_OPEN_QTY.
          ENDIF.
        ELSE.
**** Calculate Open Quantity
          PERFORM CALC_OPEN_QTY.
        ENDIF.

      ENDIF.

      IF P_REPR = 'X'. "error reprocessing
** If it fails in any step other than 40, all steps have to be executed
        GW_FAIL_STEP = '30'.
        IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP.
          PERFORM POST_BAPI. "Step 30 and 40
        ENDIF.
** Only if it fails in overage posting perform this step.
        GW_FAIL_STEP = '40'.
        IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP = GW_FAIL_STEP.
** Fill internal table for overage posting
          PERFORM FILL_OVERAGE.
          PERFORM POST_BAPI_SH. "Step 40
        ENDIF.
      ELSE.
****Post BAPI
        PERFORM POST_BAPI. "Step 30 and 40
      ENDIF.
    ENDLOOP.
  ELSE.
    CLEAR: GI_BAPI_GM_HEAD,GI_BAPI_GM_CODE,GI_BAPI_GM_ITEM,
           GI_BAPI_GM_HEAD_SH,GI_BAPI_GM_CODE_SH,GI_BAPI_GM_ITEM_SH.
    REFRESH: GT_BAPI_GM_ITEM,GT_BAPI_GM_ITEM_SH.
    LOOP AT GT_MARC_OVG_ITEM INTO GI_MARC_OVG_ITEM.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      CLEAR: GV_TEMP_ABLAD, GV_RECL_SEQ.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
** Populate variables for RECL table update
      GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
      GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
      GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
      GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      SPLIT GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT AT '-' INTO GV_TEMP_ABLAD GV_RECL_SEQ.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
**incase of error reprocessing, get the fail step number
      IF P_REPR = 'X'.
        READ TABLE GT_GR_RECL INTO GI_GR_RECL WITH KEY PO_NO = GI_MARC_OVG_ITEM-PO_NO
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
                                                       RECH_SEQ = GV_RECH_SEQ
                                                       RECL_SEQ = GV_RECL_SEQ
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
                                                       PO_LINE_NO = GI_MARC_OVG_ITEM-PO_LINE_NO
                                                       LP = GI_MARC_OVG_ITEM-LP
                                                       CART_LP = GI_MARC_OVG_ITEM-CART_LP.
        IF SY-SUBRC IS INITIAL.
          GV_FSTEP = GI_GR_RECL-FAIL_STEP.
          GV_PROCESS_STATUS = GI_GR_RECL-PROCESS_STATUS.
        ENDIF.
      ENDIF.
**** Calculate Open Quantity
      IF P_REPR = 'X'.
        GW_FAIL_STEP = '30'.
        IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP.
          PERFORM CALC_OPEN_QTY.
        ENDIF.
      ELSE.
        PERFORM CALC_OPEN_QTY.
      ENDIF.
      AT LAST.
        IF P_REPR = 'X'.
          GW_FAIL_STEP = '30'.
          IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP.
** Post_bapi includes both step 30 and 40 . Hence if fail step is less than 40,
** perform post_bapi will do both step 30 and 40
            PERFORM POST_BAPI. "Step 30 and 40
          ENDIF.
          GW_FAIL_STEP = '40'.
          IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP = GW_FAIL_STEP.
            PERFORM POST_BAPI_SH." Step 40
          ENDIF.
        ELSE.
****Post BAPI
          PERFORM POST_BAPI.
        ENDIF.
      ENDAT.
    ENDLOOP.
  ENDIF.

  CLEAR:GW_LINE_COUNT,GW_PRE_LINE_NO.
ENDFORM.                    " GR_01
*&---------------------------------------------------------------------*
*&      Form  GR_02
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GR_02 .
** Since Linked surprises may occur in any scenario
  PERFORM GR_10.

  CLEAR: GI_BAPI_GM_HEAD,GI_BAPI_GM_CODE,GI_BAPI_GM_ITEM,
         GI_BAPI_GM_HEAD_SH,GI_BAPI_GM_CODE_SH,GI_BAPI_GM_ITEM_SH.
  REFRESH: GT_BAPI_GM_ITEM,GT_BAPI_GM_ITEM_SH.
**Sorting based on delivery & line
  SORT GT_MARC_OVG_ITEM BY BAPI_PO_NO BAPI_PO_LINE_NO.
***  Segregate unique line items
  CLEAR: GI_MARC_OVG_ITEM,GW_LINE_COUNT,GW_PRE_LINE_NO.
  LOOP AT GT_MARC_OVG_ITEM INTO GI_MARC_OVG_ITEM.
    IF GW_PRE_LINE_NO EQ GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO OR GI_MARC_OVG_ITEM-BAPI_BATCH IS NOT INITIAL.
      GW_LINE_COUNT = GW_LINE_COUNT + 1.
      IF GW_LINE_COUNT GE 1.
        EXIT.
      ENDIF.
    ENDIF.
    GW_PRE_LINE_NO = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
  ENDLOOP.


  IF GW_LINE_COUNT GE 1.
    LOOP AT GT_MARC_OVG_ITEM INTO GI_MARC_OVG_ITEM.
      CLEAR: GI_BAPI_GM_HEAD,GI_BAPI_GM_CODE,GI_BAPI_GM_ITEM,
             GI_BAPI_GM_HEAD_SH,GI_BAPI_GM_CODE_SH,GI_BAPI_GM_ITEM_SH,
             GV_FSTEP, GV_PROCESS_STATUS.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      CLEAR: GV_TEMP_ABLAD, GV_RECL_SEQ.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      REFRESH: GT_BAPI_GM_ITEM,GT_BAPI_GM_ITEM_SH.
** Populate variables for RECL table update
      GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
      GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
      GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
      GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      SPLIT GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT AT '-' INTO GV_TEMP_ABLAD GV_RECL_SEQ.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
**incase of error reprocessing, get the fail step number
      IF P_REPR = 'X'.
        READ TABLE GT_GR_RECL INTO GI_GR_RECL WITH KEY PO_NO = GI_MARC_OVG_ITEM-PO_NO
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
                                                       RECH_SEQ = GV_RECH_SEQ
                                                       RECL_SEQ = GV_RECL_SEQ
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
                                                       PO_LINE_NO = GI_MARC_OVG_ITEM-PO_LINE_NO
                                                       LP = GI_MARC_OVG_ITEM-LP
                                                       CART_LP = GI_MARC_OVG_ITEM-CART_LP.
        IF SY-SUBRC IS INITIAL.
          GV_FSTEP = GI_GR_RECL-FAIL_STEP.
          GV_PROCESS_STATUS = GI_GR_RECL-PROCESS_STATUS.
        ENDIF.
      ENDIF.
      IF GI_MARC_OVG_ITEM-BAPI_BATCH IS NOT INITIAL.  "For Batch managed materials
        IF P_REPR = 'X'.
*For any step failed less than or equal to 30, execute from step 10
          GW_FAIL_STEP = '30'.
          IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP.
            PERFORM PROCESS_BATCH_REMOVE. "Step 10 and 20
          ENDIF.
        ELSE.
****Remove Batch & Batch Split from Inbound Delivery
          PERFORM PROCESS_BATCH_REMOVE. "Step 10 and 20
        ENDIF.
      ELSE.
        IF P_REPR = 'X'.
          GW_FAIL_STEP = '30'.
          IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP.
            PERFORM CALC_OPEN_QTY.
          ENDIF.
        ELSE.
**** Calculate Open Quantity
          PERFORM CALC_OPEN_QTY.
        ENDIF.

      ENDIF.

      IF P_REPR = 'X'. "error reprocessing
** If it fails in any step other than 40, all steps have to be executed
        GW_FAIL_STEP = '30'.
        IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP.
          PERFORM POST_BAPI. "Step 30 and 40
        ENDIF.
** Only if it fails in overage posting perform this step.
        GW_FAIL_STEP = '40'.
        IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP = GW_FAIL_STEP.
** Fill internal table for overage posting
          PERFORM FILL_OVERAGE.
          PERFORM POST_BAPI_SH. "Step 40
        ENDIF.
      ELSE.
****Post BAPI
        PERFORM POST_BAPI. "Step 30 and 40
      ENDIF.
    ENDLOOP.
  ELSE.
    CLEAR: GI_BAPI_GM_HEAD,GI_BAPI_GM_CODE,GI_BAPI_GM_ITEM,
           GI_BAPI_GM_HEAD_SH,GI_BAPI_GM_CODE_SH,GI_BAPI_GM_ITEM_SH.
    REFRESH: GT_BAPI_GM_ITEM,GT_BAPI_GM_ITEM_SH.
    LOOP AT GT_MARC_OVG_ITEM INTO GI_MARC_OVG_ITEM.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      CLEAR: GV_TEMP_ABLAD, GV_RECL_SEQ.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
** Populate variables for RECL table update
      GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
      GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
      GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
      GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      SPLIT GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT AT '-' INTO GV_TEMP_ABLAD GV_RECL_SEQ.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
**incase of error reprocessing, get the fail step number
      IF P_REPR = 'X'.
        READ TABLE GT_GR_RECL INTO GI_GR_RECL WITH KEY PO_NO = GI_MARC_OVG_ITEM-PO_NO
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
                                                       RECH_SEQ = GV_RECH_SEQ
                                                       RECL_SEQ = GV_RECL_SEQ
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
                                                       PO_LINE_NO = GI_MARC_OVG_ITEM-PO_LINE_NO
                                                       LP = GI_MARC_OVG_ITEM-LP
                                                       CART_LP = GI_MARC_OVG_ITEM-CART_LP.
        IF SY-SUBRC IS INITIAL.
          GV_FSTEP = GI_GR_RECL-FAIL_STEP.
          GV_PROCESS_STATUS = GI_GR_RECL-PROCESS_STATUS.
        ENDIF.
      ENDIF.
**** Calculate Open Quantity
      IF P_REPR = 'X'.
        GW_FAIL_STEP = '30'.
        IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP.
          PERFORM CALC_OPEN_QTY.
        ENDIF.
      ELSE.
        PERFORM CALC_OPEN_QTY.
      ENDIF.
      AT LAST.
        IF P_REPR = 'X'.
          GW_FAIL_STEP = '30'.
          IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP.
** Post_bapi includes both step 30 and 40 . Hence if fail step is less than 40,
** perform post_bapi will do both step 30 and 40
            PERFORM POST_BAPI. "Step 30 and 40
          ENDIF.
          GW_FAIL_STEP = '40'.
          IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP = GW_FAIL_STEP.
            PERFORM POST_BAPI_SH." Step 40
          ENDIF.
        ELSE.
****Post BAPI
          PERFORM POST_BAPI.
        ENDIF.
      ENDAT.
    ENDLOOP.
  ENDIF.

  CLEAR:GW_LINE_COUNT,GW_PRE_LINE_NO.
ENDFORM.                    " GR_02
*&---------------------------------------------------------------------*
*&      Form  GR_04
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GR_04 .
  DATA: LW_SPLIT TYPE I,
        LW_LIPS  TYPE I,
        LW_LIFMG TYPE CHAR9.
  DATA: LT_BAPI_GM_ITEM TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.
  DATA: LW_MBLNR TYPE CHAR10.
  FIELD-SYMBOLS: <FS_MARC_SPLIT_ITEM> TYPE ZTMM_MARC_GR_CUS.
** Begin of changes by USPRADI JE3K904585 on 24.02.2022
** Flag indicating customer returns scenario
  GW_CUST_RET = 'X'.
** End of changes by USPRADI JE3K904585 on 24.02.2022
****  Modify ZTMM_MARC_GR_CUS in delta run
  IF P_DELTA = 'X'.
    SORT GT_MARC_SPLIT_ITEM BY  TRAN_NO
                              TRAN_SEQ_NO
                              SEQ_NO
                              DATA_TYPE
                              COMP_CODE
                              PO_NO
                              PO_LINE_NO
                              BAPI_UNLOAD_PT.
    IF GT_MARC_SPLIT_ITEM IS NOT INITIAL.
      CLEAR: GW_SEQ_NO_CUS.
      REFRESH: GT_ZTMM_MARC_GR_CUS.
***Update ZTMM_MARC_GR_CUS table with the file data
      LOOP AT GT_MARC_SPLIT_ITEM ASSIGNING <FS_MARC_SPLIT_ITEM>."INTO gi_marc_split_item.
        MOVE-CORRESPONDING <FS_MARC_SPLIT_ITEM> TO GI_ZTMM_MARC_GR_CUS.
        GW_SEQ_NO_CUS = GW_SEQ_NO_CUS + 1.
        GI_ZTMM_MARC_GR_CUS-SEQ_NO = GW_SEQ_NO_CUS.
        <FS_MARC_SPLIT_ITEM>-SEQ_NO = GW_SEQ_NO_CUS.
        APPEND GI_ZTMM_MARC_GR_CUS TO GT_ZTMM_MARC_GR_CUS.
        CLEAR: GI_MARC_SPLIT_ITEM.
      ENDLOOP.
      IF GT_ZTMM_MARC_GR_CUS IS NOT INITIAL.
        MODIFY ZTMM_MARC_GR_CUS FROM TABLE GT_ZTMM_MARC_GR_CUS.
      ENDIF.
    ENDIF.
  ENDIF.
  LOOP AT GT_MARC_SPLIT_ITEM INTO GI_MARC_SPLIT_ITEM.
    CLEAR:  GI_SPLIT_ITEMDATA , GI_SPLIT_RETURN ,  GI_VBKOK_WA  , GI_VBPOK_TAB ,
    GI_PGI_HEADER_DATA,GI_PGI_HEADER_CONTROL , GI_PGI_DELIVERY , GI_PGI_RETURN ,
    GI_INSP_DATA , GI_LONGTEXT   , GI_INSP_RETURN ,   GI_OBD_HEADER_DATA ,
    GI_OBD_HEADER_CONTROL , GW_OBD_DELIVERY ,GI_OBD_ITEM_DATA , GI_OBD_ITEM_CONTROL ,
    GI_OBD_RETURN ,    GI_DEL_HEADER_DATA ,GI_DEL_HEADER_CONTROL , GW_DEL_DELIVERY ,
    GI_DEL_ITEM_DATA , GI_DEL_ITEM_CONTROL , GI_DEL_RETURN ,
    GI_BATCH_HEADER_DATA ,GI_BATCH_HEADER_CONTROL , GW_BATCH_DELIVERY ,
    GI_BATCH_ITEM_DATA , GI_BATCH_ITEM_CONTROL , GI_BATCH_RETURN ,
    GI_BAPI_GM_HEAD_CUS ,GI_BAPI_GM_CODE_CUS , GW_TESTRUN_CUS      ,
    GI_BAPI_GM_ITEM_CUS , GI_BAPI_RETURN_CUS  , GI_VBUK, GW_OLD_DELI ,GW_NEW_DELI ,
    GW_OBD_MAIN_QTY  , GW_OBD_CHILD_QTY , GW_OBD_FULL_QTY  , GW_OBD_LINE_QTY   ,
    GW_CUS_RET_ERROR ,GW_OBD_FLAG ,GW_SPLIT_FLAG ,GW_PICK_FLAG ,GW_PGI_FLAG  ,
    GW_INSP_FLAG ,GW_GOODS_FLAG ,GW_DELETE_FLAG, GW_BATCH_FLAG, GW_PROCESS_STATUS ,GW_FAIL_STEP ,
    GW_FAIL_STEP_DESC , GW_REASON ,GW_STATUS ,GW_SPLIT_DEL_NO  ,
    GW_SPLIT_DEL_LINE_NO , GW_SPLIT_DEL_QTY  ,GW_INSP_NO ,GW_PGI_GR_NO ,
    GW_PGI_GR_YEAR ,GW_PGI_GR_LINE_NO  ,GW_PGI_GR_QTY   , GW_NEW_DELI,
    GW_GR_NO,GW_GR_YEAR,GW_GR_LINE_NO  , GW_GR_QTY_CUS ,GW_GR_MOVE_TYPE,GW_INSP_CODE ,
    GW_FOLLOWUP_ACT, GI_VBFA_PGI.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
    CLEAR: GV_TEMP_ABLAD, GV_RECL_SEQ.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
    REFRESH: GT_SPLIT_ITEMDATA ,GT_SPLIT_RETURN , GT_VBPOK_TAB , GT_PGI_RETURN,  GT_INSP_DATA  ,
              GT_INSP_RETURN ,   GT_OBD_ITEM_DATA ,   GT_OBD_ITEM_CONTROL , GT_OBD_RETURN ,
              GT_DEL_ITEM_DATA ,   GT_DEL_ITEM_CONTROL , GT_DEL_RETURN ,
              GT_BATCH_ITEM_DATA ,   GT_BATCH_ITEM_CONTROL , GT_BATCH_RETURN ,
              GT_BAPI_GM_ITEM_CUS , GT_BAPI_RETURN_CUS.
    IF P_REPR = 'X'.
      READ TABLE GT_MARC_SPLIT_ITEM1 INTO GI_MARC_SPLIT_ITEM1 WITH KEY TRAN_NO = GI_MARC_SPLIT_ITEM-TRAN_NO
                                                                       TRAN_SEQ_NO = GI_MARC_SPLIT_ITEM-TRAN_SEQ_NO
*                                                                       seq_no = gi_marc_split_item-seq_no
                                                                       DATA_TYPE = GI_MARC_SPLIT_ITEM-DATA_TYPE
                                                                       COMP_CODE = GI_MARC_SPLIT_ITEM-COMP_CODE
                                                                       PO_NO = GI_MARC_SPLIT_ITEM-PO_NO
                                                                       PO_LINE_NO = GI_MARC_SPLIT_ITEM-PO_LINE_NO
                                                                       BAPI_UNLOAD_PT = GI_MARC_SPLIT_ITEM-BAPI_UNLOAD_PT.
      IF SY-SUBRC IS INITIAL.
** Incase of error reporcessing get the data from CUS table based on the data selected for reprocessing
        GI_MARC_SPLIT_ITEM = GI_MARC_SPLIT_ITEM1.
        CLEAR GI_MARC_SPLIT_ITEM1.
** Begin of changes by USPRADI JE3K905507 on 03.03.2021
** Fill the variables with CUS table data
        GW_SPLIT_DEL_NO         =   GI_MARC_SPLIT_ITEM-SPLIT_DEL_NO.
        GW_SPLIT_DEL_LINE_NO    =   GI_MARC_SPLIT_ITEM-SPLIT_DEL_LINE_NO.
        GW_SPLIT_DEL_QTY        =   GI_MARC_SPLIT_ITEM-SPLIT_DEL_QTY.
        GW_PGI_GR_NO       =  GI_MARC_SPLIT_ITEM-PGI_GR_NO.
        GW_PGI_GR_LINE_NO  =  GI_MARC_SPLIT_ITEM-PGI_GR_LINE_NO.
        GW_PGI_GR_QTY      =  GI_MARC_SPLIT_ITEM-PGI_GR_QTY.
        GW_PGI_GR_YEAR     =  GI_MARC_SPLIT_ITEM-PGI_GR_YEAR.
        GW_PGI_MOVE_TYPE   =  GI_MARC_SPLIT_ITEM-PGI_MOVE_TYPE.
        GW_INSP_NO = GI_MARC_SPLIT_ITEM-INSP_NO.
        GW_GR_NO       =   GI_MARC_SPLIT_ITEM-GR_NO.
        GW_GR_YEAR     =   GI_MARC_SPLIT_ITEM-GR_YEAR.
        GW_GR_LINE_NO  =  GI_MARC_SPLIT_ITEM-GR_LINE_NO.
        GW_GR_QTY_CUS  =   GI_MARC_SPLIT_ITEM-GR_QTY.
        GW_GR_MOVE_TYPE  =   GI_MARC_SPLIT_ITEM-GR_MOVE_TYPE.
** End of changes by USPRADI JE3K905507 on 03.03.2021
      ENDIF.
    ENDIF.
****Data to update Tables
    GW_TRAN_NO_TAB       = GI_MARC_SPLIT_ITEM-TRAN_NO.
    GW_TRANS_SEQ_NO_TAB  = GI_MARC_SPLIT_ITEM-TRAN_SEQ_NO.
    GW_DATA_TYPE_TAB     = GI_MARC_SPLIT_ITEM-DATA_TYPE.
    GW_COMP_CODE_TAB     = GI_MARC_SPLIT_ITEM-COMP_CODE.
    GW_PO_NO_TAB         = GI_MARC_SPLIT_ITEM-PO_NO.
    GW_PO_LINE_NO_TAB    = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
    GW_SKU_TAB           = GI_MARC_SPLIT_ITEM-SKU.
    GW_QTY_EXPE_TAB      = GI_MARC_SPLIT_ITEM-QTY_EXPE.
    GW_QTY_EXPE          = GI_MARC_SPLIT_ITEM-QTY_EXPE.
    GW_LP_TAB            = GI_MARC_SPLIT_ITEM-LP.
    GW_CART_LP_TAB       = GI_MARC_SPLIT_ITEM-CART_LP.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
    SPLIT GI_MARC_SPLIT_ITEM-BAPI_UNLOAD_PT AT '-' INTO GV_TEMP_ABLAD GV_RECL_SEQ.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
**incase of error reprocessing, get the fail step number
    IF P_REPR = 'X'.
      READ TABLE GT_GR_RECL INTO GI_GR_RECL WITH KEY PO_NO = GI_MARC_SPLIT_ITEM-PO_NO
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
                                                     RECH_SEQ = GV_RECH_SEQ
                                                     RECL_SEQ = GV_RECL_SEQ
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
                                                     PO_LINE_NO = GI_MARC_SPLIT_ITEM-PO_LINE_NO
                                                     LP = GI_MARC_SPLIT_ITEM-LP
                                                     CART_LP = GI_MARC_SPLIT_ITEM-CART_LP.
      IF SY-SUBRC IS INITIAL.
        GV_FSTEP = GI_GR_RECL-FAIL_STEP.
        GV_PROCESS_STATUS = GI_GR_RECL-PROCESS_STATUS.
      ENDIF.
    ENDIF.
** Begin of changes by USPRADI JE3K905848 on 15.03.2022
    IF P_REPR = 'X' AND GI_MARC_SPLIT_ITEM-SPLIT_DEL_NO IS NOT INITIAL.
      GV_DEL = GI_MARC_SPLIT_ITEM-SPLIT_DEL_NO.
      GV_POSNR = GI_MARC_SPLIT_ITEM-SPLIT_DEL_LINE_NO.
    ELSE.
      GV_DEL = GI_MARC_SPLIT_ITEM-PO_NO.
      GV_POSNR = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
    ENDIF.
** End of changes by USPRADI JE3K905848 on 15.03.2022
***Get LIPS Data
    SELECT
        VBELN
        POSNR
        MATNR
        WERKS
        LGORT
        CHARG
        LFIMG
        MEINS
        VRKME
        UMVKZ
        UMVKN
        VGBEL
        VGPOS
        XCHPF
        UMREF
        UECHA
        INSMK
        ORMNG
      INTO TABLE GT_LIPS1
      FROM LIPS
** Begin of changes by USPRADI JE3K905848 on 15.03.2022
*      WHERE vbeln = gi_marc_split_item-po_no.
      WHERE VBELN = GV_DEL.
** End of changes by USPRADI JE3K905848 on 15.03.2022
    IF SY-SUBRC = 0.
      DESCRIBE TABLE GT_LIPS1 LINES LW_LIPS.
      DESCRIBE TABLE GT_MARC_SPLIT_ITEM LINES LW_SPLIT.
    ELSE.
****Process the record to error report***
      GW_REC_ERROR         = 'X'.
      GW_INPUT_STATUS_TAB  = 'E'.
      GW_ERROR_TYPE_TAB    = 'MARC'.
      GW_REJECT_REASON_TAB = TEXT-049.

      GW_PROCESS_STATUS = 'F'.
      GW_REASON         = TEXT-049.
      GW_STATUS         = TEXT-050.
** Update RECH and RECL tables with error status, fail step and error message
      GV_STATUS = 'M'.
      GW_MESSAGE = GW_REJECT_REASON_TAB.
      CLEAR: GV_STEP, GV_STEP_DESCR, GW_MSG_ID, GW_MSG_NO.
      PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                          LT_BAPI_GM_ITEM.
      PERFORM SPLIT_DEL_TABLE_UPDATE.
      PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.

      EXIT.
    ENDIF.

*****IF Deliver & File contains single line item & quantity matches
*****Picking & PGI & Inspection on Main Delivery
    IF  LW_LIPS = 1 AND LW_SPLIT = 1.
      CLEAR: GI_LIPS1.
** Begin of changes by USPRADI JE3K905848 on 15.03.2022
*      READ TABLE gt_lips1 INTO gi_lips1  WITH KEY vbeln = gi_marc_split_item-po_no
*                                                  posnr = gi_marc_split_item-po_line_no.
      READ TABLE GT_LIPS1 INTO GI_LIPS1  WITH KEY VBELN = GV_DEL
                                                  POSNR = GV_POSNR.
** End of changes by USPRADI JE3K905848 on 15.03.2022
      IF SY-SUBRC = 0.
        IF GI_LIPS1-LFIMG = GI_MARC_SPLIT_ITEM-QTY_EXPE.
*****Picking & PGI & Inspection on Main Delivery
          PERFORM CUS_RET_MAIN_DEL.
        ELSE.
****Split Main Delivery by line item
          PERFORM CUS_RET_SPLIT_DEL.
        ENDIF.
      ELSE.
****Process the record to error report***
        GW_REC_ERROR         = 'X'.
        GW_INPUT_STATUS_TAB  = 'E'.
        GW_ERROR_TYPE_TAB    = 'MARC'.
        GW_REJECT_REASON_TAB = TEXT-051.

        GW_PROCESS_STATUS = 'F'.
        GW_REASON         = TEXT-051.
        GW_STATUS         = TEXT-050.
** Update RECH and RECL tables with error status, fail step and error message
        GV_STATUS = 'M'.
        GW_MESSAGE = GW_REJECT_REASON_TAB.
        CLEAR: GV_STEP, GV_STEP_DESCR, GW_MSG_ID, GW_MSG_NO.
        PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                            LT_BAPI_GM_ITEM.
        PERFORM SPLIT_DEL_TABLE_UPDATE.
        PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        EXIT.
      ENDIF.
    ELSE.
      CLEAR: GI_LIPS1.
** Begin of changes by USPRADI JE3K905848 on 15.03.2022
*      READ TABLE gt_lips1 INTO gi_lips1  WITH KEY vbeln = gi_marc_split_item-po_no
*                                                  posnr = gi_marc_split_item-po_line_no.
      READ TABLE GT_LIPS1 INTO GI_LIPS1  WITH KEY VBELN = GV_DEL
                                                  POSNR = GV_POSNR.
** End of changes by USPRADI JE3K905848 on 15.03.2022
      IF SY-SUBRC = 0.
****Split Main Delivery by line item
        PERFORM CUS_RET_SPLIT_DEL.
      ELSE.
****Process the record to error report***
        GW_REC_ERROR         = 'X'.
        GW_INPUT_STATUS_TAB  = 'E'.
        GW_ERROR_TYPE_TAB    = 'MARC'.
        GW_REJECT_REASON_TAB = TEXT-051.

        GW_PROCESS_STATUS = 'F'.
        GW_REASON         = TEXT-051.
        GW_STATUS         = TEXT-050.
** Update RECH and RECL tables with error status, fail step and error message
        GV_STATUS = 'M'.
        GW_MESSAGE = GW_REJECT_REASON_TAB.
        CLEAR: GV_STEP, GV_STEP_DESCR, GW_MSG_ID, GW_MSG_NO.
        PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                            LT_BAPI_GM_ITEM.
        PERFORM SPLIT_DEL_TABLE_UPDATE.
        PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        EXIT.
      ENDIF.
    ENDIF.
  ENDLOOP.
** Begin of changes by USPRADI JE3K904585 on 24.02.2022
  CLEAR GW_CUST_RET.
** End of changes by USPRADI JE3K904585 on 24.02.2022
ENDFORM.                    " GR_04
*&---------------------------------------------------------------------*
*&      Form  GR_05
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GR_05 .
** Since Linked surprises may occur in any scenario
  PERFORM GR_10.

  CLEAR: GI_BAPI_GM_HEAD,GI_BAPI_GM_CODE,GI_BAPI_GM_ITEM,
         GI_BAPI_GM_HEAD_SH,GI_BAPI_GM_CODE_SH,GI_BAPI_GM_ITEM_SH.
  REFRESH: GT_BAPI_GM_ITEM,GT_BAPI_GM_ITEM_SH.
**Sorting based on delivery & line
  SORT GT_MARC_OVG_ITEM BY BAPI_PO_NO BAPI_PO_LINE_NO.
***  Segregate unique line items
  CLEAR: GI_MARC_OVG_ITEM,GW_LINE_COUNT,GW_PRE_LINE_NO.
  LOOP AT GT_MARC_OVG_ITEM INTO GI_MARC_OVG_ITEM.
    IF GW_PRE_LINE_NO EQ GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO OR GI_MARC_OVG_ITEM-BAPI_BATCH IS NOT INITIAL.
      GW_LINE_COUNT = GW_LINE_COUNT + 1.
      IF GW_LINE_COUNT GE 1.
        EXIT.
      ENDIF.
    ENDIF.
    GW_PRE_LINE_NO = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
  ENDLOOP.


  IF GW_LINE_COUNT GE 1.
    LOOP AT GT_MARC_OVG_ITEM INTO GI_MARC_OVG_ITEM.
      CLEAR: GI_BAPI_GM_HEAD,GI_BAPI_GM_CODE,GI_BAPI_GM_ITEM,
             GI_BAPI_GM_HEAD_SH,GI_BAPI_GM_CODE_SH,GI_BAPI_GM_ITEM_SH,
             GV_FSTEP, GV_PROCESS_STATUS.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      CLEAR: GV_TEMP_ABLAD, GV_RECL_SEQ.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      REFRESH: GT_BAPI_GM_ITEM,GT_BAPI_GM_ITEM_SH.
** Populate variables for RECL table update
      GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
      GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
      GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
      GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      SPLIT GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT AT '-' INTO GV_TEMP_ABLAD GV_RECL_SEQ.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
**incase of error reprocessing, get the fail step number
      IF P_REPR = 'X'.
        READ TABLE GT_GR_RECL INTO GI_GR_RECL WITH KEY PO_NO = GI_MARC_OVG_ITEM-PO_NO
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
                                                       RECH_SEQ = GV_RECH_SEQ
                                                       RECL_SEQ = GV_RECL_SEQ
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
                                                       PO_LINE_NO = GI_MARC_OVG_ITEM-PO_LINE_NO
                                                       LP = GI_MARC_OVG_ITEM-LP
                                                       CART_LP = GI_MARC_OVG_ITEM-CART_LP.
        IF SY-SUBRC IS INITIAL.
          GV_FSTEP = GI_GR_RECL-FAIL_STEP.
          GV_PROCESS_STATUS = GI_GR_RECL-PROCESS_STATUS.
        ENDIF.
      ENDIF.
      IF GI_MARC_OVG_ITEM-BAPI_BATCH IS NOT INITIAL.  "For Batch managed materials
        IF P_REPR = 'X'.
*For any step failed less than or equal to 30, execute from step 10
          GW_FAIL_STEP = '30'.
          IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP.
            PERFORM PROCESS_BATCH_REMOVE. "Step 10 and 20
          ENDIF.
        ELSE.
****Remove Batch & Batch Split from Inbound Delivery
          PERFORM PROCESS_BATCH_REMOVE. "Step 10 and 20
        ENDIF.
      ELSE.
        IF P_REPR = 'X'.
          GW_FAIL_STEP = '30'.
          IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP.
            PERFORM CALC_OPEN_QTY.
          ENDIF.
        ELSE.
**** Calculate Open Quantity
          PERFORM CALC_OPEN_QTY.
        ENDIF.

      ENDIF.

      IF P_REPR = 'X'. "error reprocessing
** If it fails in any step other than 40, all steps have to be executed
        GW_FAIL_STEP = '30'.
        IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP.
          PERFORM POST_BAPI. "Step 30 and 40
        ENDIF.
** Only if it fails in overage posting perform this step.
        GW_FAIL_STEP = '40'.
        IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP = GW_FAIL_STEP.
** Fill internal table for overage posting
          PERFORM FILL_OVERAGE.
          PERFORM POST_BAPI_SH. "Step 40
        ENDIF.
      ELSE.
****Post BAPI
        PERFORM POST_BAPI. "Step 30 and 40
      ENDIF.
    ENDLOOP.
  ELSE.
    CLEAR: GI_BAPI_GM_HEAD,GI_BAPI_GM_CODE,GI_BAPI_GM_ITEM,
           GI_BAPI_GM_HEAD_SH,GI_BAPI_GM_CODE_SH,GI_BAPI_GM_ITEM_SH.
    REFRESH: GT_BAPI_GM_ITEM,GT_BAPI_GM_ITEM_SH.
    LOOP AT GT_MARC_OVG_ITEM INTO GI_MARC_OVG_ITEM.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      CLEAR: GV_TEMP_ABLAD, GV_RECL_SEQ.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
** Populate variables for RECL table update
      GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
      GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
      GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
      GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      SPLIT GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT AT '-' INTO GV_TEMP_ABLAD GV_RECL_SEQ.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
**incase of error reprocessing, get the fail step number
      IF P_REPR = 'X'.
        READ TABLE GT_GR_RECL INTO GI_GR_RECL WITH KEY PO_NO = GI_MARC_OVG_ITEM-PO_NO
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
                                                       RECH_SEQ = GV_RECH_SEQ
                                                       RECL_SEQ = GV_RECL_SEQ
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
                                                       PO_LINE_NO = GI_MARC_OVG_ITEM-PO_LINE_NO
                                                       LP = GI_MARC_OVG_ITEM-LP
                                                       CART_LP = GI_MARC_OVG_ITEM-CART_LP.
        IF SY-SUBRC IS INITIAL.
          GV_FSTEP = GI_GR_RECL-FAIL_STEP.
          GV_PROCESS_STATUS = GI_GR_RECL-PROCESS_STATUS.
        ENDIF.
      ENDIF.
**** Calculate Open Quantity
      IF P_REPR = 'X'.
        GW_FAIL_STEP = '30'.
        IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP.
          PERFORM CALC_OPEN_QTY.
        ENDIF.
      ELSE.
        PERFORM CALC_OPEN_QTY.
      ENDIF.
      AT LAST.
        IF P_REPR = 'X'.
          GW_FAIL_STEP = '30'.
          IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP.
** Post_bapi includes both step 30 and 40 . Hence if fail step is less than 40,
** perform post_bapi will do both step 30 and 40
            PERFORM POST_BAPI. "Step 30 and 40
          ENDIF.
          GW_FAIL_STEP = '40'.
          IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP = GW_FAIL_STEP.
            PERFORM POST_BAPI_SH." Step 40
          ENDIF.
        ELSE.
****Post BAPI
          PERFORM POST_BAPI.
        ENDIF.
      ENDAT.
    ENDLOOP.
  ENDIF.

  CLEAR:GW_LINE_COUNT,GW_PRE_LINE_NO.
ENDFORM.                    " GR_05
*&---------------------------------------------------------------------*
*&      Form  GR_10
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GR_10 .
****  Post BAPI for Surprice Linked & Non Linked Receipts
  IF GT_MARC_SUP_ITEM IS NOT INITIAL.
    CLEAR: GI_MARC_SUP_ITEM.
    LOOP AT GT_MARC_SUP_ITEM INTO GI_MARC_SUP_ITEM.
      CLEAR: GI_BAPI_GM_HEAD,GI_BAPI_GM_CODE,GI_BAPI_GM_ITEM,
             GI_BAPI_GM_HEAD_SH,GI_BAPI_GM_CODE_SH,GI_BAPI_GM_ITEM_SH.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      CLEAR: GV_TEMP_ABLAD, GV_RECL_SEQ. "USPRADI 04.04.2022
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      REFRESH: GT_BAPI_GM_ITEM,GT_BAPI_GM_ITEM_SH.
** Populate variables for RECL table update
      GW_PO_NO_TAB         = GI_MARC_SUP_ITEM-PO_NO.
      GW_PO_LINE_NO_TAB    = GI_MARC_SUP_ITEM-PO_LINE_NO.
      GW_LP_TAB            = GI_MARC_SUP_ITEM-LP.
      GW_CART_LP_TAB       = GI_MARC_SUP_ITEM-CART_LP.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
      SPLIT GI_MARC_SUP_ITEM-BAPI_UNLOAD_PT AT '-' INTO GV_TEMP_ABLAD GV_RECL_SEQ.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
**incase of error reprocessing, get the fail step number
      IF P_REPR = 'X'.
        READ TABLE GT_GR_RECL INTO GI_GR_RECL WITH KEY PO_NO = GI_MARC_SUP_ITEM-PO_NO
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
                                                       RECH_SEQ = GV_RECH_SEQ
                                                       RECL_SEQ = GV_RECL_SEQ
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
                                                       PO_LINE_NO = GI_MARC_SUP_ITEM-PO_LINE_NO
                                                       LP = GI_MARC_SUP_ITEM-LP
                                                       CART_LP = GI_MARC_SUP_ITEM-CART_LP.
        IF SY-SUBRC IS INITIAL.
          GV_FSTEP = GI_GR_RECL-FAIL_STEP.
          GV_PROCESS_STATUS = GI_GR_RECL-PROCESS_STATUS.
        ENDIF.
      ENDIF.
****      Suriprise Linked & Non Linked Receipts
*      IF p_repr = 'X'.
*        gw_fail_step = '30'.
*        IF gv_process_status = 'E' AND gv_fstep LE gw_fail_step.
*          PERFORM populate_surprise.
*        ENDIF.
*      ELSE.
*        PERFORM populate_surprise.
*      ENDIF.
      PERFORM POPULATE_SURPRISE.
***Post BAPI
      IF P_REPR = 'X'.
        GW_FAIL_STEP = '30'.
        IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP.
          PERFORM POST_BAPI. "Step 30 and 40
        ENDIF.
        GW_FAIL_STEP = '40'.
        IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP = GW_FAIL_STEP.
          PERFORM POST_BAPI_SH. "Step 40
        ENDIF.
      ELSE.
        PERFORM POST_BAPI. "Step 30 and 40
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.                    " GR_10
*&---------------------------------------------------------------------*
*&      Form  POPULATE_SURPRISE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM POPULATE_SURPRISE .
  DATA:LW_MBLNR TYPE MBLNR.
*****    Populate BAPI Structures for 701 Postings when PO Line is Initial
  GI_BAPI_GM_HEAD_SH-DOC_DATE      = SY-DATUM.   "Document Date
  GI_BAPI_GM_HEAD_SH-PSTNG_DATE    = SY-DATUM.   "Posting Date
  GI_BAPI_GM_HEAD_SH-HEADER_TXT     = GI_MARC_SUP_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
  GI_BAPI_GM_HEAD_SH-BILL_OF_LADING = GI_MARC_SUP_ITEM-BAPI_BILL_OF_LADING. "SHIPPER_BL_NO
  GI_BAPI_GM_HEAD_SH-REF_DOC_NO = GI_MARC_SUP_ITEM-BAPI_VENDOR_ID. "VEND_ID / "PO_NO
  GI_BAPI_GM_ITEM_SH-MATERIAL  = GI_MARC_SUP_ITEM-SKU. "SKU
  GI_BAPI_GM_ITEM_SH-ENTRY_UOM = GI_MARC_SUP_ITEM-BAPI_ENTRY_UOM. "UOM_ABBREV
  GI_BAPI_GM_ITEM_SH-ENTRY_QNT = GI_MARC_SUP_ITEM-QTY_EXPE. "QTY_EXPE
  GI_BAPI_GM_ITEM_SH-PLANT     = GI_MARC_SUP_ITEM-BAPI_PLANT.  "COMP_CODE
  GI_BAPI_GM_ITEM_SH-BATCH     = GI_MARC_SUP_ITEM-BAPI_BATCH. "LOT
  GI_BAPI_GM_ITEM_SH-UNLOAD_PT = GI_MARC_SUP_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
  GI_BAPI_GM_ITEM_SH-ITEM_TEXT = GI_MARC_SUP_ITEM-BAPI_ITEM_TEXT. "Item Text
  GI_BAPI_GM_ITEM_SH-MVT_IND   = ' '."gi_marc_ovg_item-bapi_mvt_ind.  "Movement Indicator
  GI_BAPI_GM_ITEM_SH-VENDOR    = GI_MARC_OVG_ITEM-BAPI_VENDOR_ID."Vendor Account Number

*****Transformations****
  GI_BAPI_GM_ITEM_SH-MOVE_TYPE = GI_MARC_SUP_ITEM-BAPI_MOVE_TYPE. "Movement Type
  GI_BAPI_GM_ITEM_SH-MOVE_REAS = GI_MARC_SUP_ITEM-BAPI_MOVE_REAS. "Reason for Goods movement
  GI_BAPI_GM_ITEM_SH-STGE_LOC  = GI_MARC_SUP_ITEM-BAPI_STGE_LOC.  "Storage Location
  GI_BAPI_GM_ITEM_SH-STCK_TYPE = GI_MARC_SUP_ITEM-BAPI_STCK_TYPE. "Stock Type
  GI_BAPI_GM_CODE_SH-GM_CODE   = GI_MARC_SUP_ITEM-BAPI_GM_CODE."'03'."  "GM_CODE

  APPEND GI_BAPI_GM_ITEM_SH TO GT_BAPI_GM_ITEM_SH.
ENDFORM.                    " POPULATE_SURPRISE
*&---------------------------------------------------------------------*
*&      Form  TEST_RUN_BAPI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GI_BAPI_GM_HEAD  text
*      -->P_GI_BAPI_GM_CODE  text
*      -->P_GT_BAPI_GM_ITEM  text
*----------------------------------------------------------------------*
FORM TEST_RUN_BAPI  USING    PI_BAPI_GM_HEAD
                             PI_BAPI_GM_CODE
                             PT_BAPI_GM_ITEM TYPE STANDARD TABLE.

  DATA: LW_BAPI_LINES TYPE I.
  CLEAR: LW_BAPI_LINES.
  DATA: LI_BAPI_GM_ITEM     TYPE BAPI2017_GM_ITEM_CREATE,
        LT_BAPI_GM_ITEM     TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE,
        LT_BAPI_GM_ITEM_TMP TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.
  LT_BAPI_GM_ITEM_TMP[] = PT_BAPI_GM_ITEM[].

  IF LT_BAPI_GM_ITEM_TMP IS NOT INITIAL.
    LOOP AT LT_BAPI_GM_ITEM_TMP INTO GI_BAPI_GM_ITEM.
      IF GI_BAPI_GM_ITEM-VENDOR IS NOT INITIAL.
*  **Conversion exit for Vendor number
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = GI_BAPI_GM_ITEM-VENDOR
          IMPORTING
            OUTPUT = GI_BAPI_GM_ITEM-VENDOR.
      ENDIF.
      MOVE-CORRESPONDING GI_BAPI_GM_ITEM TO LI_BAPI_GM_ITEM.
      APPEND LI_BAPI_GM_ITEM TO LT_BAPI_GM_ITEM.

      CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
        EXPORTING
          GOODSMVT_HEADER  = PI_BAPI_GM_HEAD
          GOODSMVT_CODE    = PI_BAPI_GM_CODE
          TESTRUN          = 'X'
        IMPORTING
          MATERIALDOCUMENT = GW_MBLNR
          MATDOCUMENTYEAR  = GW_MJAHR
        TABLES
          GOODSMVT_ITEM    = LT_BAPI_GM_ITEM
          RETURN           = GT_BAPI_RETURN.

      IF GT_BAPI_RETURN IS NOT INITIAL.
        READ TABLE GT_BAPI_RETURN INTO GI_BAPI_RETURN WITH KEY TYPE = 'E'.
        IF SY-SUBRC = 0.
          CONCATENATE GI_BAPI_RETURN-ID GI_BAPI_RETURN-NUMBER INTO GW_BAPI_ERROR.
          IF GW_BAPI_ERROR IN S_RETURN.
            CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
              EXPORTING
                ID         = GI_BAPI_RETURN-ID
                NUMBER     = GI_BAPI_RETURN-NUMBER
                LANGUAGE   = SY-LANGU
                TEXTFORMAT = SPACE
                MESSAGE_V1 = GI_BAPI_RETURN-MESSAGE_V1
                MESSAGE_V2 = GI_BAPI_RETURN-MESSAGE_V2
                MESSAGE_V3 = GI_BAPI_RETURN-MESSAGE_V3
                MESSAGE_V4 = GI_BAPI_RETURN-MESSAGE_V4
              IMPORTING
                MESSAGE    = GW_MESSAGE.

            GW_REJECT_REASON_TAB = GW_MESSAGE.
            GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
            GW_TEST              = 'X'.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'SAP'.
            GW_SAP_ERROR_FLAG    = 'X'.
            GW_MSG_ID            = GI_BAPI_RETURN-ID.
            GW_MSG_NO            = GI_BAPI_RETURN-NUMBER.
** Update RECH and RECL tables with error status, fail step and error message
            GV_STATUS = 'E'.
            PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO GW_MBLNR
                                PT_BAPI_GM_ITEM.
            PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
            PERFORM FILE_TABLE_UPDATE USING GW_MBLNR PT_BAPI_GM_ITEM.
          ELSE.
            CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
              EXPORTING
                ID         = GI_BAPI_RETURN-ID
                NUMBER     = GI_BAPI_RETURN-NUMBER
                LANGUAGE   = SY-LANGU
                TEXTFORMAT = SPACE
                MESSAGE_V1 = GI_BAPI_RETURN-MESSAGE_V1
                MESSAGE_V2 = GI_BAPI_RETURN-MESSAGE_V2
                MESSAGE_V3 = GI_BAPI_RETURN-MESSAGE_V3
                MESSAGE_V4 = GI_BAPI_RETURN-MESSAGE_V4
              IMPORTING
                MESSAGE    = GW_MESSAGE.

            GW_REJECT_REASON_TAB = GW_MESSAGE.
            GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
            GW_TEST              = 'X'.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'MARC'.
            GW_SAP_ERROR_FLAG    = 'X'.
            GW_MSG_ID            = GI_BAPI_RETURN-ID.
            GW_MSG_NO            = GI_BAPI_RETURN-NUMBER.
** Update RECH and RECL tables with error status, fail step and error message
            GV_STATUS = 'M'.
            PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO GW_MBLNR
                                LT_BAPI_GM_ITEM.
            PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
            PERFORM FILE_TABLE_UPDATE USING GW_MBLNR LT_BAPI_GM_ITEM.
          ENDIF.
          DELETE LT_BAPI_GM_ITEM_TMP WHERE
           ITEM_TEXT = LI_BAPI_GM_ITEM-ITEM_TEXT
           AND UNLOAD_PT = LI_BAPI_GM_ITEM-UNLOAD_PT.
        ENDIF.
      ENDIF.
      CLEAR: LI_BAPI_GM_ITEM,GI_BAPI_GM_ITEM.
      REFRESH: LT_BAPI_GM_ITEM,GT_BAPI_RETURN.
    ENDLOOP.
    PT_BAPI_GM_ITEM[] = LT_BAPI_GM_ITEM_TMP[].
  ENDIF.
  CLEAR: GW_TEST.


ENDFORM.                    " TEST_RUN_BAPI
*&---------------------------------------------------------------------*
*&      Form  RECL_UPDATE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GV_STATUS  text
*      -->P_GV_STEP  text
*      -->P_GV_STEP_DESCR  text
*      -->P_GW_MESSAGE  text
*      -->P_GW_MSG_ID  text
*      -->P_GW_MSG_NO  text
*      -->P_LT_BAPI_GM_ITEM  text
*----------------------------------------------------------------------*
FORM RECL_UPDATE  USING    PV_STATUS
                           PV_STEP
                           PV_STEP_DESCR
                           PV_MESSAGE
                           PV_MSG_ID
                           PV_MSG_NO
                           PV_MBLNR
                           PT_BAPI_GM_ITEM TYPE STANDARD TABLE.
  FIELD-SYMBOLS: <LFS_RECL> TYPE ZTMM_MARC_GR_L.
  DATA: LI_BAPI_GM_ITEM TYPE  BAPI2017_GM_ITEM_CREATE.
** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
  DATA: LV_TEMP_ABLAD TYPE ABLAD,
        LV_RECL_SEQ   TYPE ZRECORD_SEQ_NO.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
** Begin of code comment by USPRADI DE3K9A0CR0 on 12.04.2022
*** Begin of changes by USPRADI JE3K904585 on 24.02.2022
**  IF pt_bapi_gm_item IS NOT INITIAL.
*  IF pt_bapi_gm_item IS NOT INITIAL AND gw_cust_ret IS INITIAL.
*** End of changes by USPRADI JE3K904585 on 24.02.2022
*    LOOP AT pt_bapi_gm_item INTO li_bapi_gm_item.
*      READ TABLE gt_marc_gr_item INTO gi_marc_gr_item WITH KEY bapi_po_no = li_bapi_gm_item-item_text(10) "deliv_numb
*                                                               bapi_po_line_no = li_bapi_gm_item-item_text+10(6) "deliv_item
*                                                               cart_lp = li_bapi_gm_item-unload_pt.
*      IF sy-subrc IS INITIAL.
*        READ TABLE gt_gr_recl ASSIGNING <lfs_recl> WITH KEY tran_seq_no = gv_tran_seq
*                                                       po_no = gi_marc_gr_item-po_no"li_bapi_gm_item-item_text(10) "deliv_numb
*                                                       po_line_no = gi_marc_gr_item-po_line_no"li_bapi_gm_item-item_text+10(6) "deliv_item
*                                                       lp = gi_marc_gr_item-lp
*                                                       cart_lp  = gi_marc_gr_item-cart_lp."li_bapi_gm_item-unload_pt.
*
*        IF sy-subrc IS INITIAL AND <lfs_recl> IS ASSIGNED.
*          <lfs_recl>-process_status = pv_status.
*          <lfs_recl>-fail_step = pv_step.
*          <lfs_recl>-fail_step_descrin = pv_step_descr.
*          <lfs_recl>-reason = pv_message.
*          CONCATENATE pv_msg_id pv_msg_no INTO <lfs_recl>-message_id_num.
*          IF pv_mblnr IS NOT INITIAL.
*            IF <lfs_recl>-mat_doc IS INITIAL.
*              <lfs_recl>-mat_doc = pv_mblnr.
*            ELSE.
*              CONCATENATE <lfs_recl>-mat_doc '/' pv_mblnr INTO <lfs_recl>-mat_doc.
*            ENDIF.
*          ENDIF.
*          IF p_repr = 'X'.
*            <lfs_recl>-changed_date = sy-datum.
*            <lfs_recl>-changed_time = sy-uzeit.
*            <lfs_recl>-changed_by = sy-uname.
*          ENDIF.
*          MODIFY ztmm_marc_gr_l FROM <lfs_recl>.
*** Begin of changes by USPRADI JE3K905848 on 15.03.2022
**          COMMIT WORK.
*          COMMIT WORK AND WAIT. "JE3K906487 06.04.2022
*** End of changes by USPRADI JE3K905848 on 15.03.2022
*        ENDIF.
*      ELSE.
*        READ TABLE gt_marc_gr_item INTO gi_marc_gr_item WITH KEY bapi_po_no = li_bapi_gm_item-item_text(10) "deliv_numb
*                                                              bapi_po_line_no = li_bapi_gm_item-item_text+10(6) "deliv_item
*                                                              lp = li_bapi_gm_item-unload_pt.
*        IF sy-subrc IS INITIAL.
*          READ TABLE gt_gr_recl ASSIGNING <lfs_recl> WITH KEY tran_seq_no = gv_tran_seq
*                                                         po_no = gi_marc_gr_item-po_no"li_bapi_gm_item-item_text(10) "deliv_numb
*                                                         po_line_no = gi_marc_gr_item-po_line_no"li_bapi_gm_item-item_text+10(6) "deliv_item
*                                                         lp = gi_marc_gr_item-lp
*                                                         cart_lp  = gi_marc_gr_item-cart_lp."li_bapi_gm_item-unload_pt.
*
*          IF sy-subrc IS INITIAL AND <lfs_recl> IS ASSIGNED.
*            <lfs_recl>-process_status = pv_status.
*            <lfs_recl>-fail_step = pv_step.
*            <lfs_recl>-fail_step_descrin = pv_step_descr.
*            <lfs_recl>-reason = pv_message.
*            CONCATENATE pv_msg_id pv_msg_no INTO <lfs_recl>-message_id_num.
*            IF pv_mblnr IS NOT INITIAL.
*              IF <lfs_recl>-mat_doc IS INITIAL.
*                <lfs_recl>-mat_doc = pv_mblnr.
*              ELSE.
*                CONCATENATE <lfs_recl>-mat_doc '/' pv_mblnr INTO <lfs_recl>-mat_doc.
*              ENDIF.
*            ENDIF.
*            IF p_repr = 'X'.
*              <lfs_recl>-changed_date = sy-datum.
*              <lfs_recl>-changed_time = sy-uzeit.
*              <lfs_recl>-changed_by = sy-uname.
*            ENDIF.
*            MODIFY ztmm_marc_gr_l FROM <lfs_recl>.
*** Begin of changes by USPRADI JE3K905848 on 15.03.2022
**            COMMIT WORK.
*            COMMIT WORK AND WAIT. "JE3K906487 06.04.2022
*** End of changes by USPRADI JE3K905848 on 15.03.2022
*          ENDIF.
*        ELSE.
*          READ TABLE gt_gr_recl ASSIGNING <lfs_recl> WITH KEY tran_seq_no = gv_tran_seq
*                                                                           po_no = gw_po_no_tab
*                                                                           po_line_no = gw_po_line_no_tab
*                                                                           lp = gw_lp_tab
*                                                                           cart_lp  = gw_cart_lp_tab.
*          IF sy-subrc IS INITIAL AND <lfs_recl> IS ASSIGNED.
*            <lfs_recl>-process_status = pv_status.
*            <lfs_recl>-fail_step = pv_step.
*            <lfs_recl>-fail_step_descrin = pv_step_descr.
*            <lfs_recl>-reason = pv_message.
*            CONCATENATE pv_msg_id pv_msg_no INTO <lfs_recl>-message_id_num.
*            IF pv_mblnr IS NOT INITIAL.
*              IF <lfs_recl>-mat_doc IS INITIAL.
*                <lfs_recl>-mat_doc = pv_mblnr.
*              ELSE.
*                CONCATENATE <lfs_recl>-mat_doc '/' pv_mblnr INTO <lfs_recl>-mat_doc.
*              ENDIF.
*            ENDIF.
*            IF p_repr = 'X'.
*              <lfs_recl>-changed_date = sy-datum.
*              <lfs_recl>-changed_time = sy-uzeit.
*              <lfs_recl>-changed_by = sy-uname.
*            ENDIF.
*            MODIFY ztmm_marc_gr_l FROM <lfs_recl>.
*** Begin of changes by USPRADI JE3K905848 on 15.03.2022
**            COMMIT WORK.
*            COMMIT WORK AND WAIT. "JE3K906487 06.04.2022
*** End of changes by USPRADI JE3K905848 on 15.03.2022
*          ENDIF.
*        ENDIF.
*      ENDIF.
*    ENDLOOP.
*  ELSE.
*    READ TABLE gt_gr_recl ASSIGNING <lfs_recl> WITH KEY tran_seq_no = gv_tran_seq
*                                                   po_no = gw_po_no_tab
*                                                   po_line_no = gw_po_line_no_tab
*                                                   lp = gw_lp_tab
*                                                   cart_lp  = gw_cart_lp_tab.
*    IF sy-subrc IS INITIAL AND <lfs_recl> IS ASSIGNED.
*      <lfs_recl>-process_status = pv_status.
*      <lfs_recl>-fail_step = pv_step.
*      <lfs_recl>-fail_step_descrin = pv_step_descr.
*      <lfs_recl>-reason = pv_message.
*      CONCATENATE pv_msg_id pv_msg_no INTO <lfs_recl>-message_id_num.
*      IF pv_mblnr IS NOT INITIAL.
*        IF <lfs_recl>-mat_doc IS INITIAL.
*          <lfs_recl>-mat_doc = pv_mblnr.
*        ELSE.
*          CONCATENATE <lfs_recl>-mat_doc '/' pv_mblnr INTO <lfs_recl>-mat_doc.
*        ENDIF.
*      ENDIF.
*      IF p_repr = 'X'.
*        <lfs_recl>-changed_date = sy-datum.
*        <lfs_recl>-changed_time = sy-uzeit.
*        <lfs_recl>-changed_by = sy-uname.
*      ENDIF.
*      MODIFY ztmm_marc_gr_l FROM <lfs_recl>.
*** Begin of changes by USPRADI JE3K905848 on 15.03.2022
**      COMMIT WORK.
*      COMMIT WORK AND WAIT. "JE3K906487 06.04.2022
*** End of changes by USPRADI JE3K905848 on 15.03.2022
*    ENDIF.
*  ENDIF.
** End of code comment by USPRADI DE3K9A0CR0 on 12.04.2022

** Begin of changes by USPRADI DE3K9A0CR0 on 12.04.2022
  IF PT_BAPI_GM_ITEM IS NOT INITIAL AND GW_CUST_RET IS INITIAL.
    LOOP AT PT_BAPI_GM_ITEM INTO LI_BAPI_GM_ITEM.
      CLEAR: LV_TEMP_ABLAD, LV_RECL_SEQ.
      SPLIT LI_BAPI_GM_ITEM-UNLOAD_PT AT '-' INTO LV_TEMP_ABLAD LV_RECL_SEQ.
      READ TABLE GT_GR_RECL ASSIGNING <LFS_RECL> WITH KEY TRAN_SEQ_NO = GV_TRAN_SEQ
                                                          RECH_SEQ = GV_RECH_SEQ
                                                          RECL_SEQ = LV_RECL_SEQ.
      IF SY-SUBRC IS INITIAL AND <LFS_RECL> IS ASSIGNED.
        <LFS_RECL>-PROCESS_STATUS = PV_STATUS.
        <LFS_RECL>-FAIL_STEP = PV_STEP.
        <LFS_RECL>-FAIL_STEP_DESCRIN = PV_STEP_DESCR.
        <LFS_RECL>-REASON = PV_MESSAGE.
        CONCATENATE PV_MSG_ID PV_MSG_NO INTO <LFS_RECL>-MESSAGE_ID_NUM.
        IF PV_MBLNR IS NOT INITIAL.
          IF <LFS_RECL>-MAT_DOC IS INITIAL.
            <LFS_RECL>-MAT_DOC = PV_MBLNR.
          ELSE.
            CONCATENATE <LFS_RECL>-MAT_DOC '/' PV_MBLNR INTO <LFS_RECL>-MAT_DOC.
          ENDIF.
        ENDIF.
        IF P_REPR = 'X'.
          <LFS_RECL>-CHANGED_DATE = SY-DATUM.
          <LFS_RECL>-CHANGED_TIME = SY-UZEIT.
          <LFS_RECL>-CHANGED_BY = SY-UNAME.
        ENDIF.
        MODIFY ZTMM_MARC_GR_L FROM <LFS_RECL>.
        COMMIT WORK AND WAIT.
      ELSE.
        READ TABLE GT_GR_RECL ASSIGNING <LFS_RECL> WITH KEY TRAN_SEQ_NO = GV_TRAN_SEQ
                                                         RECH_SEQ = GV_RECH_SEQ
                                                         RECL_SEQ = GV_RECL_SEQ.
        IF SY-SUBRC IS INITIAL AND <LFS_RECL> IS ASSIGNED.
          <LFS_RECL>-PROCESS_STATUS = PV_STATUS.
          <LFS_RECL>-FAIL_STEP = PV_STEP.
          <LFS_RECL>-FAIL_STEP_DESCRIN = PV_STEP_DESCR.
          <LFS_RECL>-REASON = PV_MESSAGE.
          CONCATENATE PV_MSG_ID PV_MSG_NO INTO <LFS_RECL>-MESSAGE_ID_NUM.
          IF PV_MBLNR IS NOT INITIAL.
            IF <LFS_RECL>-MAT_DOC IS INITIAL.
              <LFS_RECL>-MAT_DOC = PV_MBLNR.
            ELSE.
              CONCATENATE <LFS_RECL>-MAT_DOC '/' PV_MBLNR INTO <LFS_RECL>-MAT_DOC.
            ENDIF.
          ENDIF.
          IF P_REPR = 'X'.
            <LFS_RECL>-CHANGED_DATE = SY-DATUM.
            <LFS_RECL>-CHANGED_TIME = SY-UZEIT.
            <LFS_RECL>-CHANGED_BY = SY-UNAME.
          ENDIF.
          MODIFY ZTMM_MARC_GR_L FROM <LFS_RECL>.
          COMMIT WORK AND WAIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ELSE.
    READ TABLE GT_GR_RECL ASSIGNING <LFS_RECL> WITH KEY TRAN_SEQ_NO = GV_TRAN_SEQ
                                                             RECH_SEQ = GV_RECH_SEQ
                                                             RECL_SEQ = GV_RECL_SEQ.
    IF SY-SUBRC IS INITIAL AND <LFS_RECL> IS ASSIGNED.
      <LFS_RECL>-PROCESS_STATUS = PV_STATUS.
      <LFS_RECL>-FAIL_STEP = PV_STEP.
      <LFS_RECL>-FAIL_STEP_DESCRIN = PV_STEP_DESCR.
      <LFS_RECL>-REASON = PV_MESSAGE.
      CONCATENATE PV_MSG_ID PV_MSG_NO INTO <LFS_RECL>-MESSAGE_ID_NUM.
      IF PV_MBLNR IS NOT INITIAL.
        IF <LFS_RECL>-MAT_DOC IS INITIAL.
          <LFS_RECL>-MAT_DOC = PV_MBLNR.
        ELSE.
          CONCATENATE <LFS_RECL>-MAT_DOC '/' PV_MBLNR INTO <LFS_RECL>-MAT_DOC.
        ENDIF.
      ENDIF.
      IF P_REPR = 'X'.
        <LFS_RECL>-CHANGED_DATE = SY-DATUM.
        <LFS_RECL>-CHANGED_TIME = SY-UZEIT.
        <LFS_RECL>-CHANGED_BY = SY-UNAME.
      ENDIF.
      MODIFY ZTMM_MARC_GR_L FROM <LFS_RECL>.
      COMMIT WORK AND WAIT.
    ENDIF.
  ENDIF.
** End of changes by USPRADI DE3K9A0CR0 on 12.04.2022
  CLEAR: GI_MARC_GR_ITEM, LI_BAPI_GM_ITEM.
ENDFORM.                    " RECL_UPDATE
*&---------------------------------------------------------------------*
*&      Form  ERROR_TABLE_UPDATE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_BAPI_GM_ITEM  text
*----------------------------------------------------------------------*
FORM ERROR_TABLE_UPDATE  TABLES PT_BAPI_GM_ITEM TYPE STANDARD TABLE.
  DATA: LT_BAPI_GM_ITEM TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE,
        LI_BAPI_GM_ITEM TYPE  BAPI2017_GM_ITEM_CREATE.
  IF PT_BAPI_GM_ITEM[] IS NOT INITIAL.

    LT_BAPI_GM_ITEM[] = PT_BAPI_GM_ITEM[].
    CLEAR: LI_BAPI_GM_ITEM,  GI_ZTMM_MARC_GR_ERR.
    REFRESH:  GT_ZTMM_MARC_GR_ERR.
    SORT LT_BAPI_GM_ITEM BY ITEM_TEXT UNLOAD_PT.
    SORT GT_MARC_GR_ITEM BY BAPI_PO_NO BAPI_PO_LINE_NO BAPI_UNLOAD_PT.
    CLEAR: GI_BAPI_GM_ITEM.
    LOOP AT LT_BAPI_GM_ITEM INTO LI_BAPI_GM_ITEM.
      CLEAR:  GI_MARC_GR_ITEM.
      READ TABLE GT_MARC_GR_ITEM INTO GI_MARC_GR_ITEM WITH KEY BAPI_PO_NO      = LI_BAPI_GM_ITEM-ITEM_TEXT(10) "deliv_numb
                                                               BAPI_PO_LINE_NO = LI_BAPI_GM_ITEM-ITEM_TEXT+10(6) "deliv_item
                                                               BAPI_UNLOAD_PT  = LI_BAPI_GM_ITEM-UNLOAD_PT
                                                               BINARY SEARCH.
      IF SY-SUBRC = 0.
        MOVE-CORRESPONDING GI_MARC_GR_ITEM TO GI_ZTMM_MARC_GR_ERR.
        GW_SEQ_NO_TEMP = GW_SEQ_NO_TEMP + 1.
        GI_ZTMM_MARC_GR_ERR-SEQ_NO         = GW_SEQ_NO_TEMP .
        GI_ZTMM_MARC_GR_ERR-ERROR_TYPE     = GW_ERROR_TYPE_TAB.
        GI_ZTMM_MARC_GR_ERR-REJECT_REASON  = GW_REJECT_REASON_TAB.
        GI_ZTMM_MARC_GR_ERR-MSG_ID  = GW_MSG_ID.
        GI_ZTMM_MARC_GR_ERR-MSG_NO  = GW_MSG_NO.
        IF P_REPR = 'X'.
          GI_ZTMM_MARC_GR_ERR-CHANGE_DATE = SY-DATUM.
          GI_ZTMM_MARC_GR_ERR-CHANGE_TIME = SY-UZEIT.
          GI_ZTMM_MARC_GR_ERR-CHANGE_USER = SY-UNAME.
        ENDIF.
        APPEND GI_ZTMM_MARC_GR_ERR TO GT_ZTMM_MARC_GR_ERR.
** Begin of changes by USPRADI DE3K9A09SL on 13-10-2021
        IF GI_ZTMM_MARC_GR_ERR-ERROR_TYPE = 'SAP'.
          APPEND GI_ZTMM_MARC_GR_ERR TO GT_SAP_ERR.
        ENDIF.
** End of changes by USPRADI DE3K9A09SL on 13-10-2021
      ENDIF.
    ENDLOOP.

    IF GT_ZTMM_MARC_GR_ERR IS NOT INITIAL.
*      MODIFY ztmm_marc_gr_er FROM TABLE gt_ztmm_marc_gr_err.
    ENDIF.
  ELSE.
*** Customer Returns Error Updation
    IF GW_CUS_RET_ERROR = 'X'.
      MOVE-CORRESPONDING GI_MARC_SPLIT_ITEM TO GI_ZTMM_MARC_GR_ERR.
      GI_ZTMM_MARC_GR_ERR-ERROR_TYPE     = GW_ERROR_TYPE_TAB.
      GI_ZTMM_MARC_GR_ERR-REJECT_REASON  = GW_REJECT_REASON_TAB.
      GI_ZTMM_MARC_GR_ERR-MSG_ID  = GW_MSG_ID.
      GI_ZTMM_MARC_GR_ERR-MSG_NO  = GW_MSG_NO.
      APPEND GI_ZTMM_MARC_GR_ERR TO GT_ZTMM_MARC_GR_ERR.
** Begin of changes by USPRADI DE3K9A09SL on 13-10-2021
      IF GI_ZTMM_MARC_GR_ERR-ERROR_TYPE = 'SAP'.
        APPEND GI_ZTMM_MARC_GR_ERR TO GT_SAP_ERR.
      ENDIF.
** End of changes by USPRADI DE3K9A09SL on 13-10-2021
    ENDIF.

    IF GT_ZTMM_MARC_GR_ERR IS NOT INITIAL.
*      MODIFY ztmm_marc_gr_er FROM TABLE gt_ztmm_marc_gr_err.
    ENDIF.
  ENDIF.
ENDFORM.                    " ERROR_TABLE_UPDATE
*&---------------------------------------------------------------------*
*&      Form  POST_BAPI_SH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM POST_BAPI_SH .
  DATA: LT_MARC_GR_ITEM TYPE STANDARD TABLE OF ZTMM_MARC_GR_ER,
        LI_MARC_GR_ITEM TYPE ZTMM_MARC_GR_ER.

****Post BAPI for 701 Movement Type
  IF GT_BAPI_GM_ITEM_SH IS NOT INITIAL.
***Test Run**
    CLEAR: GV_STEP.
    GV_STEP = '40'.
    GV_STEP_DESCR = TEXT-073.
    PERFORM TEST_RUN_BAPI USING GI_BAPI_GM_HEAD_SH GI_BAPI_GM_CODE_SH GT_BAPI_GM_ITEM_SH.
    IF GT_BAPI_GM_ITEM_SH IS NOT INITIAL.
      CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
        EXPORTING
          GOODSMVT_HEADER  = GI_BAPI_GM_HEAD_SH
          GOODSMVT_CODE    = GI_BAPI_GM_CODE_SH
        IMPORTING
          MATERIALDOCUMENT = GW_MBLNR_SH
          MATDOCUMENTYEAR  = GW_MJAHR_SH
        TABLES
          GOODSMVT_ITEM    = GT_BAPI_GM_ITEM_SH
          RETURN           = GT_BAPI_RETURN_SH.

      IF GW_MBLNR_SH IS NOT INITIAL.

        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            WAIT = GC_X.
        GV_STATUS = 'C'.
        CLEAR: GV_STEP, GV_STEP_DESCR, GW_MESSAGE, GW_MSG_ID, GW_MSG_NO.
        PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO GW_MBLNR_SH
                                GT_BAPI_GM_ITEM.
        GW_INPUT_STATUS_TAB = 'C'.
        PERFORM FILE_TABLE_UPDATE USING GW_MBLNR_SH GT_BAPI_GM_ITEM_SH.
        "" Delete Entries when SAP Error Reprocessing is successful
        LOOP AT GT_BAPI_GM_ITEM_SH INTO GI_BAPI_GM_ITEM_SH.
          READ TABLE  GT_MARC_GR_ITEM INTO GI_MARC_GR_ITEM WITH KEY
                    BAPI_ITEM_TEXT = GI_BAPI_GM_ITEM_SH-ITEM_TEXT
                    BAPI_UNLOAD_PT = GI_BAPI_GM_ITEM_SH-UNLOAD_PT .
          IF SY-SUBRC = 0.
            MOVE-CORRESPONDING GI_MARC_GR_ITEM TO LI_MARC_GR_ITEM.
            APPEND LI_MARC_GR_ITEM TO LT_MARC_GR_ITEM.
          ENDIF.
        ENDLOOP.
*        DELETE ztmm_marc_gr_er FROM TABLE lt_marc_gr_item.
      ELSE.
        CLEAR:GI_BAPI_RETURN_SH,GW_BAPI_ERROR."gw_bapi_error_sh.
        READ TABLE GT_BAPI_RETURN_SH INTO GI_BAPI_RETURN_SH WITH KEY TYPE = 'E'.
        IF SY-SUBRC = 0.
          CONCATENATE GI_BAPI_RETURN_SH-ID GI_BAPI_RETURN_SH-NUMBER INTO GW_BAPI_ERROR."gw_bapi_error_sh.
*          IF gw_bapi_error_sh IN s_return.
          IF GW_BAPI_ERROR IN S_RETURN.
            CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
              EXPORTING
                ID         = GI_BAPI_RETURN_SH-ID
                NUMBER     = GI_BAPI_RETURN_SH-NUMBER
                LANGUAGE   = SY-LANGU
                TEXTFORMAT = SPACE
                MESSAGE_V1 = GI_BAPI_RETURN_SH-MESSAGE_V1
                MESSAGE_V2 = GI_BAPI_RETURN_SH-MESSAGE_V2
                MESSAGE_V3 = GI_BAPI_RETURN_SH-MESSAGE_V3
                MESSAGE_V4 = GI_BAPI_RETURN_SH-MESSAGE_V4
              IMPORTING
                MESSAGE    = GW_MESSAGE_SH.

            GW_REJECT_REASON_TAB = GW_MESSAGE_SH.
            GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE_SH.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'SAP'.
            GW_SAP_ERROR_SH_FLAG = 'X'.
            GW_MSG_ID            = GI_BAPI_RETURN_SH-ID.
            GW_MSG_NO            = GI_BAPI_RETURN_SH-NUMBER.
** Update RECH and RECL tables with error status, fail step and error message
            GV_STATUS = 'E'.
            PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE_SH GW_MSG_ID GW_MSG_NO GW_MBLNR_SH
                                GT_BAPI_GM_ITEM_SH.
            PERFORM ERROR_TABLE_UPDATE TABLES GT_BAPI_GM_ITEM_SH.
            PERFORM FILE_TABLE_UPDATE USING GW_MBLNR_SH GT_BAPI_GM_ITEM_SH.
          ELSE.
            CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
              EXPORTING
                ID         = GI_BAPI_RETURN_SH-ID
                NUMBER     = GI_BAPI_RETURN_SH-NUMBER
                LANGUAGE   = SY-LANGU
                TEXTFORMAT = SPACE
                MESSAGE_V1 = GI_BAPI_RETURN_SH-MESSAGE_V1
                MESSAGE_V2 = GI_BAPI_RETURN_SH-MESSAGE_V2
                MESSAGE_V3 = GI_BAPI_RETURN_SH-MESSAGE_V3
                MESSAGE_V4 = GI_BAPI_RETURN_SH-MESSAGE_V4
              IMPORTING
                MESSAGE    = GW_MESSAGE_SH.

            GW_REJECT_REASON_TAB = GW_MESSAGE_SH.
            GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE_SH.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'MARC'.
            GW_SAP_ERROR_SH_FLAG = 'X'.
            GW_MSG_ID            = GI_BAPI_RETURN_SH-ID.
            GW_MSG_NO            = GI_BAPI_RETURN_SH-NUMBER.
** Update RECH and RECL tables with error status, fail step and error message
            GV_STATUS = 'M'.
            PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE_SH GW_MSG_ID GW_MSG_NO GW_MBLNR_SH
                                GT_BAPI_GM_ITEM_SH.
            PERFORM ERROR_TABLE_UPDATE TABLES GT_BAPI_GM_ITEM_SH.
            PERFORM FILE_TABLE_UPDATE USING GW_MBLNR_SH GT_BAPI_GM_ITEM_SH.
          ENDIF.
        ENDIF.
      ENDIF.
      CLEAR: GW_MBLNR,GW_MJAHR,GI_MARC_GR_ITEM,
             GI_BAPI_GM_HEAD_SH,GI_BAPI_GM_CODE_SH,GW_MBLNR_SH,GW_MJAHR_SH,GW_MSG_ID,GW_MSG_NO,
             GI_ZTMM_MARC_GR_ERR ,GI_ZTMM_MARC_FILE,GW_ERROR_TYPE_TAB,GW_REJECT_REASON_TAB,GW_INPUT_STATUS_TAB.
      REFRESH: GT_BAPI_GM_ITEM,GT_BAPI_RETURN,GT_BAPI_GM_ITEM_SH,GT_BAPI_RETURN_SH,GT_ZTMM_MARC_GR_ERR.
    ENDIF.
  ENDIF.

ENDFORM.                    " POST_BAPI_SH
*&---------------------------------------------------------------------*
*&      Form  PROCESS_BATCH_REMOVE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM PROCESS_BATCH_REMOVE .
  DATA: LT_BAPI_GM_ITEM TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.
  DATA: LW_MBLNR TYPE CHAR10.
  DATA: LT_LIPS1_TMP   TYPE STANDARD TABLE OF TYP_LIPS1,
        LT_LIPS1       TYPE STANDARD TABLE OF TYP_LIPS1,
        LI_LIPS1       TYPE TYP_LIPS1,
        LW_POSNR       TYPE POSNR_VL,
        GW_POSNR       TYPE POSNR_VL,
        LW_GR_LINE_QTY TYPE ERFMG.
  CLEAR: GW_GR_QTY,GW_POS_QTY,GW_NEV_QTY,GW_GR_FULL_QTY,GW_GR_OPEN_QTY ,
         GW_GR_LINE_QTY , GW_GR_101_QTY ,GW_GR_701_QTY ,GW_GR_MAIN_QTY,GW_GR_CHILD_QTY,LW_POSNR,
         GI_BAPI_GM_ITEM,GI_BAPI_GM_ITEM_SH,GI_ITEM_DATA,GI_ITEM_CONTROL,
         GI_HEADER_DATA,GI_HEADER_CONTROL,GW_DELIVERY,GI_VBFA,LI_LIPS1,GI_LIPS1,GW_POSNR.
  REFRESH: GT_VBFA,LT_LIPS1,GT_LIPS1,GT_ITEM_DATA,GT_ITEM_CONTROL,GT_BAPI_GM_ITEM,GT_BAPI_GM_ITEM_SH.
***  IF Material has Batch
  IF GI_MARC_OVG_ITEM-BAPI_BATCH IS NOT INITIAL.
*****IF Surprise Receipts Linked or Non Linked exclude this logic
*    IF gi_marc_ovg_item-rec_type NE 10.
*      IF gi_marc_ovg_item-po_line_no IS NOT INITIAL.
    IF GI_MARC_OVG_ITEM IS NOT INITIAL.
***Get LIPS Data
      SELECT
          VBELN
          POSNR
          MATNR
          WERKS
          LGORT
          CHARG
          LFIMG
          MEINS
          VRKME
          UMVKZ
          UMVKN
          VGBEL
          VGPOS
          XCHPF
          UMREF
          UECHA
          INSMK
          ORMNG
        INTO TABLE LT_LIPS1_TMP
        FROM LIPS
        WHERE VBELN = GI_MARC_OVG_ITEM-BAPI_PO_NO
        AND ( POSNR = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO
        OR    UECHA = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO ).
      IF SY-SUBRC = 0.
        IF LT_LIPS1_TMP IS NOT INITIAL.
***Get GR documents list
          SELECT
            VBELV
            POSNV
            VBELN
            POSNN
            VBTYP_N
            RFMNG
            VBTYP_V
            PLMIN
            BWART
            MJAHR
            INTO TABLE GT_VBFA
            FROM VBFA
            FOR ALL ENTRIES IN LT_LIPS1_TMP
            WHERE VBELV = LT_LIPS1_TMP-VBELN
            AND   POSNV = LT_LIPS1_TMP-POSNR
            AND   VBTYP_N = 'R'
            AND   VBTYP_V = '7'
            AND  ( BWART = '101' OR BWART = '102' )
            ORDER BY PRIMARY KEY.
        ENDIF.
        IF SY-SUBRC = 0.
          CLEAR:GI_VBFA.
          LOOP AT GT_VBFA INTO GI_VBFA.
            IF GI_VBFA-BWART = '101'.
              GW_POS_QTY = GW_POS_QTY + GI_VBFA-RFMNG.
            ELSEIF GI_VBFA-BWART = '102'.
              GW_NEV_QTY = GW_NEV_QTY + GI_VBFA-RFMNG.
            ENDIF.
          ENDLOOP.
*****  GR Quantity
          GW_GR_QTY = GW_POS_QTY - GW_NEV_QTY.
***Get LIPS Data
          SELECT
              VBELN
              POSNR
              MATNR
              WERKS
              LGORT
              CHARG
              LFIMG
              MEINS
              VRKME
              UMVKZ
              UMVKN
              VGBEL
              VGPOS
              XCHPF
              UMREF
              UECHA
              INSMK
              ORMNG
            INTO TABLE GT_LIPS1
            FROM LIPS
            WHERE VBELN = GI_MARC_OVG_ITEM-BAPI_PO_NO.
          IF SY-SUBRC = 0.
**** Calculating overall quantity
            LOOP AT GT_LIPS1 INTO GI_LIPS1  WHERE VBELN = GI_MARC_OVG_ITEM-BAPI_PO_NO
                                            AND   POSNR = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO
                                            OR    UECHA = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
              IF GI_LIPS1-POSNR = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
                GW_GR_MAIN_QTY = GW_GR_MAIN_QTY + GI_LIPS1-LFIMG.
              ENDIF.
              IF GI_LIPS1-UECHA = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
                GW_GR_CHILD_QTY = GW_GR_CHILD_QTY + GI_LIPS1-LFIMG.
              ENDIF.
            ENDLOOP.
            IF GW_GR_CHILD_QTY IS NOT INITIAL.
              GW_GR_FULL_QTY = GW_GR_MAIN_QTY + GW_GR_CHILD_QTY.
            ELSE.
              GW_GR_FULL_QTY = GW_GR_MAIN_QTY.
            ENDIF.
*****  GR Open Quantity
            GW_GR_OPEN_QTY = GW_GR_FULL_QTY - GW_GR_QTY.
          ENDIF.
****Check the highest child number
          LT_LIPS1[] = GT_LIPS1[].
          SORT LT_LIPS1 BY POSNR DESCENDING.
*            SORT lt_lips1 BY matnr posnr DESCENDING.
*            DELETE lt_lips1 WHERE matnr NE gi_marc_ovg_item-sku.
          READ TABLE LT_LIPS1 INTO LI_LIPS1 INDEX 1.
          IF SY-SUBRC = 0 AND LI_LIPS1-POSNR GT 900000.
            LW_POSNR = LI_LIPS1-POSNR.
          ENDIF.
*** Inbound delivery open quantity matched or greater than file quantity
          IF GW_GR_OPEN_QTY GE GI_MARC_OVG_ITEM-QTY_EXPE.
***Add Batch to Child Line Item
***  Populate Structures for BAPI_INB_DELIVERY_CHANGE to add Batch Split Line Items
            CLEAR:GI_LIPS1.
            READ TABLE GT_LIPS1 INTO GI_LIPS1 WITH KEY VBELN = GI_MARC_OVG_ITEM-BAPI_PO_NO
                                                       POSNR = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
            IF SY-SUBRC = 0.
*** Changing Open Quantity in Main Line
*****  GR Open Quantity
              GW_GR_LINE_QTY = GW_GR_OPEN_QTY - GI_MARC_OVG_ITEM-QTY_EXPE.

              GI_HEADER_DATA-DELIV_NUMB    = GI_LIPS1-VBELN.
              GI_HEADER_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
              GW_DELIVERY                  = GI_LIPS1-VBELN.

              GI_ITEM_DATA-DELIV_NUMB = GI_LIPS1-VBELN.
              GI_ITEM_DATA-DELIV_ITEM = GI_LIPS1-POSNR.
              GI_ITEM_DATA-MATERIAL   = GI_LIPS1-MATNR.
              GI_ITEM_DATA-DLV_QTY    = GW_GR_LINE_QTY.
              GI_ITEM_DATA-BATCH      = ' '.

              GI_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS1-UMVKZ.
              GI_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS1-UMVKN.
              GI_ITEM_DATA-SALES_UNIT         = GI_LIPS1-VRKME.
              GI_ITEM_DATA-BASE_UOM           = GI_LIPS1-MEINS.

              GI_ITEM_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
              GI_ITEM_CONTROL-DELIV_ITEM  = GI_LIPS1-POSNR.
              GI_ITEM_CONTROL-CHG_DELQTY = 'X'.

              APPEND GI_ITEM_DATA TO GT_ITEM_DATA.
              APPEND GI_ITEM_CONTROL TO GT_ITEM_CONTROL.
              CLEAR: GI_ITEM_DATA,GI_ITEM_CONTROL.

***Adding New child line item
              GI_HEADER_DATA-DELIV_NUMB    = GI_LIPS1-VBELN.
              GI_HEADER_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
              GW_DELIVERY                  = GI_LIPS1-VBELN.

              GI_ITEM_DATA-DELIV_NUMB = GI_LIPS1-VBELN.
              IF LW_POSNR IS NOT INITIAL.
                LW_POSNR = LW_POSNR + 1.
                GI_ITEM_DATA-DELIV_ITEM = LW_POSNR.
                GI_ITEM_CONTROL-DELIV_ITEM = LW_POSNR.
              ELSE.
                GI_ITEM_DATA-DELIV_ITEM = '900001'.
                GI_ITEM_CONTROL-DELIV_ITEM = '900001'.
              ENDIF.
              GW_POSNR                = GI_ITEM_DATA-DELIV_ITEM.
              GI_ITEM_DATA-MATERIAL   = GI_LIPS1-MATNR.
              GI_ITEM_DATA-DLV_QTY    = GI_MARC_OVG_ITEM-QTY_EXPE.
              GI_ITEM_DATA-BATCH      = GI_MARC_OVG_ITEM-BAPI_BATCH.
              GI_ITEM_DATA-HIERARITEM = GI_LIPS1-POSNR.
              GI_ITEM_DATA-USEHIERITM = '1'.
              GI_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS1-UMVKZ.
              GI_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS1-UMVKN.
              GI_ITEM_DATA-SALES_UNIT         = GI_LIPS1-VRKME.
              GI_ITEM_DATA-BASE_UOM           = GI_LIPS1-MEINS.

              GI_ITEM_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
              GI_ITEM_CONTROL-CHG_DELQTY = 'X'.

              IF GI_ITEM_DATA IS NOT INITIAL.
                APPEND GI_ITEM_DATA TO GT_ITEM_DATA.
                APPEND GI_ITEM_CONTROL TO GT_ITEM_CONTROL.
                CLEAR: GI_ITEM_DATA,GI_ITEM_CONTROL.
              ENDIF.
              CLEAR:GI_LIPS1.
              IF GT_ITEM_DATA IS NOT INITIAL.
***    Call BAPI BAPI_INB_DELIVERY_CHANGE to Batch Split Line Items - 900001
                CLEAR GV_STEP.
                GV_STEP = '20'.
                GV_STEP_DESCR = TEXT-074.
                PERFORM CALL_IBD_CHG_BAPI.
***Populate BAPI structure with Child Line Item-POSNR - 900001 or New Child Line Item
****Populate BAPI structure for 101 Posting
                GI_BAPI_GM_HEAD-DOC_DATE      = SY-DATUM.   "Document Date
                GI_BAPI_GM_HEAD-PSTNG_DATE    = SY-DATUM.   "Posting Date
                GI_BAPI_GM_HEAD-HEADER_TXT     = GI_MARC_OVG_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
                GI_BAPI_GM_HEAD-BILL_OF_LADING = GI_MARC_OVG_ITEM-BAPI_BILL_OF_LADING. "SHIPPER_BL_NO
                GI_BAPI_GM_HEAD-REF_DOC_NO = GI_MARC_OVG_ITEM-BAPI_REF_DOC_NO. "VEND_ID / "PO_NO
                GI_BAPI_GM_ITEM-DELIV_NUMB_TO_SEARCH = GI_MARC_OVG_ITEM-BAPI_PO_NO. "Delivery
                GI_BAPI_GM_ITEM-DELIV_ITEM_TO_SEARCH = GW_POSNR. "Delivery Line
                GI_BAPI_GM_ITEM-MATERIAL  = GI_MARC_OVG_ITEM-SKU. "SKU
                GI_BAPI_GM_ITEM-ENTRY_UOM = GI_MARC_OVG_ITEM-BAPI_ENTRY_UOM. "UOM_ABBREV
                GI_BAPI_GM_ITEM-ENTRY_QNT = GI_MARC_OVG_ITEM-QTY_EXPE. "QTY_EXPE
                GI_BAPI_GM_ITEM-PLANT     = GI_MARC_OVG_ITEM-BAPI_PLANT.  "COMP_CODE
                GI_BAPI_GM_ITEM-MOVE_TYPE = GI_MARC_OVG_ITEM-BAPI_MOVE_TYPE. "Movement Type
                GI_BAPI_GM_ITEM-MOVE_REAS = GI_MARC_OVG_ITEM-BAPI_MOVE_REAS. "Reason for Goods movement
                GI_BAPI_GM_ITEM-STGE_LOC  = GI_MARC_OVG_ITEM-BAPI_STGE_LOC.  "Storage Location
                GI_BAPI_GM_ITEM-STCK_TYPE = GI_MARC_OVG_ITEM-BAPI_STCK_TYPE. "Stock Type
                GI_BAPI_GM_ITEM-BATCH     = GI_MARC_OVG_ITEM-BAPI_BATCH. "LOT
                GI_BAPI_GM_ITEM-UNLOAD_PT = GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
                CONCATENATE GI_MARC_OVG_ITEM-BAPI_PO_NO GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO INTO GI_BAPI_GM_ITEM-ITEM_TEXT. "Item Text
                GI_BAPI_GM_ITEM-PO_NUMBER = GI_MARC_OVG_ITEM-BAPI_PO_NUMBER. "PO
                GI_BAPI_GM_ITEM-PO_ITEM   = GI_MARC_OVG_ITEM-BAPI_PO_ITEM.  "PO Line
                GI_BAPI_GM_ITEM-MVT_IND   = GI_MARC_OVG_ITEM-BAPI_MVT_IND.  "Movement Indicator
                GI_BAPI_GM_CODE-GM_CODE   = GI_MARC_OVG_ITEM-BAPI_GM_CODE.  "GM_CODE
                APPEND GI_BAPI_GM_ITEM TO GT_BAPI_GM_ITEM.
              ENDIF.
            ENDIF.  ""Adding 900001 child line
*                ENDIF.  " Child line is not available
****if file qty is more than ibd line qty post extra qty with 701 posting
          ELSEIF GW_GR_OPEN_QTY LT GI_MARC_OVG_ITEM-QTY_EXPE.
***Add Batch to Child Line Item
***Populate BAPI structure with Child Line Item-POSNR - 900001
***Populate Structures for BAPI_INB_DELIVERY_CHANGE to add Batch Split Line Items
            CLEAR:GI_LIPS1.
            READ TABLE GT_LIPS1 INTO GI_LIPS1 WITH KEY VBELN = GI_MARC_OVG_ITEM-BAPI_PO_NO
                                                       POSNR = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
            IF SY-SUBRC = 0.
*** Changing Open Quantity in Main Line
*****  GR Open Quantity = 0
              IF GW_GR_OPEN_QTY = 0.
*****    Populate BAPI Structures for 701 Postings
                GI_BAPI_GM_HEAD_SH-DOC_DATE      = SY-DATUM.   "Document Date
                GI_BAPI_GM_HEAD_SH-PSTNG_DATE    = SY-DATUM.   "Posting Date
                GI_BAPI_GM_HEAD_SH-HEADER_TXT     = GI_MARC_OVG_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
                GI_BAPI_GM_HEAD_SH-BILL_OF_LADING = GI_MARC_OVG_ITEM-BAPI_BILL_OF_LADING. "SHIPPER_BL_NO
                GI_BAPI_GM_HEAD_SH-REF_DOC_NO = GI_MARC_OVG_ITEM-BAPI_VENDOR_ID. "VEND_ID / "PO_NO
                GI_BAPI_GM_ITEM_SH-MATERIAL  = GI_MARC_OVG_ITEM-SKU. "SKU
                GI_BAPI_GM_ITEM_SH-ENTRY_UOM = GI_MARC_OVG_ITEM-BAPI_ENTRY_UOM. "UOM_ABBREV
                GI_BAPI_GM_ITEM_SH-ENTRY_QNT = GI_MARC_OVG_ITEM-QTY_EXPE. "QTY_EXPE
                GI_BAPI_GM_ITEM_SH-PLANT     = GI_MARC_OVG_ITEM-BAPI_PLANT.  "COMP_CODE
                GI_BAPI_GM_ITEM_SH-BATCH     = GI_MARC_OVG_ITEM-BAPI_BATCH. "LOT
                GI_BAPI_GM_ITEM_SH-UNLOAD_PT = GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
                CONCATENATE GI_MARC_OVG_ITEM-BAPI_PO_NO GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO INTO GI_BAPI_GM_ITEM_SH-ITEM_TEXT. "Item Text
                GI_BAPI_GM_ITEM_SH-MVT_IND   = ' '.  "Movement Indicator
                GI_BAPI_GM_CODE_SH-GM_CODE   = GI_MARC_OVG_ITEM-BAPI_GM_CODE."'03'."  "GM_CODE
                GI_BAPI_GM_ITEM_SH-VENDOR    = GI_MARC_OVG_ITEM-BAPI_VENDOR_ID."Vendor Account Number

*****Transformations****
                CLEAR: GI_ZTMM_MARC_TRANS.
                READ TABLE GT_ZTMM_MARC_TRANS INTO GI_ZTMM_MARC_TRANS WITH KEY REC_TYPE  = GI_MARC_OVG_ITEM-REC_TYPE
                                                                               PROD_STAT = GI_MARC_OVG_ITEM-PROD_STAT
                                                                               INDEX_NO  = '2'.
                IF SY-SUBRC NE 0.
****Process the record to error report***
                  GW_TRAN_NO_TAB       = GI_MARC_OVG_ITEM-TRAN_NO.
                  GW_TRANS_SEQ_NO_TAB  = GI_MARC_OVG_ITEM-TRAN_SEQ_NO.
                  GW_DATA_TYPE_TAB     = GI_MARC_OVG_ITEM-DATA_TYPE.
                  GW_COMP_CODE_TAB     = GI_MARC_OVG_ITEM-COMP_CODE.
                  GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
                  GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
                  GW_SKU_TAB           = GI_MARC_OVG_ITEM-SKU.
                  GW_QTY_EXPE_TAB      = GI_MARC_OVG_ITEM-QTY_EXPE.
                  GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
                  GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
                  GW_REC_ERROR         = 'X'.
                  GW_INPUT_STATUS_TAB  = 'E'.
                  GW_ERROR_TYPE_TAB    = 'MARC'.
                  CONCATENATE TEXT-034 GV_RECTYPE TEXT-035 GW_PROD_STAT TEXT-038
                  INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.
** Update RECH and RECL tables with error status and reason
                  GV_STATUS = 'M'.
                  GW_MESSAGE = GW_REJECT_REASON_TAB.
                  CLEAR: GV_STEP, GV_STEP_DESCR, GW_MSG_ID, GW_MSG_NO.
                  PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                                          LT_BAPI_GM_ITEM.
                  PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
                  CLEAR: GI_BAPI_GM_ITEM_SH.
*          CONTINUE.
                ELSE.
                  GI_BAPI_GM_ITEM_SH-MOVE_TYPE = GI_ZTMM_MARC_TRANS-BWART.  "Movement Type
                  GI_BAPI_GM_ITEM_SH-MOVE_REAS = GI_ZTMM_MARC_TRANS-GRUND. "Reason for Goods movement
                  GI_BAPI_GM_ITEM_SH-STGE_LOC  = GI_ZTMM_MARC_TRANS-SRC_LGORT.  "Storage Location
                  GI_BAPI_GM_ITEM_SH-STCK_TYPE = GI_ZTMM_MARC_TRANS-INSMK. "Stock Type
                  GI_BAPI_GM_CODE_SH-GM_CODE   = GI_ZTMM_MARC_TRANS-GM_CODE."'03'."  "GM_CODE
                ENDIF.
***Check Material is matching with IBD Material
                IF GI_LIPS1-MATNR NE GI_BAPI_GM_ITEM_SH-MATERIAL.
****Process the record to error report***
                  GW_TRAN_NO_TAB       = GI_MARC_OVG_ITEM-TRAN_NO.
                  GW_TRANS_SEQ_NO_TAB  = GI_MARC_OVG_ITEM-TRAN_SEQ_NO.
                  GW_DATA_TYPE_TAB     = GI_MARC_OVG_ITEM-DATA_TYPE.
                  GW_COMP_CODE_TAB     = GI_MARC_OVG_ITEM-COMP_CODE.
                  GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
                  GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
                  GW_SKU_TAB           = GI_MARC_OVG_ITEM-SKU.
                  GW_QTY_EXPE_TAB      = GI_MARC_OVG_ITEM-QTY_EXPE.
                  GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
                  GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
                  GW_REC_ERROR         = 'X'.
                  GW_INPUT_STATUS_TAB  = 'E'.
                  GW_ERROR_TYPE_TAB    = 'MARC'.
                  CONCATENATE TEXT-044 ':' GI_LIPS1-MATNR INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.
** Update RECH and RECL tables with error status and reason
                  GV_STATUS = 'M'.
                  GW_MESSAGE = GW_REJECT_REASON_TAB.
                  CLEAR: GV_STEP, GV_STEP_DESCR, GW_MSG_ID, GW_MSG_NO.
                  PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                                          LT_BAPI_GM_ITEM.
                  PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
                  CLEAR: GI_BAPI_GM_ITEM_SH.
                ELSE.
                  APPEND GI_BAPI_GM_ITEM_SH TO GT_BAPI_GM_ITEM_SH.
                ENDIF.
              ELSE.

                LW_GR_LINE_QTY = GW_GR_OPEN_QTY - GI_MARC_OVG_ITEM-QTY_EXPE.
                IF LW_GR_LINE_QTY GE 0.
                  GW_GR_LINE_QTY = GI_MARC_OVG_ITEM-QTY_EXPE - GW_GR_OPEN_QTY.
                  GW_GR_101_QTY = GI_MARC_OVG_ITEM-QTY_EXPE - GW_GR_LINE_QTY .
                ELSE.
                  GW_GR_LINE_QTY = 0.
                  GW_GR_101_QTY = GI_MARC_OVG_ITEM-QTY_EXPE + LW_GR_LINE_QTY .
                ENDIF.

                GW_GR_701_QTY = GI_MARC_OVG_ITEM-QTY_EXPE - GW_GR_101_QTY.

                GI_HEADER_DATA-DELIV_NUMB    = GI_LIPS1-VBELN.
                GI_HEADER_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
                GW_DELIVERY                  = GI_LIPS1-VBELN.

                GI_ITEM_DATA-DELIV_NUMB = GI_LIPS1-VBELN.
                GI_ITEM_DATA-DELIV_ITEM = GI_LIPS1-POSNR.
                GI_ITEM_DATA-MATERIAL   = GI_LIPS1-MATNR.
                GI_ITEM_DATA-DLV_QTY    = GW_GR_LINE_QTY.
                GI_ITEM_DATA-BATCH      = ' '.

                GI_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS1-UMVKZ.
                GI_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS1-UMVKN.
                GI_ITEM_DATA-SALES_UNIT         = GI_LIPS1-VRKME.
                GI_ITEM_DATA-BASE_UOM           = GI_LIPS1-MEINS.

                GI_ITEM_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
                GI_ITEM_CONTROL-DELIV_ITEM  = GI_LIPS1-POSNR.
                GI_ITEM_CONTROL-CHG_DELQTY = 'X'.

                APPEND GI_ITEM_DATA TO GT_ITEM_DATA.
                APPEND GI_ITEM_CONTROL TO GT_ITEM_CONTROL.
                CLEAR: GI_ITEM_DATA,GI_ITEM_CONTROL.

***Adding New child line item

                GI_HEADER_DATA-DELIV_NUMB    = GI_LIPS1-VBELN.
                GI_HEADER_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
                GW_DELIVERY                  = GI_LIPS1-VBELN.

                GI_ITEM_DATA-DELIV_NUMB = GI_LIPS1-VBELN.
                IF LW_POSNR IS NOT INITIAL.
                  LW_POSNR = LW_POSNR + 1.
                  GI_ITEM_DATA-DELIV_ITEM = LW_POSNR.
                  GI_ITEM_CONTROL-DELIV_ITEM = LW_POSNR.
                ELSE.
                  GI_ITEM_DATA-DELIV_ITEM = '900001'.
                  GI_ITEM_CONTROL-DELIV_ITEM = '900001'.
                ENDIF.
                GW_POSNR                = GI_ITEM_DATA-DELIV_ITEM.
                GI_ITEM_DATA-MATERIAL   = GI_LIPS1-MATNR.
                GI_ITEM_DATA-DLV_QTY    = GW_GR_101_QTY.
                GI_ITEM_DATA-BATCH      = GI_MARC_OVG_ITEM-BAPI_BATCH.
                GI_ITEM_DATA-HIERARITEM = GI_LIPS1-POSNR.
                GI_ITEM_DATA-USEHIERITM = '1'.
                GI_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS1-UMVKZ.
                GI_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS1-UMVKN.
                GI_ITEM_DATA-SALES_UNIT         = GI_LIPS1-VRKME.
                GI_ITEM_DATA-BASE_UOM           = GI_LIPS1-MEINS.

                GI_ITEM_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
                GI_ITEM_CONTROL-CHG_DELQTY = 'X'.

                IF GI_ITEM_DATA IS NOT INITIAL.
                  APPEND GI_ITEM_DATA TO GT_ITEM_DATA.
                  APPEND GI_ITEM_CONTROL TO GT_ITEM_CONTROL.
                  CLEAR: GI_ITEM_DATA,GI_ITEM_CONTROL.
                ENDIF.
*                    CLEAR:gi_lips1.
                IF GT_ITEM_DATA IS NOT INITIAL.
***    Call BAPI BAPI_INB_DELIVERY_CHANGE to Batch Split Line Items - 900001
** Begin of changes by USPRADI for New program on 08.12.2021
                  CLEAR GV_STEP.
                  GV_STEP = '20'.
                  GV_STEP_DESCR = TEXT-074.
** End of changes by USPRADI for New program on 08.12.2021
                  PERFORM CALL_IBD_CHG_BAPI.

                  IF GW_GR_101_QTY GT 0.
*****    Populate BAPI Structures for 101 Postings
                    GI_BAPI_GM_HEAD-DOC_DATE      = SY-DATUM.   "Document Date
                    GI_BAPI_GM_HEAD-PSTNG_DATE    = SY-DATUM.   "Posting Date
                    GI_BAPI_GM_HEAD-HEADER_TXT     = GI_MARC_OVG_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
                    GI_BAPI_GM_HEAD-BILL_OF_LADING = GI_MARC_OVG_ITEM-BAPI_BILL_OF_LADING. "SHIPPER_BL_NO
                    GI_BAPI_GM_HEAD-REF_DOC_NO = GI_MARC_OVG_ITEM-BAPI_REF_DOC_NO. "VEND_ID / "PO_NO
                    GI_BAPI_GM_ITEM-DELIV_NUMB_TO_SEARCH = GI_MARC_OVG_ITEM-BAPI_PO_NO. "Delivery
                    GI_BAPI_GM_ITEM-DELIV_ITEM_TO_SEARCH = GW_POSNR. "Delivery Line
                    GI_BAPI_GM_ITEM-MATERIAL  = GI_MARC_OVG_ITEM-SKU. "SKU
                    GI_BAPI_GM_ITEM-ENTRY_UOM = GI_MARC_OVG_ITEM-BAPI_ENTRY_UOM. "UOM_ABBREV
                    GI_BAPI_GM_ITEM-ENTRY_QNT = GW_GR_101_QTY. "QTY_EXPE
                    GI_BAPI_GM_ITEM-PLANT     = GI_MARC_OVG_ITEM-BAPI_PLANT.  "COMP_CODE
                    GI_BAPI_GM_ITEM-MOVE_TYPE = GI_MARC_OVG_ITEM-BAPI_MOVE_TYPE. "Movement Type
                    GI_BAPI_GM_ITEM-MOVE_REAS = GI_MARC_OVG_ITEM-BAPI_MOVE_REAS. "Reason for Goods movement
                    GI_BAPI_GM_ITEM-STGE_LOC  = GI_MARC_OVG_ITEM-BAPI_STGE_LOC.  "Storage Location
                    GI_BAPI_GM_ITEM-STCK_TYPE = GI_MARC_OVG_ITEM-BAPI_STCK_TYPE. "Stock Type
                    GI_BAPI_GM_ITEM-BATCH     = GI_MARC_OVG_ITEM-BAPI_BATCH. "LOT
                    GI_BAPI_GM_ITEM-UNLOAD_PT = GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
                    CONCATENATE GI_MARC_OVG_ITEM-BAPI_PO_NO GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO INTO GI_BAPI_GM_ITEM-ITEM_TEXT. "Item Text
                    GI_BAPI_GM_ITEM-PO_NUMBER = GI_MARC_OVG_ITEM-BAPI_PO_NUMBER. "PO
                    GI_BAPI_GM_ITEM-PO_ITEM   = GI_MARC_OVG_ITEM-BAPI_PO_ITEM.  "PO Line
                    GI_BAPI_GM_ITEM-MVT_IND   = GI_MARC_OVG_ITEM-BAPI_MVT_IND.  "Movement Indicator
                    GI_BAPI_GM_CODE-GM_CODE   = GI_MARC_OVG_ITEM-BAPI_GM_CODE.  "GM_CODE
                    APPEND GI_BAPI_GM_ITEM TO GT_BAPI_GM_ITEM.
                  ENDIF.
*****    Populate BAPI Structures for 701 Postings
                  GI_BAPI_GM_HEAD_SH-DOC_DATE      = SY-DATUM.   "Document Date
                  GI_BAPI_GM_HEAD_SH-PSTNG_DATE    = SY-DATUM.   "Posting Date
                  GI_BAPI_GM_HEAD_SH-HEADER_TXT     = GI_MARC_OVG_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
                  GI_BAPI_GM_HEAD_SH-BILL_OF_LADING = GI_MARC_OVG_ITEM-BAPI_BILL_OF_LADING. "SHIPPER_BL_NO
                  GI_BAPI_GM_HEAD_SH-REF_DOC_NO = GI_MARC_OVG_ITEM-BAPI_VENDOR_ID. "VEND_ID / "PO_NO
                  GI_BAPI_GM_ITEM_SH-MATERIAL  = GI_MARC_OVG_ITEM-SKU. "SKU
                  GI_BAPI_GM_ITEM_SH-ENTRY_UOM = GI_MARC_OVG_ITEM-BAPI_ENTRY_UOM. "UOM_ABBREV
                  GI_BAPI_GM_ITEM_SH-ENTRY_QNT = GW_GR_701_QTY. "QTY_EXPE
                  GI_BAPI_GM_ITEM_SH-PLANT     = GI_MARC_OVG_ITEM-BAPI_PLANT.  "COMP_CODE
                  GI_BAPI_GM_ITEM_SH-BATCH     = GI_MARC_OVG_ITEM-BAPI_BATCH. "LOT
                  GI_BAPI_GM_ITEM_SH-UNLOAD_PT = GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
                  CONCATENATE GI_MARC_OVG_ITEM-BAPI_PO_NO GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO INTO GI_BAPI_GM_ITEM_SH-ITEM_TEXT. "Item Text
                  GI_BAPI_GM_ITEM_SH-MVT_IND   = ' '. "Movement Indicator
                  GI_BAPI_GM_CODE_SH-GM_CODE   = GI_MARC_OVG_ITEM-BAPI_GM_CODE."'03'."  "GM_CODE
                  GI_BAPI_GM_ITEM_SH-VENDOR    = GI_MARC_OVG_ITEM-BAPI_VENDOR_ID."Vendor Account Number

*****Transformations****
                  CLEAR: GI_ZTMM_MARC_TRANS.
                  READ TABLE GT_ZTMM_MARC_TRANS INTO GI_ZTMM_MARC_TRANS WITH KEY REC_TYPE  = GI_MARC_OVG_ITEM-REC_TYPE
                                                                                 PROD_STAT = GI_MARC_OVG_ITEM-PROD_STAT
                                                                                 INDEX_NO  = '2'.
                  IF SY-SUBRC NE 0.
****Process the record to error report***
                    GW_TRAN_NO_TAB       = GI_MARC_OVG_ITEM-TRAN_NO.
                    GW_TRANS_SEQ_NO_TAB  = GI_MARC_OVG_ITEM-TRAN_SEQ_NO.
                    GW_DATA_TYPE_TAB     = GI_MARC_OVG_ITEM-DATA_TYPE.
                    GW_COMP_CODE_TAB     = GI_MARC_OVG_ITEM-COMP_CODE.
                    GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
                    GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
                    GW_SKU_TAB           = GI_MARC_OVG_ITEM-SKU.
                    GW_QTY_EXPE_TAB      = GI_MARC_OVG_ITEM-QTY_EXPE.
                    GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
                    GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
                    GW_REC_ERROR         = 'X'.
                    GW_INPUT_STATUS_TAB  = 'E'.
                    GW_ERROR_TYPE_TAB    = 'MARC'.
                    CONCATENATE TEXT-034 GV_RECTYPE TEXT-035 GW_PROD_STAT TEXT-038
                    INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.
** Update RECH and RECL tables with error status and reason
                    GV_STATUS = 'M'.
                    GW_MESSAGE = GW_REJECT_REASON_TAB.
                    CLEAR: GV_STEP, GV_STEP_DESCR, GW_MSG_ID, GW_MSG_NO.
                    PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                                            LT_BAPI_GM_ITEM.
                    PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
                    CLEAR: GI_BAPI_GM_ITEM_SH.
                  ELSE.
                    GI_BAPI_GM_ITEM_SH-MOVE_TYPE = GI_ZTMM_MARC_TRANS-BWART.  "Movement Type
                    GI_BAPI_GM_ITEM_SH-MOVE_REAS = GI_ZTMM_MARC_TRANS-GRUND. "Reason for Goods movement
                    GI_BAPI_GM_ITEM_SH-STGE_LOC  = GI_ZTMM_MARC_TRANS-SRC_LGORT.  "Storage Location
                    GI_BAPI_GM_ITEM_SH-STCK_TYPE = GI_ZTMM_MARC_TRANS-INSMK. "Stock Type
                    GI_BAPI_GM_CODE_SH-GM_CODE   = GI_ZTMM_MARC_TRANS-GM_CODE."'03'."  "GM_CODE
*                        APPEND gi_bapi_gm_item_sh TO gt_bapi_gm_item_sh.
                  ENDIF.
***Check Material is matching with IBD Material
                  IF GI_LIPS1-MATNR NE GI_BAPI_GM_ITEM_SH-MATERIAL.
****Process the record to error report***
                    GW_TRAN_NO_TAB       = GI_MARC_OVG_ITEM-TRAN_NO.
                    GW_TRANS_SEQ_NO_TAB  = GI_MARC_OVG_ITEM-TRAN_SEQ_NO.
                    GW_DATA_TYPE_TAB     = GI_MARC_OVG_ITEM-DATA_TYPE.
                    GW_COMP_CODE_TAB     = GI_MARC_OVG_ITEM-COMP_CODE.
                    GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
                    GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
                    GW_SKU_TAB           = GI_MARC_OVG_ITEM-SKU.
                    GW_QTY_EXPE_TAB      = GI_MARC_OVG_ITEM-QTY_EXPE.
                    GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
                    GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
                    GW_REC_ERROR         = 'X'.
                    GW_INPUT_STATUS_TAB  = 'E'.
                    GW_ERROR_TYPE_TAB    = 'MARC'.
                    CONCATENATE TEXT-044 ':' GI_LIPS1-MATNR INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.

** Update RECH and RECL tables with error status and reason
                    GV_STATUS = 'M'.
                    GW_MESSAGE = GW_REJECT_REASON_TAB.
                    CLEAR: GV_STEP, GV_STEP_DESCR, GW_MSG_ID, GW_MSG_NO.
                    PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                                            LT_BAPI_GM_ITEM.
                    PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
                    CLEAR: GI_BAPI_GM_ITEM_SH.
                  ELSE.
                    APPEND GI_BAPI_GM_ITEM_SH TO GT_BAPI_GM_ITEM_SH.
                  ENDIF.
                ENDIF.
              ENDIF." Open Qty = 0
            ENDIF. " Adding 900001 child line
          ENDIF.  " IBD Line Qty EQ file line Qty

        ELSE.
          CLEAR: GW_GR_QTY,GW_POS_QTY,GW_NEV_QTY,GW_GR_FULL_QTY,GW_GR_OPEN_QTY ,
                 GW_GR_LINE_QTY , GW_GR_101_QTY ,GW_GR_701_QTY ,GW_GR_MAIN_QTY,GW_GR_CHILD_QTY,LW_POSNR,
                 GI_BAPI_GM_ITEM,GI_BAPI_GM_ITEM_SH,GI_ITEM_DATA,GI_ITEM_CONTROL,
                 GI_HEADER_DATA,GI_HEADER_CONTROL,GW_DELIVERY,LI_LIPS1,GI_LIPS1,GW_POSNR.
          REFRESH: GT_VBFA,LT_LIPS1,GT_LIPS1,GT_ITEM_DATA,GT_ITEM_CONTROL,GT_BAPI_GM_ITEM,GT_BAPI_GM_ITEM_SH.
*** GR is not available so deleting the batch on inbound delivery
***Get LIPS Data
          SELECT
              VBELN
              POSNR
              MATNR
              WERKS
              LGORT
              CHARG
              LFIMG
              MEINS
              VRKME
              UMVKZ
              UMVKN
              VGBEL
              VGPOS
              XCHPF
              UMREF
              UECHA
              INSMK
              ORMNG
            INTO TABLE GT_LIPS1
            FROM LIPS
            WHERE VBELN = GI_MARC_OVG_ITEM-BAPI_PO_NO.
          IF SY-SUBRC = 0.
            LOOP AT GT_LIPS1 INTO GI_LIPS1  WHERE VBELN = GI_MARC_OVG_ITEM-BAPI_PO_NO
                                            AND   POSNR = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO
                                            OR    UECHA = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
*****Calculating GR Quamtity for Batch Addition after deletion
              IF GI_LIPS1-POSNR = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
                GW_GR_MAIN_QTY = GW_GR_MAIN_QTY + GI_LIPS1-LFIMG.
              ENDIF.
              IF GI_LIPS1-UECHA = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
                GW_GR_CHILD_QTY = GW_GR_CHILD_QTY + GI_LIPS1-LFIMG.
              ENDIF.

***  Populate Structures for BAPI_INB_DELIVERY_CHANGE to remove Batch & Batch Split Line Items
              GI_HEADER_DATA-DELIV_NUMB    = GI_LIPS1-VBELN.
              GI_HEADER_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
              GW_DELIVERY                  = GI_LIPS1-VBELN.
***    Delivery Line Item has Batch Split
              IF GI_LIPS1-XCHPF = 'X' AND GI_LIPS1-CHARG IS NOT INITIAL AND GI_LIPS1-POSNR GT 900000.
                GI_ITEM_DATA-DELIV_NUMB = GI_LIPS1-VBELN.
                GI_ITEM_DATA-DELIV_ITEM = GI_LIPS1-POSNR.
                GI_ITEM_DATA-MATERIAL   = GI_LIPS1-MATNR.
                GI_ITEM_DATA-DLV_QTY    = GI_LIPS1-LFIMG.
                GI_ITEM_DATA-BATCH      = GI_LIPS1-CHARG.
                GI_ITEM_DATA-HIERARITEM = GI_LIPS1-UECHA.
                GI_ITEM_DATA-USEHIERITM = '1'.
                GI_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS1-UMVKZ.
                GI_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS1-UMVKN.
                GI_ITEM_DATA-SALES_UNIT         = GI_LIPS1-VRKME.
                GI_ITEM_DATA-BASE_UOM           = GI_LIPS1-MEINS.

                GI_ITEM_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
                GI_ITEM_CONTROL-DELIV_ITEM = GI_LIPS1-POSNR.
                GI_ITEM_CONTROL-DEL_ITEM   = 'X'.

****    Delivery Line Item has Batch
              ELSEIF GI_LIPS1-XCHPF = 'X' AND GI_LIPS1-CHARG IS NOT INITIAL.
                GI_ITEM_DATA-DELIV_NUMB = GI_LIPS1-VBELN.
                GI_ITEM_DATA-DELIV_ITEM = GI_LIPS1-POSNR.
                GI_ITEM_DATA-MATERIAL   = GI_LIPS1-MATNR.
                GI_ITEM_DATA-DLV_QTY    = GI_LIPS1-LFIMG.
                GI_ITEM_DATA-BATCH      = ' '.
                GI_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS1-UMVKZ.
                GI_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS1-UMVKN.
                GI_ITEM_DATA-SALES_UNIT         = GI_LIPS1-VRKME.
                GI_ITEM_DATA-BASE_UOM           = GI_LIPS1-MEINS.

                GI_ITEM_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
                GI_ITEM_CONTROL-DELIV_ITEM = GI_LIPS1-POSNR.
                GI_ITEM_CONTROL-CHG_DELQTY = 'X'.

              ENDIF.
              IF GI_ITEM_DATA IS NOT INITIAL.
                APPEND GI_ITEM_DATA TO GT_ITEM_DATA.
                APPEND GI_ITEM_CONTROL TO GT_ITEM_CONTROL.
                CLEAR: GI_ITEM_DATA,GI_ITEM_CONTROL.
              ENDIF.

              CLEAR:GI_LIPS1.

            ENDLOOP.
            IF GT_ITEM_DATA IS NOT INITIAL.
***    Call BAPI BAPI_INB_DELIVERY_CHANGE to remove Batch & Batch Split Line Items
** Begin of changes by USPRADI for New program on 08.12.2021
              CLEAR GV_STEP.
              GV_STEP = '10'.
              GV_STEP_DESCR = TEXT-075.
** End of changes by USPRADI for New program on 08.12.2021
              PERFORM CALL_IBD_CHG_BAPI.
            ENDIF.
****Add Batch to Inbound Delivery
            CLEAR: GI_ITEM_DATA,GI_ITEM_CONTROL.
            REFRESH:GT_ITEM_DATA,GT_ITEM_CONTROL.
            IF GW_GR_CHILD_QTY IS NOT INITIAL.
              GW_GR_FULL_QTY = GW_GR_MAIN_QTY + GW_GR_CHILD_QTY.
            ELSE.
              GW_GR_FULL_QTY = GW_GR_MAIN_QTY.
            ENDIF.
****Check the highest child number
            LT_LIPS1[] = GT_LIPS1[].
            SORT LT_LIPS1 BY POSNR DESCENDING.
            READ TABLE LT_LIPS1 INTO LI_LIPS1 INDEX 1.
            IF SY-SUBRC = 0 AND LI_LIPS1-POSNR GT 900000.
              LW_POSNR = LI_LIPS1-POSNR.
            ENDIF.
*** Inbound delivery quantity matched to file quantity
            IF GW_GR_FULL_QTY EQ GI_MARC_OVG_ITEM-QTY_EXPE.
***Add Batch to Main Line Item
              CLEAR:GI_LIPS1.
              READ TABLE GT_LIPS1 INTO GI_LIPS1 WITH KEY VBELN = GI_MARC_OVG_ITEM-BAPI_PO_NO
                                                         POSNR = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
              IF SY-SUBRC = 0.

                GI_HEADER_DATA-DELIV_NUMB    = GI_LIPS1-VBELN.
                GI_HEADER_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
                GW_DELIVERY                  = GI_LIPS1-VBELN.

                GI_ITEM_DATA-DELIV_NUMB = GI_LIPS1-VBELN.
                GI_ITEM_DATA-DELIV_ITEM = GI_LIPS1-POSNR.
                GI_ITEM_DATA-MATERIAL   = GI_LIPS1-MATNR.
                GI_ITEM_DATA-DLV_QTY    = GI_MARC_OVG_ITEM-QTY_EXPE.
                GI_ITEM_DATA-BATCH      = GI_MARC_OVG_ITEM-BAPI_BATCH.
                GI_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS1-UMVKZ.
                GI_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS1-UMVKN.
                GI_ITEM_DATA-SALES_UNIT         = GI_LIPS1-VRKME.
                GI_ITEM_DATA-BASE_UOM           = GI_LIPS1-MEINS.

                GI_ITEM_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
                GI_ITEM_CONTROL-DELIV_ITEM = GI_LIPS1-POSNR.
                GI_ITEM_CONTROL-CHG_DELQTY = 'X'.

                IF GI_ITEM_DATA IS NOT INITIAL.
                  APPEND GI_ITEM_DATA TO GT_ITEM_DATA.
                  APPEND GI_ITEM_CONTROL TO GT_ITEM_CONTROL.
                  CLEAR: GI_ITEM_DATA,GI_ITEM_CONTROL.
                ENDIF.
                IF GT_ITEM_DATA IS NOT INITIAL.
***    Call BAPI BAPI_INB_DELIVERY_CHANGE to Batch Split Line Items - 900001
** Begin of changes by USPRADI for New program on 08.12.2021
                  CLEAR GV_STEP.
                  GV_STEP = '20'.
                  GV_STEP_DESCR = TEXT-074.
** End of changes by USPRADI for New program on 08.12.2021
                  PERFORM CALL_IBD_CHG_BAPI.

****Populate BAPI structure for 101 Posting
                  GI_BAPI_GM_HEAD-DOC_DATE      = SY-DATUM.   "Document Date
                  GI_BAPI_GM_HEAD-PSTNG_DATE    = SY-DATUM.   "Posting Date
                  GI_BAPI_GM_HEAD-HEADER_TXT     = GI_MARC_OVG_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
                  GI_BAPI_GM_HEAD-BILL_OF_LADING = GI_MARC_OVG_ITEM-BAPI_BILL_OF_LADING. "SHIPPER_BL_NO
                  GI_BAPI_GM_HEAD-REF_DOC_NO = GI_MARC_OVG_ITEM-BAPI_REF_DOC_NO. "VEND_ID / "PO_NO
                  GI_BAPI_GM_ITEM-DELIV_NUMB_TO_SEARCH = GI_MARC_OVG_ITEM-BAPI_PO_NO. "Delivery
                  GI_BAPI_GM_ITEM-DELIV_ITEM_TO_SEARCH = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO. "Delivery Line
                  GI_BAPI_GM_ITEM-MATERIAL  = GI_MARC_OVG_ITEM-SKU. "SKU
                  GI_BAPI_GM_ITEM-ENTRY_UOM = GI_MARC_OVG_ITEM-BAPI_ENTRY_UOM. "UOM_ABBREV
                  GI_BAPI_GM_ITEM-ENTRY_QNT = GI_MARC_OVG_ITEM-QTY_EXPE. "QTY_EXPE
                  GI_BAPI_GM_ITEM-PLANT     = GI_MARC_OVG_ITEM-BAPI_PLANT.  "COMP_CODE
                  GI_BAPI_GM_ITEM-MOVE_TYPE = GI_MARC_OVG_ITEM-BAPI_MOVE_TYPE. "Movement Type
                  GI_BAPI_GM_ITEM-MOVE_REAS = GI_MARC_OVG_ITEM-BAPI_MOVE_REAS. "Reason for Goods movement
                  GI_BAPI_GM_ITEM-STGE_LOC  = GI_MARC_OVG_ITEM-BAPI_STGE_LOC.  "Storage Location
                  GI_BAPI_GM_ITEM-STCK_TYPE = GI_MARC_OVG_ITEM-BAPI_STCK_TYPE. "Stock Type
                  GI_BAPI_GM_ITEM-BATCH     = GI_MARC_OVG_ITEM-BAPI_BATCH. "LOT
                  GI_BAPI_GM_ITEM-UNLOAD_PT = GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
                  CONCATENATE GI_MARC_OVG_ITEM-BAPI_PO_NO GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO INTO GI_BAPI_GM_ITEM-ITEM_TEXT."Item Text
                  GI_BAPI_GM_ITEM-PO_NUMBER = GI_MARC_OVG_ITEM-BAPI_PO_NUMBER. "PO
                  GI_BAPI_GM_ITEM-PO_ITEM   = GI_MARC_OVG_ITEM-BAPI_PO_ITEM.  "PO Line
                  GI_BAPI_GM_ITEM-MVT_IND   = GI_MARC_OVG_ITEM-BAPI_MVT_IND.  "Movement Indicator
                  GI_BAPI_GM_CODE-GM_CODE   = GI_MARC_OVG_ITEM-BAPI_GM_CODE.  "GM_CODE
                  APPEND GI_BAPI_GM_ITEM TO GT_BAPI_GM_ITEM.
                ENDIF.
              ENDIF.
***Add Batch to Child Line Item
            ELSEIF GW_GR_FULL_QTY GT GI_MARC_OVG_ITEM-QTY_EXPE.
***Add Batch to Child Line Item
***Populate BAPI structure with Child Line Item-POSNR - 900001
***Populate Structures for BAPI_INB_DELIVERY_CHANGE to add Batch Split Line Items
              CLEAR:GI_LIPS1.
              READ TABLE GT_LIPS1 INTO GI_LIPS1 WITH KEY VBELN = GI_MARC_OVG_ITEM-BAPI_PO_NO
                                                         POSNR = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
              IF SY-SUBRC = 0.
*** Changing Open Quantity in Main Line
*****  GR Open Quantity
                GW_GR_LINE_QTY = GW_GR_FULL_QTY - GI_MARC_OVG_ITEM-QTY_EXPE.

                GI_HEADER_DATA-DELIV_NUMB    = GI_LIPS1-VBELN.
                GI_HEADER_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
                GW_DELIVERY                  = GI_LIPS1-VBELN.

                GI_ITEM_DATA-DELIV_NUMB = GI_LIPS1-VBELN.
                GI_ITEM_DATA-DELIV_ITEM = GI_LIPS1-POSNR.
                GI_ITEM_DATA-MATERIAL   = GI_LIPS1-MATNR.
                GI_ITEM_DATA-DLV_QTY    = GW_GR_LINE_QTY.
                GI_ITEM_DATA-BATCH      = ' '.

                GI_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS1-UMVKZ.
                GI_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS1-UMVKN.
                GI_ITEM_DATA-SALES_UNIT         = GI_LIPS1-VRKME.
                GI_ITEM_DATA-BASE_UOM           = GI_LIPS1-MEINS.

                GI_ITEM_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
                GI_ITEM_CONTROL-DELIV_ITEM  = GI_LIPS1-POSNR.
                GI_ITEM_CONTROL-CHG_DELQTY = 'X'.

                APPEND GI_ITEM_DATA TO GT_ITEM_DATA.
                APPEND GI_ITEM_CONTROL TO GT_ITEM_CONTROL.
                CLEAR: GI_ITEM_DATA,GI_ITEM_CONTROL.

***Adding New child line item

                GI_HEADER_DATA-DELIV_NUMB    = GI_LIPS1-VBELN.
                GI_HEADER_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
                GW_DELIVERY                  = GI_LIPS1-VBELN.

                GI_ITEM_DATA-DELIV_NUMB = GI_LIPS1-VBELN.
                IF LW_POSNR IS NOT INITIAL.
                  LW_POSNR = LW_POSNR + 1.
                  GI_ITEM_DATA-DELIV_ITEM = LW_POSNR.
                  GI_ITEM_CONTROL-DELIV_ITEM = LW_POSNR.
                ELSE.
                  GI_ITEM_DATA-DELIV_ITEM = '900001'.
                  GI_ITEM_CONTROL-DELIV_ITEM = '900001'.
                ENDIF.
                GW_POSNR                = GI_ITEM_DATA-DELIV_ITEM.
                GI_ITEM_DATA-MATERIAL   = GI_LIPS1-MATNR.
                GI_ITEM_DATA-DLV_QTY    = GI_MARC_OVG_ITEM-QTY_EXPE.
                GI_ITEM_DATA-BATCH      = GI_MARC_OVG_ITEM-BAPI_BATCH.
                GI_ITEM_DATA-HIERARITEM = GI_LIPS1-POSNR.
                GI_ITEM_DATA-USEHIERITM = '1'.
                GI_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS1-UMVKZ.
                GI_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS1-UMVKN.
                GI_ITEM_DATA-SALES_UNIT         = GI_LIPS1-VRKME.
                GI_ITEM_DATA-BASE_UOM           = GI_LIPS1-MEINS.

                GI_ITEM_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.

                GI_ITEM_CONTROL-CHG_DELQTY = 'X'.

                IF GI_ITEM_DATA IS NOT INITIAL.
                  APPEND GI_ITEM_DATA TO GT_ITEM_DATA.
                  APPEND GI_ITEM_CONTROL TO GT_ITEM_CONTROL.
                  CLEAR: GI_ITEM_DATA,GI_ITEM_CONTROL.
                ENDIF.
                CLEAR:GI_LIPS1.
                IF GT_ITEM_DATA IS NOT INITIAL.
***    Call BAPI BAPI_INB_DELIVERY_CHANGE to Batch Split Line Items - 900001
** Begin of changes by USPRADI for New program on 08.12.2021
                  CLEAR GV_STEP.
                  GV_STEP = '20'.
                  GV_STEP_DESCR = TEXT-074.
** End of changes by USPRADI for New program on 08.12.2021
                  PERFORM CALL_IBD_CHG_BAPI.

****Populate BAPI structure for 101 Posting
                  GI_BAPI_GM_HEAD-DOC_DATE      = SY-DATUM.   "Document Date
                  GI_BAPI_GM_HEAD-PSTNG_DATE    = SY-DATUM.   "Posting Date
                  GI_BAPI_GM_HEAD-HEADER_TXT     = GI_MARC_OVG_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
                  GI_BAPI_GM_HEAD-BILL_OF_LADING = GI_MARC_OVG_ITEM-BAPI_BILL_OF_LADING. "SHIPPER_BL_NO
                  GI_BAPI_GM_HEAD-REF_DOC_NO = GI_MARC_OVG_ITEM-BAPI_REF_DOC_NO. "VEND_ID / "PO_NO
                  GI_BAPI_GM_ITEM-DELIV_NUMB_TO_SEARCH = GI_MARC_OVG_ITEM-BAPI_PO_NO. "Delivery
                  GI_BAPI_GM_ITEM-DELIV_ITEM_TO_SEARCH = GW_POSNR. "Delivery Line
                  GI_BAPI_GM_ITEM-MATERIAL  = GI_MARC_OVG_ITEM-SKU. "SKU
                  GI_BAPI_GM_ITEM-ENTRY_UOM = GI_MARC_OVG_ITEM-BAPI_ENTRY_UOM. "UOM_ABBREV
                  GI_BAPI_GM_ITEM-ENTRY_QNT = GI_MARC_OVG_ITEM-QTY_EXPE. "QTY_EXPE
                  GI_BAPI_GM_ITEM-PLANT     = GI_MARC_OVG_ITEM-BAPI_PLANT.  "COMP_CODE
                  GI_BAPI_GM_ITEM-MOVE_TYPE = GI_MARC_OVG_ITEM-BAPI_MOVE_TYPE. "Movement Type
                  GI_BAPI_GM_ITEM-MOVE_REAS = GI_MARC_OVG_ITEM-BAPI_MOVE_REAS. "Reason for Goods movement
                  GI_BAPI_GM_ITEM-STGE_LOC  = GI_MARC_OVG_ITEM-BAPI_STGE_LOC.  "Storage Location
                  GI_BAPI_GM_ITEM-STCK_TYPE = GI_MARC_OVG_ITEM-BAPI_STCK_TYPE. "Stock Type
                  GI_BAPI_GM_ITEM-BATCH     = GI_MARC_OVG_ITEM-BAPI_BATCH. "LOT
                  GI_BAPI_GM_ITEM-UNLOAD_PT = GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
                  CONCATENATE GI_MARC_OVG_ITEM-BAPI_PO_NO GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO INTO GI_BAPI_GM_ITEM-ITEM_TEXT."Item Text
                  GI_BAPI_GM_ITEM-PO_NUMBER = GI_MARC_OVG_ITEM-BAPI_PO_NUMBER. "PO
                  GI_BAPI_GM_ITEM-PO_ITEM   = GI_MARC_OVG_ITEM-BAPI_PO_ITEM.  "PO Line
                  GI_BAPI_GM_ITEM-MVT_IND   = GI_MARC_OVG_ITEM-BAPI_MVT_IND.  "Movement Indicator
                  GI_BAPI_GM_CODE-GM_CODE   = GI_MARC_OVG_ITEM-BAPI_GM_CODE.  "GM_CODE
                  APPEND GI_BAPI_GM_ITEM TO GT_BAPI_GM_ITEM.

                ENDIF.
              ENDIF. " Adding 900001 child line
****if file qty is more than ibd line qty post extra qty with 701 posting
            ELSEIF GW_GR_FULL_QTY LT GI_MARC_OVG_ITEM-QTY_EXPE.
***Add Batch to Child Line Item
***Populate BAPI structure with Child Line Item-POSNR - 900001
***Populate Structures for BAPI_INB_DELIVERY_CHANGE to add Batch Split Line Items
              CLEAR:GI_LIPS1.
              READ TABLE GT_LIPS1 INTO GI_LIPS1 WITH KEY VBELN = GI_MARC_OVG_ITEM-BAPI_PO_NO
                                                         POSNR = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
              IF SY-SUBRC = 0.
*** Changing Open Quantity in Main Line
*****  GR Open Quantity
                LW_GR_LINE_QTY = GW_GR_FULL_QTY - GI_MARC_OVG_ITEM-QTY_EXPE.
                IF LW_GR_LINE_QTY GE 0.
                  GW_GR_LINE_QTY = GI_MARC_OVG_ITEM-QTY_EXPE - GW_GR_FULL_QTY.
                  GW_GR_101_QTY = GI_MARC_OVG_ITEM-QTY_EXPE - GW_GR_LINE_QTY .
                ELSE.
                  GW_GR_LINE_QTY = 0.
                  GW_GR_101_QTY = GI_MARC_OVG_ITEM-QTY_EXPE + LW_GR_LINE_QTY .
                ENDIF.

                GW_GR_701_QTY = GI_MARC_OVG_ITEM-QTY_EXPE - GW_GR_101_QTY.

                GI_HEADER_DATA-DELIV_NUMB    = GI_LIPS1-VBELN.
                GI_HEADER_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
                GW_DELIVERY                  = GI_LIPS1-VBELN.

                GI_ITEM_DATA-DELIV_NUMB = GI_LIPS1-VBELN.
                GI_ITEM_DATA-DELIV_ITEM = GI_LIPS1-POSNR.
                GI_ITEM_DATA-MATERIAL   = GI_LIPS1-MATNR.
                GI_ITEM_DATA-DLV_QTY    = GW_GR_LINE_QTY.
                GI_ITEM_DATA-BATCH      = ' '.

                GI_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS1-UMVKZ.
                GI_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS1-UMVKN.
                GI_ITEM_DATA-SALES_UNIT         = GI_LIPS1-VRKME.
                GI_ITEM_DATA-BASE_UOM           = GI_LIPS1-MEINS.

                GI_ITEM_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
                GI_ITEM_CONTROL-DELIV_ITEM  = GI_LIPS1-POSNR.
                GI_ITEM_CONTROL-CHG_DELQTY = 'X'.

                APPEND GI_ITEM_DATA TO GT_ITEM_DATA.
                APPEND GI_ITEM_CONTROL TO GT_ITEM_CONTROL.
                CLEAR: GI_ITEM_DATA,GI_ITEM_CONTROL.

***Adding New child line item

                GI_HEADER_DATA-DELIV_NUMB    = GI_LIPS1-VBELN.
                GI_HEADER_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.
                GW_DELIVERY                  = GI_LIPS1-VBELN.

                GI_ITEM_DATA-DELIV_NUMB = GI_LIPS1-VBELN.
                IF LW_POSNR IS NOT INITIAL.
                  LW_POSNR = LW_POSNR + 1.
                  GI_ITEM_DATA-DELIV_ITEM = LW_POSNR.
                  GI_ITEM_CONTROL-DELIV_ITEM = LW_POSNR.
                ELSE.
                  GI_ITEM_DATA-DELIV_ITEM = '900001'.
                  GI_ITEM_CONTROL-DELIV_ITEM = '900001'.
                ENDIF.
                GW_POSNR                = GI_ITEM_DATA-DELIV_ITEM.
                GI_ITEM_DATA-MATERIAL   = GI_LIPS1-MATNR.
                GI_ITEM_DATA-DLV_QTY    = GW_GR_101_QTY.
                GI_ITEM_DATA-BATCH      = GI_MARC_OVG_ITEM-BAPI_BATCH.
                GI_ITEM_DATA-HIERARITEM = GI_LIPS1-POSNR.
                GI_ITEM_DATA-USEHIERITM = '1'.
                GI_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS1-UMVKZ.
                GI_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS1-UMVKN.
                GI_ITEM_DATA-SALES_UNIT         = GI_LIPS1-VRKME.
                GI_ITEM_DATA-BASE_UOM           = GI_LIPS1-MEINS.

                GI_ITEM_CONTROL-DELIV_NUMB = GI_LIPS1-VBELN.

                GI_ITEM_CONTROL-CHG_DELQTY = 'X'.

                IF GI_ITEM_DATA IS NOT INITIAL.
                  APPEND GI_ITEM_DATA TO GT_ITEM_DATA.
                  APPEND GI_ITEM_CONTROL TO GT_ITEM_CONTROL.
                  CLEAR: GI_ITEM_DATA,GI_ITEM_CONTROL.
                ENDIF.
                IF GT_ITEM_DATA IS NOT INITIAL.
***    Call BAPI BAPI_INB_DELIVERY_CHANGE to Batch Split Line Items - 900001
** Begin of changes by USPRADI for New program on 08.12.2021
                  CLEAR GV_STEP.
                  GV_STEP = '20'.
                  GV_STEP_DESCR = TEXT-074.
** End of changes by USPRADI for New program on 08.12.2021
                  PERFORM CALL_IBD_CHG_BAPI.

                  IF GW_GR_101_QTY GT 0.
*****    Populate BAPI Structures for 101 Postings
                    GI_BAPI_GM_HEAD-DOC_DATE      = SY-DATUM.   "Document Date
                    GI_BAPI_GM_HEAD-PSTNG_DATE    = SY-DATUM.   "Posting Date
                    GI_BAPI_GM_HEAD-HEADER_TXT     = GI_MARC_OVG_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
                    GI_BAPI_GM_HEAD-BILL_OF_LADING = GI_MARC_OVG_ITEM-BAPI_BILL_OF_LADING. "SHIPPER_BL_NO
                    GI_BAPI_GM_HEAD-REF_DOC_NO = GI_MARC_OVG_ITEM-BAPI_REF_DOC_NO. "VEND_ID / "PO_NO
                    GI_BAPI_GM_ITEM-DELIV_NUMB_TO_SEARCH = GI_MARC_OVG_ITEM-BAPI_PO_NO. "Delivery
                    GI_BAPI_GM_ITEM-DELIV_ITEM_TO_SEARCH = GW_POSNR. "Delivery Line
                    GI_BAPI_GM_ITEM-MATERIAL  = GI_MARC_OVG_ITEM-SKU. "SKU
                    GI_BAPI_GM_ITEM-ENTRY_UOM = GI_MARC_OVG_ITEM-BAPI_ENTRY_UOM. "UOM_ABBREV
                    GI_BAPI_GM_ITEM-ENTRY_QNT = GW_GR_101_QTY. "QTY_EXPE
                    GI_BAPI_GM_ITEM-PLANT     = GI_MARC_OVG_ITEM-BAPI_PLANT.  "COMP_CODE
                    GI_BAPI_GM_ITEM-MOVE_TYPE = GI_MARC_OVG_ITEM-BAPI_MOVE_TYPE. "Movement Type
                    GI_BAPI_GM_ITEM-MOVE_REAS = GI_MARC_OVG_ITEM-BAPI_MOVE_REAS. "Reason for Goods movement
                    GI_BAPI_GM_ITEM-STGE_LOC  = GI_MARC_OVG_ITEM-BAPI_STGE_LOC.  "Storage Location
                    GI_BAPI_GM_ITEM-STCK_TYPE = GI_MARC_OVG_ITEM-BAPI_STCK_TYPE. "Stock Type
                    GI_BAPI_GM_ITEM-BATCH     = GI_MARC_OVG_ITEM-BAPI_BATCH. "LOT
                    GI_BAPI_GM_ITEM-UNLOAD_PT = GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
                    CONCATENATE GI_MARC_OVG_ITEM-BAPI_PO_NO GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO INTO GI_BAPI_GM_ITEM-ITEM_TEXT."Item Text
                    GI_BAPI_GM_ITEM-PO_NUMBER = GI_MARC_OVG_ITEM-BAPI_PO_NUMBER. "PO
                    GI_BAPI_GM_ITEM-PO_ITEM   = GI_MARC_OVG_ITEM-BAPI_PO_ITEM.  "PO Line
                    GI_BAPI_GM_ITEM-MVT_IND   = GI_MARC_OVG_ITEM-BAPI_MVT_IND.  "Movement Indicator
                    GI_BAPI_GM_CODE-GM_CODE   = GI_MARC_OVG_ITEM-BAPI_GM_CODE.  "GM_CODE
                    APPEND GI_BAPI_GM_ITEM TO GT_BAPI_GM_ITEM.
                  ENDIF.
*****    Populate BAPI Structures for 701 Postings
                  GI_BAPI_GM_HEAD_SH-DOC_DATE      = SY-DATUM.   "Document Date
                  GI_BAPI_GM_HEAD_SH-PSTNG_DATE    = SY-DATUM.   "Posting Date
                  GI_BAPI_GM_HEAD_SH-HEADER_TXT     = GI_MARC_OVG_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
                  GI_BAPI_GM_HEAD_SH-BILL_OF_LADING = GI_MARC_OVG_ITEM-BAPI_BILL_OF_LADING. "SHIPPER_BL_NO
                  GI_BAPI_GM_HEAD_SH-REF_DOC_NO = GI_MARC_OVG_ITEM-BAPI_VENDOR_ID. "VEND_ID / "PO_NO
                  GI_BAPI_GM_ITEM_SH-MATERIAL  = GI_MARC_OVG_ITEM-SKU. "SKU
                  GI_BAPI_GM_ITEM_SH-ENTRY_UOM = GI_MARC_OVG_ITEM-BAPI_ENTRY_UOM. "UOM_ABBREV
                  GI_BAPI_GM_ITEM_SH-ENTRY_QNT = GW_GR_701_QTY. "QTY_EXPE
                  GI_BAPI_GM_ITEM_SH-PLANT     = GI_MARC_OVG_ITEM-BAPI_PLANT.  "COMP_CODE
                  GI_BAPI_GM_ITEM_SH-BATCH     = GI_MARC_OVG_ITEM-BAPI_BATCH. "LOT
                  GI_BAPI_GM_ITEM_SH-UNLOAD_PT = GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
                  CONCATENATE GI_MARC_OVG_ITEM-BAPI_PO_NO GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO INTO GI_BAPI_GM_ITEM_SH-ITEM_TEXT. "Item Text
                  GI_BAPI_GM_ITEM_SH-MVT_IND   = ' '.  "Movement Indicator
                  GI_BAPI_GM_CODE_SH-GM_CODE   = GI_MARC_OVG_ITEM-BAPI_GM_CODE."'03'."  "GM_CODE
                  GI_BAPI_GM_ITEM_SH-VENDOR    = GI_MARC_OVG_ITEM-BAPI_VENDOR_ID."Vendor Account Number

*****Transformations****
                  CLEAR: GI_ZTMM_MARC_TRANS.
                  READ TABLE GT_ZTMM_MARC_TRANS INTO GI_ZTMM_MARC_TRANS WITH KEY REC_TYPE  = GI_MARC_OVG_ITEM-REC_TYPE
                                                                                 PROD_STAT = GI_MARC_OVG_ITEM-PROD_STAT
                                                                                 INDEX_NO  = '2'.
                  IF SY-SUBRC NE 0.
****Process the record to error report***
                    GW_TRAN_NO_TAB       = GI_MARC_OVG_ITEM-TRAN_NO.
                    GW_TRANS_SEQ_NO_TAB  = GI_MARC_OVG_ITEM-TRAN_SEQ_NO.
                    GW_DATA_TYPE_TAB     = GI_MARC_OVG_ITEM-DATA_TYPE.
                    GW_COMP_CODE_TAB     = GI_MARC_OVG_ITEM-COMP_CODE.
                    GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
                    GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
                    GW_SKU_TAB           = GI_MARC_OVG_ITEM-SKU.
                    GW_QTY_EXPE_TAB      = GI_MARC_OVG_ITEM-QTY_EXPE.
                    GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
                    GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
                    GW_REC_ERROR         = 'X'.
                    GW_INPUT_STATUS_TAB  = 'E'.
                    GW_ERROR_TYPE_TAB    = 'MARC'.
                    CONCATENATE TEXT-034 GV_RECTYPE TEXT-035 GW_PROD_STAT TEXT-038
                    INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.
** Update RECH and RECL tables with error status and reason
                    GV_STATUS = 'M'.
                    GW_MESSAGE = GW_REJECT_REASON_TAB.
                    CLEAR: GV_STEP, GV_STEP_DESCR, GW_MSG_ID, GW_MSG_NO.
                    PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                                            LT_BAPI_GM_ITEM.
                    PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
                    CLEAR: GI_BAPI_GM_ITEM_SH.
                  ELSE.
                    GI_BAPI_GM_ITEM_SH-MOVE_TYPE = GI_ZTMM_MARC_TRANS-BWART.  "Movement Type
                    GI_BAPI_GM_ITEM_SH-MOVE_REAS = GI_ZTMM_MARC_TRANS-GRUND. "Reason for Goods movement
                    GI_BAPI_GM_ITEM_SH-STGE_LOC  = GI_ZTMM_MARC_TRANS-SRC_LGORT.  "Storage Location
                    GI_BAPI_GM_ITEM_SH-STCK_TYPE = GI_ZTMM_MARC_TRANS-INSMK. "Stock Type
                    GI_BAPI_GM_CODE_SH-GM_CODE   = GI_ZTMM_MARC_TRANS-GM_CODE."'03'."  "GM_CODE
*                        APPEND gi_bapi_gm_item_sh TO gt_bapi_gm_item_sh.
                  ENDIF.
***Check Material is matching with IBD Material
                  IF GI_LIPS1-MATNR NE GI_BAPI_GM_ITEM_SH-MATERIAL.
****Process the record to error report***
                    GW_TRAN_NO_TAB       = GI_MARC_OVG_ITEM-TRAN_NO.
                    GW_TRANS_SEQ_NO_TAB  = GI_MARC_OVG_ITEM-TRAN_SEQ_NO.
                    GW_DATA_TYPE_TAB     = GI_MARC_OVG_ITEM-DATA_TYPE.
                    GW_COMP_CODE_TAB     = GI_MARC_OVG_ITEM-COMP_CODE.
                    GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
                    GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
                    GW_SKU_TAB           = GI_MARC_OVG_ITEM-SKU.
                    GW_QTY_EXPE_TAB      = GI_MARC_OVG_ITEM-QTY_EXPE.
                    GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
                    GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
                    GW_REC_ERROR         = 'X'.
                    GW_INPUT_STATUS_TAB  = 'E'.
                    GW_ERROR_TYPE_TAB    = 'MARC'.
                    CONCATENATE TEXT-044 ':' GI_LIPS1-MATNR INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.
** Update RECH and RECL tables with error status and reason
                    GV_STATUS = 'M'.
                    GW_MESSAGE = GW_REJECT_REASON_TAB.
                    CLEAR: GV_STEP, GV_STEP_DESCR, GW_MSG_ID, GW_MSG_NO.
                    PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                                            LT_BAPI_GM_ITEM.
                    PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
                    CLEAR: GI_BAPI_GM_ITEM_SH.
                  ELSE.
                    APPEND GI_BAPI_GM_ITEM_SH TO GT_BAPI_GM_ITEM_SH.
                  ENDIF.
                ENDIF.
              ENDIF. " Adding 900001 child line
            ENDIF. " IF IBD line EQ to file line qty
          ENDIF.
        ENDIF. "" VBFA Gr is not available
      ENDIF. "" LIPS for line item is not available
    ENDIF. " IF Ovg is available
*      ENDIF. " IF PO line is initial
*    ENDIF.  " If rec type NE 10
  ENDIF.""If Batch exits
ENDFORM.                    " PROCESS_BATCH_REMOVE
*&---------------------------------------------------------------------*
*&      Form  CALC_OPEN_QTY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CALC_OPEN_QTY .
  DATA: LT_BAPI_GM_ITEM TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.
  DATA: LW_MBLNR TYPE CHAR10.
*****IF Surprise Receipts Linked or Non Linked Post directly
  IF GI_MARC_OVG_ITEM-REC_TYPE NE 10.
    IF GI_MARC_OVG_ITEM-PO_LINE_NO IS NOT INITIAL.
      CLEAR: GI_LIPS,GW_POS_QTY,GW_NEV_QTY,GW_GR_QTY,GW_GR_OPEN_QTY,GW_GR_101_QTY,GW_GR_701_QTY,GI_VBFA.
      IF GI_MARC_OVG_ITEM IS NOT INITIAL.
        SELECT SINGLE
          VBELN
          POSNR
          MATNR
          LFIMG
          FROM LIPS
          INTO GI_LIPS
          WHERE VBELN = GI_MARC_OVG_ITEM-BAPI_PO_NO
          AND   POSNR = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
        SELECT
          VBELV
          POSNV
          VBELN
          POSNN
          VBTYP_N
          RFMNG
          VBTYP_V
          PLMIN
          BWART
          MJAHR
          INTO TABLE GT_VBFA
          FROM VBFA
          WHERE VBELV = GI_MARC_OVG_ITEM-BAPI_PO_NO
          AND   POSNV = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO
          AND   VBTYP_N = 'R'
          AND   VBTYP_V = '7'
          AND  ( BWART = '101' OR BWART = '102' )
          ORDER BY PRIMARY KEY.
      ENDIF.
      CLEAR:GI_VBFA.
      LOOP AT GT_VBFA INTO GI_VBFA.
        IF GI_VBFA-BWART = '101'.
          GW_POS_QTY = GW_POS_QTY + GI_VBFA-RFMNG.
        ELSEIF GI_VBFA-BWART = '102'.
          GW_NEV_QTY = GW_NEV_QTY + GI_VBFA-RFMNG.
        ENDIF.
      ENDLOOP.
*****  GR Quantity
      GW_GR_QTY = GW_POS_QTY - GW_NEV_QTY.
*****  GR Open Quantity
      GW_GR_OPEN_QTY = GI_LIPS-LFIMG - GW_GR_QTY.
***** Compare File Quantity & GR Open Quantity
      IF GI_MARC_OVG_ITEM-QTY_EXPE LE GW_GR_OPEN_QTY.

        GI_BAPI_GM_HEAD-DOC_DATE      = SY-DATUM.   "Document Date
        GI_BAPI_GM_HEAD-PSTNG_DATE    = SY-DATUM.   "Posting Date
        GI_BAPI_GM_HEAD-HEADER_TXT     = GI_MARC_OVG_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
        GI_BAPI_GM_HEAD-BILL_OF_LADING = GI_MARC_OVG_ITEM-BAPI_BILL_OF_LADING. "SHIPPER_BL_NO
        GI_BAPI_GM_HEAD-REF_DOC_NO = GI_MARC_OVG_ITEM-BAPI_REF_DOC_NO. "VEND_ID / "PO_NO
        GI_BAPI_GM_ITEM-DELIV_NUMB_TO_SEARCH = GI_MARC_OVG_ITEM-BAPI_PO_NO. "Delivery
        GI_BAPI_GM_ITEM-DELIV_ITEM_TO_SEARCH = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO. "Delivery Line
        GI_BAPI_GM_ITEM-MATERIAL  = GI_MARC_OVG_ITEM-SKU. "SKU
        GI_BAPI_GM_ITEM-ENTRY_UOM = GI_MARC_OVG_ITEM-BAPI_ENTRY_UOM. "UOM_ABBREV
        GI_BAPI_GM_ITEM-ENTRY_QNT = GI_MARC_OVG_ITEM-QTY_EXPE. "QTY_EXPE
        GI_BAPI_GM_ITEM-PLANT     = GI_MARC_OVG_ITEM-BAPI_PLANT.  "COMP_CODE
        GI_BAPI_GM_ITEM-MOVE_TYPE = GI_MARC_OVG_ITEM-BAPI_MOVE_TYPE. "Movement Type
        GI_BAPI_GM_ITEM-MOVE_REAS = GI_MARC_OVG_ITEM-BAPI_MOVE_REAS. "Reason for Goods movement
        GI_BAPI_GM_ITEM-STGE_LOC  = GI_MARC_OVG_ITEM-BAPI_STGE_LOC.  "Storage Location
        GI_BAPI_GM_ITEM-STCK_TYPE = GI_MARC_OVG_ITEM-BAPI_STCK_TYPE. "Stock Type
        GI_BAPI_GM_ITEM-BATCH     = GI_MARC_OVG_ITEM-BAPI_BATCH. "LOT
        GI_BAPI_GM_ITEM-UNLOAD_PT = GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
        CONCATENATE GI_MARC_OVG_ITEM-BAPI_PO_NO GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO INTO GI_BAPI_GM_ITEM-ITEM_TEXT."Item Text
        GI_BAPI_GM_ITEM-PO_NUMBER = GI_MARC_OVG_ITEM-BAPI_PO_NUMBER. "PO
        GI_BAPI_GM_ITEM-PO_ITEM   = GI_MARC_OVG_ITEM-BAPI_PO_ITEM.  "PO Line
        GI_BAPI_GM_ITEM-MVT_IND   = GI_MARC_OVG_ITEM-BAPI_MVT_IND.  "Movement Indicator
        GI_BAPI_GM_CODE-GM_CODE   = GI_MARC_OVG_ITEM-BAPI_GM_CODE.  "GM_CODE
        APPEND GI_BAPI_GM_ITEM TO GT_BAPI_GM_ITEM.
      ELSEIF GI_MARC_OVG_ITEM-QTY_EXPE GT  GW_GR_OPEN_QTY.
        GW_GR_701_QTY = GI_MARC_OVG_ITEM-QTY_EXPE -  GW_GR_OPEN_QTY.
        GW_GR_101_QTY = GI_MARC_OVG_ITEM-QTY_EXPE -  GW_GR_701_QTY.
        IF GW_GR_101_QTY GT 0.
*****    Populate BAPI Structures for 101 Postings
          GI_BAPI_GM_HEAD-DOC_DATE      = SY-DATUM.   "Document Date
          GI_BAPI_GM_HEAD-PSTNG_DATE    = SY-DATUM.   "Posting Date
          GI_BAPI_GM_HEAD-HEADER_TXT     = GI_MARC_OVG_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
          GI_BAPI_GM_HEAD-BILL_OF_LADING = GI_MARC_OVG_ITEM-BAPI_BILL_OF_LADING. "SHIPPER_BL_NO
          GI_BAPI_GM_HEAD-REF_DOC_NO = GI_MARC_OVG_ITEM-BAPI_REF_DOC_NO. "VEND_ID / "PO_NO
          GI_BAPI_GM_ITEM-DELIV_NUMB_TO_SEARCH = GI_MARC_OVG_ITEM-BAPI_PO_NO. "Delivery
          GI_BAPI_GM_ITEM-DELIV_ITEM_TO_SEARCH = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO. "Delivery Line
          GI_BAPI_GM_ITEM-MATERIAL  = GI_MARC_OVG_ITEM-SKU. "SKU
          GI_BAPI_GM_ITEM-ENTRY_UOM = GI_MARC_OVG_ITEM-BAPI_ENTRY_UOM. "UOM_ABBREV
          GI_BAPI_GM_ITEM-ENTRY_QNT = GW_GR_101_QTY. "QTY_EXPE
          GI_BAPI_GM_ITEM-PLANT     = GI_MARC_OVG_ITEM-BAPI_PLANT.  "COMP_CODE
          GI_BAPI_GM_ITEM-MOVE_TYPE = GI_MARC_OVG_ITEM-BAPI_MOVE_TYPE. "Movement Type
          GI_BAPI_GM_ITEM-MOVE_REAS = GI_MARC_OVG_ITEM-BAPI_MOVE_REAS. "Reason for Goods movement
          GI_BAPI_GM_ITEM-STGE_LOC  = GI_MARC_OVG_ITEM-BAPI_STGE_LOC.  "Storage Location
          GI_BAPI_GM_ITEM-STCK_TYPE = GI_MARC_OVG_ITEM-BAPI_STCK_TYPE. "Stock Type
          GI_BAPI_GM_ITEM-BATCH     = GI_MARC_OVG_ITEM-BAPI_BATCH. "LOT
          GI_BAPI_GM_ITEM-UNLOAD_PT = GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
          CONCATENATE GI_MARC_OVG_ITEM-BAPI_PO_NO GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO INTO GI_BAPI_GM_ITEM-ITEM_TEXT.
          GI_BAPI_GM_ITEM-PO_NUMBER = GI_MARC_OVG_ITEM-BAPI_PO_NUMBER. "PO
          GI_BAPI_GM_ITEM-PO_ITEM   = GI_MARC_OVG_ITEM-BAPI_PO_ITEM.  "PO Line
          GI_BAPI_GM_ITEM-MVT_IND   = GI_MARC_OVG_ITEM-BAPI_MVT_IND.  "Movement Indicator
          GI_BAPI_GM_CODE-GM_CODE   = GI_MARC_OVG_ITEM-BAPI_GM_CODE.  "GM_CODE
          APPEND GI_BAPI_GM_ITEM TO GT_BAPI_GM_ITEM.
        ENDIF.
*****    Populate BAPI Structures for 701 Postings
        GI_BAPI_GM_HEAD_SH-DOC_DATE      = SY-DATUM.   "Document Date
        GI_BAPI_GM_HEAD_SH-PSTNG_DATE    = SY-DATUM.   "Posting Date
        GI_BAPI_GM_HEAD_SH-HEADER_TXT     = GI_MARC_OVG_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
        GI_BAPI_GM_HEAD_SH-BILL_OF_LADING = GI_MARC_OVG_ITEM-BAPI_BILL_OF_LADING. "SHIPPER_BL_NO
        GI_BAPI_GM_HEAD_SH-REF_DOC_NO = GI_MARC_OVG_ITEM-BAPI_VENDOR_ID. "VEND_ID / "PO_NO
        GI_BAPI_GM_ITEM_SH-MATERIAL  = GI_MARC_OVG_ITEM-SKU. "SKU
        GI_BAPI_GM_ITEM_SH-ENTRY_UOM = GI_MARC_OVG_ITEM-BAPI_ENTRY_UOM. "UOM_ABBREV
        GI_BAPI_GM_ITEM_SH-ENTRY_QNT = GW_GR_701_QTY. "QTY_EXPE
        GI_BAPI_GM_ITEM_SH-PLANT     = GI_MARC_OVG_ITEM-BAPI_PLANT.  "COMP_CODE
        GI_BAPI_GM_ITEM_SH-BATCH     = GI_MARC_OVG_ITEM-BAPI_BATCH. "LOT
        GI_BAPI_GM_ITEM_SH-UNLOAD_PT = GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
        CONCATENATE GI_MARC_OVG_ITEM-BAPI_PO_NO GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO INTO GI_BAPI_GM_ITEM_SH-ITEM_TEXT.
        GI_BAPI_GM_ITEM_SH-MVT_IND   = ' '.  "Movement Indicator
        GI_BAPI_GM_CODE_SH-GM_CODE   = GI_MARC_OVG_ITEM-BAPI_GM_CODE."'03'."  "GM_CODE
        GI_BAPI_GM_ITEM_SH-VENDOR    = GI_MARC_OVG_ITEM-BAPI_VENDOR_ID."Vendor Account Number

*****Transformations****
        CLEAR: GI_ZTMM_MARC_TRANS.
        READ TABLE GT_ZTMM_MARC_TRANS INTO GI_ZTMM_MARC_TRANS WITH KEY REC_TYPE  = GI_MARC_OVG_ITEM-REC_TYPE
                                                                       PROD_STAT = GI_MARC_OVG_ITEM-PROD_STAT
                                                                       INDEX_NO  = '2'.
        IF SY-SUBRC NE 0.
****Process the record to error report***
          GW_TRAN_NO_TAB       = GI_MARC_OVG_ITEM-TRAN_NO.
          GW_TRANS_SEQ_NO_TAB  = GI_MARC_OVG_ITEM-TRAN_SEQ_NO.
          GW_DATA_TYPE_TAB     = GI_MARC_OVG_ITEM-DATA_TYPE.
          GW_COMP_CODE_TAB     = GI_MARC_OVG_ITEM-COMP_CODE.
          GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
          GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
          GW_SKU_TAB           = GI_MARC_OVG_ITEM-SKU.
          GW_QTY_EXPE_TAB      = GI_MARC_OVG_ITEM-QTY_EXPE.
          GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
          GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
          GW_REC_ERROR         = 'X'.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'MARC'.
          CONCATENATE TEXT-034 GV_RECTYPE TEXT-035 GW_PROD_STAT TEXT-038
          INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.
** Update RECH and RECL tables with error status and reason
          GV_STATUS = 'M'.
          GW_MESSAGE = GW_REJECT_REASON_TAB.
          CLEAR: GV_STEP, GV_STEP_DESCR, GW_MSG_ID, GW_MSG_NO.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                                  GT_BAPI_GM_ITEM.
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
          CLEAR: GI_BAPI_GM_ITEM_SH.
*          CONTINUE.
        ELSE.
          GI_BAPI_GM_ITEM_SH-MOVE_TYPE = GI_ZTMM_MARC_TRANS-BWART.  "Movement Type
          GI_BAPI_GM_ITEM_SH-MOVE_REAS = GI_ZTMM_MARC_TRANS-GRUND. "Reason for Goods movement
          GI_BAPI_GM_ITEM_SH-STGE_LOC  = GI_ZTMM_MARC_TRANS-SRC_LGORT.  "Storage Location
          GI_BAPI_GM_ITEM_SH-STCK_TYPE = GI_ZTMM_MARC_TRANS-INSMK. "Stock Type
          GI_BAPI_GM_CODE_SH-GM_CODE   = GI_ZTMM_MARC_TRANS-GM_CODE."'03'."  "GM_CODE

        ENDIF.
***Check Material is matching with IBD Material
        IF GI_LIPS-MATNR NE GI_BAPI_GM_ITEM_SH-MATERIAL.
****Process the record to error report***
          GW_TRAN_NO_TAB       = GI_MARC_OVG_ITEM-TRAN_NO.
          GW_TRANS_SEQ_NO_TAB  = GI_MARC_OVG_ITEM-TRAN_SEQ_NO.
          GW_DATA_TYPE_TAB     = GI_MARC_OVG_ITEM-DATA_TYPE.
          GW_COMP_CODE_TAB     = GI_MARC_OVG_ITEM-COMP_CODE.
          GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
          GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
          GW_SKU_TAB           = GI_MARC_OVG_ITEM-SKU.
          GW_QTY_EXPE_TAB      = GI_MARC_OVG_ITEM-QTY_EXPE.
          GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
          GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
          GW_REC_ERROR         = 'X'.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'MARC'.
          CONCATENATE TEXT-044 ':' GI_LIPS-MATNR INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR GT_BAPI_GM_ITEM.
** Update RECH and RECL tables with error status and reason
          GV_STATUS = 'M'.
          GW_MESSAGE = GW_REJECT_REASON_TAB.
          CLEAR: GV_STEP, GV_STEP_DESCR, GW_MSG_ID, GW_MSG_NO.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                                  GT_BAPI_GM_ITEM.
          CLEAR: GI_BAPI_GM_ITEM_SH.
        ELSE.
          APPEND GI_BAPI_GM_ITEM_SH TO GT_BAPI_GM_ITEM_SH.
        ENDIF.
      ENDIF.
    ELSE.
*****    Populate BAPI Structures for 701 Postings when PO Line is Initial
      GI_BAPI_GM_HEAD_SH-DOC_DATE      = SY-DATUM.   "Document Date
      GI_BAPI_GM_HEAD_SH-PSTNG_DATE    = SY-DATUM.   "Posting Date
      GI_BAPI_GM_HEAD_SH-HEADER_TXT     = GI_MARC_OVG_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
      GI_BAPI_GM_HEAD_SH-BILL_OF_LADING = GI_MARC_OVG_ITEM-BAPI_BILL_OF_LADING. "SHIPPER_BL_NO
      GI_BAPI_GM_HEAD_SH-REF_DOC_NO = GI_MARC_OVG_ITEM-BAPI_VENDOR_ID. "VEND_ID / "PO_NO
      GI_BAPI_GM_ITEM_SH-MATERIAL  = GI_MARC_OVG_ITEM-SKU. "SKU
      GI_BAPI_GM_ITEM_SH-ENTRY_UOM = GI_MARC_OVG_ITEM-BAPI_ENTRY_UOM. "UOM_ABBREV
      GI_BAPI_GM_ITEM_SH-ENTRY_QNT = GI_MARC_OVG_ITEM-QTY_EXPE. "QTY_EXPE
      GI_BAPI_GM_ITEM_SH-PLANT     = GI_MARC_OVG_ITEM-BAPI_PLANT.  "COMP_CODE
      GI_BAPI_GM_ITEM_SH-BATCH     = GI_MARC_OVG_ITEM-BAPI_BATCH. "LOT
      GI_BAPI_GM_ITEM_SH-UNLOAD_PT = GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
      GI_BAPI_GM_ITEM_SH-ITEM_TEXT = GI_MARC_OVG_ITEM-BAPI_ITEM_TEXT. "Item Text
      GI_BAPI_GM_ITEM_SH-MVT_IND   = ' '. "Movement Indicator
      GI_BAPI_GM_CODE_SH-GM_CODE   = GI_MARC_OVG_ITEM-BAPI_GM_CODE."'03'."  "GM_CODE
      GI_BAPI_GM_ITEM_SH-VENDOR    = GI_MARC_OVG_ITEM-BAPI_VENDOR_ID."Vendor Account Number

*****Transformations****
      CLEAR: GI_ZTMM_MARC_TRANS.
      READ TABLE GT_ZTMM_MARC_TRANS INTO GI_ZTMM_MARC_TRANS WITH KEY REC_TYPE  = GI_MARC_OVG_ITEM-REC_TYPE
                                                                     PROD_STAT = GI_MARC_OVG_ITEM-PROD_STAT
                                                                     INDEX_NO  = '2'.
      IF SY-SUBRC NE 0.
****Process the record to error report***
        GW_TRAN_NO_TAB       = GI_MARC_OVG_ITEM-TRAN_NO.
        GW_TRANS_SEQ_NO_TAB  = GI_MARC_OVG_ITEM-TRAN_SEQ_NO.
        GW_DATA_TYPE_TAB     = GI_MARC_OVG_ITEM-DATA_TYPE.
        GW_COMP_CODE_TAB     = GI_MARC_OVG_ITEM-COMP_CODE.
        GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
        GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
        GW_SKU_TAB           = GI_MARC_OVG_ITEM-SKU.
        GW_QTY_EXPE_TAB      = GI_MARC_OVG_ITEM-QTY_EXPE.
        GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
        GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
        GW_REC_ERROR         = 'X'.
        GW_INPUT_STATUS_TAB  = 'E'.
        GW_ERROR_TYPE_TAB    = 'MARC'.
        CONCATENATE TEXT-034 GV_RECTYPE TEXT-035 GW_PROD_STAT TEXT-038
        INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.
** Update RECH and RECL tables with error status and reason
        GV_STATUS = 'M'.
        GW_MESSAGE = GW_REJECT_REASON_TAB.
        CLEAR: GV_STEP, GV_STEP_DESCR, GW_MSG_ID, GW_MSG_NO.
        PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                                LT_BAPI_GM_ITEM.
        CLEAR: GI_BAPI_GM_ITEM_SH.
        PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
*        CONTINUE.
      ELSE.
        GI_BAPI_GM_ITEM_SH-MOVE_TYPE = GI_ZTMM_MARC_TRANS-BWART.  "Movement Type
        GI_BAPI_GM_ITEM_SH-MOVE_REAS = GI_ZTMM_MARC_TRANS-GRUND. "Reason for Goods movement
        GI_BAPI_GM_ITEM_SH-STGE_LOC  = GI_ZTMM_MARC_TRANS-SRC_LGORT.  "Storage Location
        GI_BAPI_GM_ITEM_SH-STCK_TYPE = GI_ZTMM_MARC_TRANS-INSMK. "Stock Type
        GI_BAPI_GM_CODE_SH-GM_CODE   = GI_ZTMM_MARC_TRANS-GM_CODE."'03'."  "GM_CODE

        APPEND GI_BAPI_GM_ITEM_SH TO GT_BAPI_GM_ITEM_SH.
      ENDIF.
    ENDIF. " PO line is initial
  ELSE.
*****    Populate BAPI Structures for 701 Postings when rec type = 10
    GI_BAPI_GM_HEAD_SH-DOC_DATE      = SY-DATUM.   "Document Date
    GI_BAPI_GM_HEAD_SH-PSTNG_DATE    = SY-DATUM.   "Posting Date
    GI_BAPI_GM_HEAD_SH-HEADER_TXT     = GI_MARC_OVG_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
    GI_BAPI_GM_HEAD_SH-BILL_OF_LADING = GI_MARC_OVG_ITEM-BAPI_BILL_OF_LADING. "SHIPPER_BL_NO
    GI_BAPI_GM_HEAD_SH-REF_DOC_NO = GI_MARC_OVG_ITEM-BAPI_VENDOR_ID. "VEND_ID / "PO_NO
    GI_BAPI_GM_ITEM_SH-MATERIAL  = GI_MARC_OVG_ITEM-SKU. "SKU
    GI_BAPI_GM_ITEM_SH-ENTRY_UOM = GI_MARC_OVG_ITEM-BAPI_ENTRY_UOM. "UOM_ABBREV
    GI_BAPI_GM_ITEM_SH-ENTRY_QNT = GI_MARC_OVG_ITEM-QTY_EXPE. "QTY_EXPE
    GI_BAPI_GM_ITEM_SH-PLANT     = GI_MARC_OVG_ITEM-BAPI_PLANT.  "COMP_CODE
    GI_BAPI_GM_ITEM_SH-BATCH     = GI_MARC_OVG_ITEM-BAPI_BATCH. "LOT
    GI_BAPI_GM_ITEM_SH-UNLOAD_PT = GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
    GI_BAPI_GM_ITEM_SH-ITEM_TEXT = GI_MARC_OVG_ITEM-BAPI_ITEM_TEXT. "Item Text
    GI_BAPI_GM_ITEM_SH-MVT_IND   = ' '.  "Movement Indicator
    GI_BAPI_GM_CODE_SH-GM_CODE   = GI_MARC_OVG_ITEM-BAPI_GM_CODE."'03'."  "GM_CODE
    GI_BAPI_GM_ITEM_SH-VENDOR    = GI_MARC_OVG_ITEM-BAPI_VENDOR_ID."Vendor Account Number

*****Transformations****
    CLEAR: GI_ZTMM_MARC_TRANS.
    READ TABLE GT_ZTMM_MARC_TRANS INTO GI_ZTMM_MARC_TRANS WITH KEY REC_TYPE  = GI_MARC_OVG_ITEM-REC_TYPE
                                                                   PROD_STAT = GI_MARC_OVG_ITEM-PROD_STAT.
*                                                                   index_no  = '2'.
    IF SY-SUBRC NE 0.
****Process the record to error report***
      GW_TRAN_NO_TAB       = GI_MARC_OVG_ITEM-TRAN_NO.
      GW_TRANS_SEQ_NO_TAB  = GI_MARC_OVG_ITEM-TRAN_SEQ_NO.
      GW_DATA_TYPE_TAB     = GI_MARC_OVG_ITEM-DATA_TYPE.
      GW_COMP_CODE_TAB     = GI_MARC_OVG_ITEM-COMP_CODE.
      GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
      GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
      GW_SKU_TAB           = GI_MARC_OVG_ITEM-SKU.
      GW_QTY_EXPE_TAB      = GI_MARC_OVG_ITEM-QTY_EXPE.
      GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
      GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
      GW_REC_ERROR         = 'X'.
      GW_INPUT_STATUS_TAB  = 'E'.
      GW_ERROR_TYPE_TAB    = 'MARC'.
      CONCATENATE TEXT-034 GV_RECTYPE TEXT-035 GW_PROD_STAT TEXT-038
      INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.
** Update RECH and RECL tables with error status and reason
      GV_STATUS = 'M'.
      GW_MESSAGE = GW_REJECT_REASON_TAB.
      CLEAR: GV_STEP, GV_STEP_DESCR, GW_MSG_ID, GW_MSG_NO.
      PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                              LT_BAPI_GM_ITEM.
      PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
      CLEAR: GI_BAPI_GM_ITEM_SH.
    ELSE.
      GI_BAPI_GM_ITEM_SH-MOVE_TYPE = GI_ZTMM_MARC_TRANS-BWART.  "Movement Type
      GI_BAPI_GM_ITEM_SH-MOVE_REAS = GI_ZTMM_MARC_TRANS-GRUND. "Reason for Goods movement
      GI_BAPI_GM_ITEM_SH-STGE_LOC  = GI_ZTMM_MARC_TRANS-SRC_LGORT.  "Storage Location
      GI_BAPI_GM_ITEM_SH-STCK_TYPE = GI_ZTMM_MARC_TRANS-INSMK. "Stock Type
      GI_BAPI_GM_CODE_SH-GM_CODE   = GI_ZTMM_MARC_TRANS-GM_CODE."'03'."  "GM_CODE

      APPEND GI_BAPI_GM_ITEM_SH TO GT_BAPI_GM_ITEM_SH.
    ENDIF.
  ENDIF. "when rec type = 10
ENDFORM.                    " CALC_OPEN_QTY
*&---------------------------------------------------------------------*
*&      Form  CALL_IBD_CHG_BAPI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CALL_IBD_CHG_BAPI .
  DATA: LI_RETURN       TYPE BAPIRET2,
        LI_ITEM_DATA    TYPE BAPIIBDLVITEMCHG,
        LT_BAPI_GM_ITEM TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.
  DATA: LW_MBLNR TYPE CHAR10.
  CALL FUNCTION 'BAPI_INB_DELIVERY_CHANGE'
    EXPORTING
      HEADER_DATA    = GI_HEADER_DATA
      HEADER_CONTROL = GI_HEADER_CONTROL
      DELIVERY       = GW_DELIVERY
    TABLES
      ITEM_DATA      = GT_ITEM_DATA
      ITEM_CONTROL   = GT_ITEM_CONTROL
      RETURN         = GT_RETURN.
  IF GT_RETURN IS INITIAL.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
    GV_STATUS = 'C'.
    CLEAR: GV_STEP, GV_STEP_DESCR, GW_MESSAGE, GW_MSG_ID, GW_MSG_NO.
    PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                            LT_BAPI_GM_ITEM.
** Incase of error populate, the RECH and RECL tables with error message and step no.
  ELSE.
    READ TABLE GT_RETURN INTO LI_RETURN WITH KEY TYPE = 'E'.
    IF SY-SUBRC IS INITIAL.
      GV_STATUS = 'E'.
      PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR LI_RETURN-MESSAGE LI_RETURN-ID LI_RETURN-NUMBER LW_MBLNR
                              LT_BAPI_GM_ITEM.
    ENDIF.
  ENDIF.

ENDFORM.                    " CALL_IBD_CHG_BAPI
*&---------------------------------------------------------------------*
*&      Form  FILL_OVERAGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_OVERAGE .
  DATA: LT_BAPI_GM_ITEM TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.
  DATA: LW_MBLNR TYPE CHAR10.
  DATA: LT_LIPS1_TMP   TYPE STANDARD TABLE OF TYP_LIPS1,
        LT_LIPS1       TYPE STANDARD TABLE OF TYP_LIPS1,
        LI_LIPS1       TYPE TYP_LIPS1,
        LW_POSNR       TYPE POSNR_VL,
        GW_POSNR       TYPE POSNR_VL,
        LW_GR_LINE_QTY TYPE ERFMG.
***Get LIPS Data
  SELECT
      VBELN
      POSNR
      MATNR
      WERKS
      LGORT
      CHARG
      LFIMG
      MEINS
      VRKME
      UMVKZ
      UMVKN
      VGBEL
      VGPOS
      XCHPF
      UMREF
      UECHA
      INSMK
      ORMNG
    INTO TABLE LT_LIPS1_TMP
    FROM LIPS
    WHERE VBELN = GI_MARC_OVG_ITEM-BAPI_PO_NO
    AND ( POSNR = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO
    OR    UECHA = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO ).
  IF SY-SUBRC = 0.
    IF LT_LIPS1_TMP IS NOT INITIAL.
***Get GR documents list
      SELECT
        VBELV
        POSNV
        VBELN
        POSNN
        VBTYP_N
        RFMNG
        VBTYP_V
        PLMIN
        BWART
        MJAHR
        INTO TABLE GT_VBFA
        FROM VBFA
        FOR ALL ENTRIES IN LT_LIPS1_TMP
        WHERE VBELV = LT_LIPS1_TMP-VBELN
        AND   POSNV = LT_LIPS1_TMP-POSNR
        AND   VBTYP_N = 'R'
        AND   VBTYP_V = '7'
        AND  ( BWART = '101' OR BWART = '102' )
        ORDER BY PRIMARY KEY.
    ENDIF.
    IF SY-SUBRC = 0.
      CLEAR:GI_VBFA.
      LOOP AT GT_VBFA INTO GI_VBFA.
        IF GI_VBFA-BWART = '101'.
          GW_POS_QTY = GW_POS_QTY + GI_VBFA-RFMNG.
        ELSEIF GI_VBFA-BWART = '102'.
          GW_NEV_QTY = GW_NEV_QTY + GI_VBFA-RFMNG.
        ENDIF.
      ENDLOOP.
*****  GR Quantity
      GW_GR_QTY = GW_POS_QTY - GW_NEV_QTY.
***Get LIPS Data
      SELECT
          VBELN
          POSNR
          MATNR
          WERKS
          LGORT
          CHARG
          LFIMG
          MEINS
          VRKME
          UMVKZ
          UMVKN
          VGBEL
          VGPOS
          XCHPF
          UMREF
          UECHA
          INSMK
          ORMNG
        INTO TABLE GT_LIPS1
        FROM LIPS
        WHERE VBELN = GI_MARC_OVG_ITEM-BAPI_PO_NO.
      IF SY-SUBRC = 0.
**** Calculating overall quantity
        LOOP AT GT_LIPS1 INTO GI_LIPS1  WHERE VBELN = GI_MARC_OVG_ITEM-BAPI_PO_NO
                                        AND   POSNR = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO
                                        OR    UECHA = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
          IF GI_LIPS1-POSNR = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
            GW_GR_MAIN_QTY = GW_GR_MAIN_QTY + GI_LIPS1-LFIMG.
          ENDIF.
          IF GI_LIPS1-UECHA = GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO.
            GW_GR_CHILD_QTY = GW_GR_CHILD_QTY + GI_LIPS1-LFIMG.
          ENDIF.
        ENDLOOP.
        IF GW_GR_CHILD_QTY IS NOT INITIAL.
          GW_GR_FULL_QTY = GW_GR_MAIN_QTY + GW_GR_CHILD_QTY.
        ELSE.
          GW_GR_FULL_QTY = GW_GR_MAIN_QTY.
        ENDIF.
*****  GR Open Quantity
        GW_GR_OPEN_QTY = GW_GR_FULL_QTY - GW_GR_QTY.
      ENDIF.
    ENDIF.
  ENDIF.
** If quantity sent in the file is greater than open quantity, post extra with 701 posting
  IF  GW_GR_OPEN_QTY LT GI_MARC_OVG_ITEM-QTY_EXPE.
    GW_GR_701_QTY = GI_MARC_OVG_ITEM-QTY_EXPE -  GW_GR_OPEN_QTY.
*****    Populate BAPI Structures for 701 Postings
    GI_BAPI_GM_HEAD_SH-DOC_DATE      = SY-DATUM.   "Document Date
    GI_BAPI_GM_HEAD_SH-PSTNG_DATE    = SY-DATUM.   "Posting Date
    GI_BAPI_GM_HEAD_SH-HEADER_TXT     = GI_MARC_OVG_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
    GI_BAPI_GM_HEAD_SH-BILL_OF_LADING = GI_MARC_OVG_ITEM-BAPI_BILL_OF_LADING. "SHIPPER_BL_NO
    GI_BAPI_GM_HEAD_SH-REF_DOC_NO = GI_MARC_OVG_ITEM-BAPI_VENDOR_ID. "VEND_ID / "PO_NO
    GI_BAPI_GM_ITEM_SH-MATERIAL  = GI_MARC_OVG_ITEM-SKU. "SKU
    GI_BAPI_GM_ITEM_SH-ENTRY_UOM = GI_MARC_OVG_ITEM-BAPI_ENTRY_UOM. "UOM_ABBREV
    GI_BAPI_GM_ITEM_SH-ENTRY_QNT = GW_GR_701_QTY. "QTY_EXPE
    GI_BAPI_GM_ITEM_SH-PLANT     = GI_MARC_OVG_ITEM-BAPI_PLANT.  "COMP_CODE
    GI_BAPI_GM_ITEM_SH-BATCH     = GI_MARC_OVG_ITEM-BAPI_BATCH. "LOT
    GI_BAPI_GM_ITEM_SH-UNLOAD_PT = GI_MARC_OVG_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
    CONCATENATE GI_MARC_OVG_ITEM-BAPI_PO_NO GI_MARC_OVG_ITEM-BAPI_PO_LINE_NO INTO GI_BAPI_GM_ITEM_SH-ITEM_TEXT. "Item Text
    GI_BAPI_GM_ITEM_SH-MVT_IND   = ' '. "Movement Indicator
    GI_BAPI_GM_CODE_SH-GM_CODE   = GI_MARC_OVG_ITEM-BAPI_GM_CODE."'03'."  "GM_CODE
    GI_BAPI_GM_ITEM_SH-VENDOR    = GI_MARC_OVG_ITEM-BAPI_VENDOR_ID."Vendor Account Number

*****Transformations****
    CLEAR: GI_ZTMM_MARC_TRANS.
    READ TABLE GT_ZTMM_MARC_TRANS INTO GI_ZTMM_MARC_TRANS WITH KEY REC_TYPE  = GI_MARC_OVG_ITEM-REC_TYPE
                                                                   PROD_STAT = GI_MARC_OVG_ITEM-PROD_STAT
                                                                   INDEX_NO  = '2'.
    IF SY-SUBRC NE 0.
****Process the record to error report***
      GW_TRAN_NO_TAB       = GI_MARC_OVG_ITEM-TRAN_NO.
      GW_TRANS_SEQ_NO_TAB  = GI_MARC_OVG_ITEM-TRAN_SEQ_NO.
      GW_DATA_TYPE_TAB     = GI_MARC_OVG_ITEM-DATA_TYPE.
      GW_COMP_CODE_TAB     = GI_MARC_OVG_ITEM-COMP_CODE.
      GW_PO_NO_TAB         = GI_MARC_OVG_ITEM-PO_NO.
      GW_PO_LINE_NO_TAB    = GI_MARC_OVG_ITEM-PO_LINE_NO.
      GW_SKU_TAB           = GI_MARC_OVG_ITEM-SKU.
      GW_QTY_EXPE_TAB      = GI_MARC_OVG_ITEM-QTY_EXPE.
      GW_LP_TAB            = GI_MARC_OVG_ITEM-LP.
      GW_CART_LP_TAB       = GI_MARC_OVG_ITEM-CART_LP.
      GW_REC_ERROR         = 'X'.
      GW_INPUT_STATUS_TAB  = 'E'.
      GW_ERROR_TYPE_TAB    = 'MARC'.
      CONCATENATE TEXT-034 GV_RECTYPE TEXT-035 GW_PROD_STAT TEXT-038
      INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.
** Update RECH and RECL tables with error status and reason
      GV_STATUS = 'M'.
      GW_MESSAGE = GW_REJECT_REASON_TAB.
      GV_STEP = ' '.
      GV_STEP_DESCR = ' '.
      GW_MSG_ID = ' '.
      GW_MSG_NO = ' '.
      PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                              LT_BAPI_GM_ITEM.
      PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
      CLEAR: GI_BAPI_GM_ITEM_SH.
    ELSE.
      GI_BAPI_GM_ITEM_SH-MOVE_TYPE = GI_ZTMM_MARC_TRANS-BWART.  "Movement Type
      GI_BAPI_GM_ITEM_SH-MOVE_REAS = GI_ZTMM_MARC_TRANS-GRUND. "Reason for Goods movement
      GI_BAPI_GM_ITEM_SH-STGE_LOC  = GI_ZTMM_MARC_TRANS-SRC_LGORT.  "Storage Location
      GI_BAPI_GM_ITEM_SH-STCK_TYPE = GI_ZTMM_MARC_TRANS-INSMK. "Stock Type
      GI_BAPI_GM_CODE_SH-GM_CODE   = GI_ZTMM_MARC_TRANS-GM_CODE."'03'."  "GM_CODE
      APPEND GI_BAPI_GM_ITEM_SH TO GT_BAPI_GM_ITEM_SH.
    ENDIF.
  ENDIF.
ENDFORM.                    " FILL_OVERAGE
*&---------------------------------------------------------------------*
*&      Form  RECH_RECL_UPDATE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM RECH_RECL_UPDATE USING PV_TRAN_SEQ.
  DATA: LV_ERROR TYPE CHAR1.

  READ TABLE GT_GR_RECL WITH KEY TRAN_SEQ_NO = <GFS_RECH>-TRAN_SEQ_NO
                                 RECH_SEQ = <GFS_RECH>-RECH_SEQ
                                 PROCESS_STATUS = 'E' TRANSPORTING NO FIELDS.
  IF SY-SUBRC IS INITIAL. "Atleast one RECL has SAP error
    <GFS_RECH>-PROCESS_STATUS = 'E'.
    IF P_REPR = 'X'. "USPRADI JE3K906283 30.03.2022
      <GFS_RECH>-CHANGED_DATE = SY-DATUM.
      <GFS_RECH>-CHANGED_TIME = SY-UZEIT.
      <GFS_RECH>-CHANGED_BY = SY-UNAME.
    ENDIF. "USPRADI JE3K906283 30.03.2022
  ELSE. "All RECL s are successfully processed or with MARC errors
    LOOP AT GT_GR_RECL_MAIN INTO GI_GR_RECL WHERE TRAN_SEQ_NO = <GFS_RECH>-TRAN_SEQ_NO
                                              AND RECH_SEQ = <GFS_RECH>-RECH_SEQ.
      READ TABLE GT_GR_RECL  WITH KEY TRAN_SEQ_NO = <GFS_RECH>-TRAN_SEQ_NO
                                      RECH_SEQ   = GI_GR_RECL-RECH_SEQ
                                      RECL_SEQ = GI_GR_RECL-RECL_SEQ TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS NOT INITIAL.
** Records of RECH not considered for processing
        IF GI_GR_RECL-PROCESS_STATUS = 'E'.
          LV_ERROR = 'X'.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF LV_ERROR = 'X'.
      <GFS_RECH>-PROCESS_STATUS = 'E'.
      IF P_REPR = 'X'.
        <GFS_RECH>-CHANGED_DATE = SY-DATUM.
        <GFS_RECH>-CHANGED_TIME = SY-UZEIT.
        <GFS_RECH>-CHANGED_BY = SY-UNAME.
      ENDIF.
    ELSE.
      <GFS_RECH>-PROCESS_STATUS = 'C'.
      IF P_REPR = 'X'.
        <GFS_RECH>-CHANGED_DATE = SY-DATUM.
        <GFS_RECH>-CHANGED_TIME = SY-UZEIT.
        <GFS_RECH>-CHANGED_BY = SY-UNAME.
      ENDIF.
    ENDIF.
  ENDIF.
  MODIFY ZTMM_MARC_GR_H FROM <GFS_RECH>."gt_gr_rech.
** Begin of changes by USPRADI DE3K9A0DZ9 on 09.06.2022
*  COMMIT WORK.
  COMMIT WORK AND WAIT.
** End of changes by USPRADI DE3K9A0DZ9 on 09.06.2022
  CLEAR: LV_ERROR.

ENDFORM.                    " RECH_RECL_UPDATE
*&---------------------------------------------------------------------*
*&      Form  CUS_RET_MAIN_DEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CUS_RET_MAIN_DEL .
  DATA: LW_LIFMG        TYPE CHAR9,
        LW_MBLNR        TYPE CHAR10,
        LT_BAPI_GM_ITEM TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.

***If Material Batch managed & file contain batch
  IF GI_MARC_SPLIT_ITEM-BAPI_BATCH IS NOT INITIAL.
***Populate Delivery Change
**** Calculating overall quantity
** Begin of changes by USPRADI JE3K905848 on 15.03.2022
*    LOOP AT gt_lips1 INTO gi_lips1_tmp  WHERE vbeln = gi_marc_split_item-po_no
*                                        AND   posnr = gi_marc_split_item-po_line_no
*                                        OR    uecha = gi_marc_split_item-po_line_no.
    LOOP AT GT_LIPS1 INTO GI_LIPS1_TMP  WHERE VBELN = GV_DEL
                                          AND POSNR = GV_POSNR
                                           OR UECHA = GV_POSNR.
** End of changes by USPRADI JE3K905848 on 15.03.2022
*****Calculating OBD Quamtity for Batch Addition after deletion
      IF GI_LIPS1_TMP-POSNR = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
        GW_OBD_MAIN_QTY = GW_OBD_MAIN_QTY + GI_LIPS1_TMP-LFIMG.
      ENDIF.
      IF GI_LIPS1_TMP-UECHA = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
        GW_OBD_CHILD_QTY = GW_OBD_CHILD_QTY + GI_LIPS1_TMP-LFIMG.
      ENDIF.

***  Populate Structures for BAPI_INB_DELIVERY_CHANGE to remove Batch & Batch Split Line Items
      GI_OBD_HEADER_DATA-DELIV_NUMB    = GI_LIPS1_TMP-VBELN.
      GI_OBD_HEADER_CONTROL-DELIV_NUMB = GI_LIPS1_TMP-VBELN.
      GW_OBD_DELIVERY                  = GI_LIPS1_TMP-VBELN.
***    Delivery Line Item has Batch Split
      IF GI_LIPS1_TMP-XCHPF = 'X' AND GI_LIPS1_TMP-CHARG IS NOT INITIAL AND GI_LIPS1_TMP-POSNR GT 900000.
        GI_OBD_ITEM_DATA-DELIV_NUMB = GI_LIPS1_TMP-VBELN.
        GI_OBD_ITEM_DATA-DELIV_ITEM = GI_LIPS1_TMP-POSNR.
        GI_OBD_ITEM_DATA-MATERIAL   = GI_LIPS1_TMP-MATNR.
        GI_OBD_ITEM_DATA-DLV_QTY    = GI_LIPS1_TMP-LFIMG.
        GI_OBD_ITEM_DATA-BATCH      = GI_LIPS1_TMP-CHARG.
        GI_OBD_ITEM_DATA-HIERARITEM = GI_LIPS1_TMP-UECHA.
        GI_OBD_ITEM_DATA-USEHIERITM = '1'.
        GI_OBD_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS1_TMP-UMVKZ.
        GI_OBD_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS1_TMP-UMVKN.
        GI_OBD_ITEM_DATA-SALES_UNIT         = GI_LIPS1_TMP-VRKME.
        GI_OBD_ITEM_DATA-BASE_UOM           = GI_LIPS1_TMP-MEINS.

        GI_OBD_ITEM_CONTROL-DELIV_NUMB = GI_LIPS1_TMP-VBELN.
        GI_OBD_ITEM_CONTROL-DELIV_ITEM = GI_LIPS1_TMP-POSNR.
        GI_OBD_ITEM_CONTROL-DEL_ITEM   = 'X'.

****    Delivery Line Item has Batch
      ELSEIF GI_LIPS1_TMP-XCHPF = 'X' AND GI_LIPS1_TMP-CHARG IS NOT INITIAL.
        GI_OBD_ITEM_DATA-DELIV_NUMB = GI_LIPS1_TMP-VBELN.
        GI_OBD_ITEM_DATA-DELIV_ITEM = GI_LIPS1_TMP-POSNR.
        GI_OBD_ITEM_DATA-MATERIAL   = GI_LIPS1_TMP-MATNR.
        GI_OBD_ITEM_DATA-DLV_QTY    = GI_LIPS1_TMP-LFIMG.
        GI_OBD_ITEM_DATA-BATCH      = ' '.
        GI_OBD_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS1_TMP-UMVKZ.
        GI_OBD_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS1_TMP-UMVKN.
        GI_OBD_ITEM_DATA-SALES_UNIT         = GI_LIPS1_TMP-VRKME.
        GI_OBD_ITEM_DATA-BASE_UOM           = GI_LIPS1_TMP-MEINS.

        GI_OBD_ITEM_CONTROL-DELIV_NUMB = GI_LIPS1_TMP-VBELN.
        GI_OBD_ITEM_CONTROL-DELIV_ITEM = GI_LIPS1_TMP-POSNR.
        GI_OBD_ITEM_CONTROL-CHG_DELQTY = 'X'.

      ENDIF.

      IF GI_OBD_ITEM_DATA IS NOT INITIAL.
        APPEND GI_OBD_ITEM_DATA TO GT_OBD_ITEM_DATA.
        APPEND GI_OBD_ITEM_CONTROL TO GT_OBD_ITEM_CONTROL.
        CLEAR: GI_OBD_ITEM_DATA,GI_OBD_ITEM_CONTROL.
      ENDIF.

      CLEAR:GI_LIPS1_TMP.
    ENDLOOP.

***Error Reprocessing -- Fail Step = 10 = Batch Removal
    IF P_REPR = 'X'.
      GW_FAIL_STEP_NO = 10.
*      IF gi_marc_split_item-process_status = 'F'
*        AND gi_marc_split_item-fail_step LE gw_fail_step_no.
      IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
***    Call BAPI BAPI_OBD_DELIVERY_CHANGE to remove Batch & Batch Split Line Items
        PERFORM DELIVERY_BATCH_REMOVE.
      ELSE.
        IF GT_OBD_ITEM_DATA IS NOT INITIAL.
          GW_OBD_FLAG = 'X'.
        ELSE.
          GW_OBD_FLAG = ' '.
        ENDIF.
      ENDIF.
    ELSE.
***Delta Run
***    Call BAPI BAPI_OBD_DELIVERY_CHANGE to remove Batch & Batch Split Line Items
      PERFORM DELIVERY_BATCH_REMOVE.
    ENDIF.

    IF GW_OBD_CHILD_QTY IS NOT INITIAL.
      GW_OBD_FULL_QTY = GW_OBD_MAIN_QTY + GW_OBD_CHILD_QTY.
    ELSE.
      GW_OBD_FULL_QTY = GW_OBD_MAIN_QTY.
    ENDIF.
*    **IF main delivery Batch Removal is successful then go for Picking
    IF ( GW_OBD_FLAG = 'X' AND GT_OBD_ITEM_DATA IS NOT INITIAL )
      OR ( GW_OBD_FLAG = ' ' AND GT_OBD_ITEM_DATA IS INITIAL ).
*** Compare the LIPS Qty & GR File QTY
      IF GI_MARC_SPLIT_ITEM-QTY_EXPE GT GW_OBD_FULL_QTY.
****Process the record to error report***

        GW_REC_ERROR         = 'X'.
        GW_INPUT_STATUS_TAB  = 'E'.
        GW_ERROR_TYPE_TAB    = 'MARC'.
        LW_LIFMG             = GW_OBD_FULL_QTY .
        CONCATENATE TEXT-054 LW_LIFMG TEXT-055
        INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.

        GW_PROCESS_STATUS = 'F'.
        GW_REASON         = TEXT-054.
        GW_STATUS         = TEXT-050.
** Update RECH and RECL tables with error status and reason
        GV_STATUS = 'M'.
        GV_STEP = ' '.
        GV_STEP_DESCR = TEXT-054.
        GW_MSG_ID = ' '.
        GW_MSG_NO = ' '.
        PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_REASON GW_MSG_ID GW_MSG_NO LW_MBLNR
                            LT_BAPI_GM_ITEM.
        PERFORM SPLIT_DEL_TABLE_UPDATE.
        PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        EXIT.
      ELSE.

***Error Reprocessing -- Fail Step = 20 = Split Delivery
        IF P_REPR = 'X'.
          GW_FAIL_STEP_NO = 20.
*          IF gi_marc_split_item-process_status = 'F'
*            AND gi_marc_split_item-fail_step LE gw_fail_step_no.
          IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*Getting Next New Delivery from NR Object
            CALL FUNCTION 'NUMBER_GET_NEXT'
              EXPORTING
*               nr_range_nr             = '17'
                NR_RANGE_NR             = 'ZS'
                OBJECT                  = 'RV_BELEG'
                QUANTITY                = '1'
              IMPORTING
                NUMBER                  = GW_NEW_DELI
              EXCEPTIONS
                INTERVAL_NOT_FOUND      = 1
                NUMBER_RANGE_NOT_INTERN = 2
                OBJECT_NOT_FOUND        = 3
                QUANTITY_IS_0           = 4
                QUANTITY_IS_NOT_1       = 5
                INTERVAL_OVERFLOW       = 6
                BUFFER_OVERFLOW         = 7
                OTHERS                  = 8.
            IF SY-SUBRC NE 0.
****Process the record to error report***
              GW_SPLIT_FLAG = ' '.
              GW_CUS_RET_ERROR = 'X'.
              GW_REJECT_REASON_TAB = TEXT-056.
              GI_ERROR_FILE-REJECT_REASON = TEXT-056.
              GW_INPUT_STATUS_TAB  = 'E'.
              GW_ERROR_TYPE_TAB    = 'MARC'.
              GW_SAP_ERROR_FLAG    = 'X'.

              GW_PROCESS_STATUS = 'F'.
              GW_FAIL_STEP      = 20.
              GW_FAIL_STEP_DESC = TEXT-056.
              GW_REASON         = TEXT-056.
              GW_STATUS         = TEXT-056.
** Incase of error populate, the RECH and RECL tables with error message and step no.
              GV_STATUS = 'M'.
              GV_STEP = '20'.
              GV_STEP_DESCR = TEXT-056.
              GW_MSG_ID = ' '.
              GW_MSG_NO = ' '.
              PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_REASON GW_MSG_ID GW_MSG_NO LW_MBLNR
                                  LT_BAPI_GM_ITEM.
              PERFORM SPLIT_DEL_TABLE_UPDATE.
              PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
              PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
            ELSE.
***Populate data for Delivery Split
***Populate Item data for BAPI BAPI_OUTB_DELIVERY_SPLIT_DEC

              GW_OLD_DELI                       = GI_LIPS1-VBELN.
              GI_SPLIT_ITEMDATA-DELIV_NUMB      = GW_NEW_DELI.
              GI_SPLIT_ITEMDATA-DELIV_ITEM      = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
              GI_SPLIT_ITEMDATA-CURR_QTY        = 'B'.
              GI_SPLIT_ITEMDATA-DLV_QTY_STOCK   = GI_MARC_SPLIT_ITEM-QTY_EXPE.
              GI_SPLIT_ITEMDATA-BASE_UOM        = GI_MARC_SPLIT_ITEM-BAPI_ENTRY_UOM.
              GI_SPLIT_ITEMDATA-SALES_QTY_NUM   = GI_LIPS1-UMVKZ.
              GI_SPLIT_ITEMDATA-SALES_QTY_DENOM = GI_LIPS1-UMVKN.
              GI_SPLIT_ITEMDATA-CONVFACTOR      = GI_LIPS1-UMREF.
              APPEND GI_SPLIT_ITEMDATA TO GT_SPLIT_ITEMDATA.
              CLEAR:GI_SPLIT_ITEMDATA.
***Post BAPI for Delivery Split
              PERFORM DELIVERY_SPLIT USING GW_OLD_DELI GW_NEW_DELI GT_SPLIT_ITEMDATA GW_SPLIT_FLAG.
            ENDIF.
          ELSE.
            GW_SPLIT_FLAG = 'X'.
            GW_SPLIT_DEL_NO         =   GI_MARC_SPLIT_ITEM-SPLIT_DEL_NO.
            GW_SPLIT_DEL_LINE_NO    =   GI_MARC_SPLIT_ITEM-SPLIT_DEL_LINE_NO.
            GW_SPLIT_DEL_QTY        =   GI_MARC_SPLIT_ITEM-SPLIT_DEL_QTY.
          ENDIF.
        ELSE.
***Delta Run
*Getting Next New Delivery from NR Object
          CALL FUNCTION 'NUMBER_GET_NEXT'
            EXPORTING
***Begin of changes by 503187592 CHG0158498 DE3K9A06L1
*             nr_range_nr             = '17'
              NR_RANGE_NR             = 'ZS'
***End of changes by 503187592 CHG0158498 DE3K9A06L1
              OBJECT                  = 'RV_BELEG'
              QUANTITY                = '1'
            IMPORTING
              NUMBER                  = GW_NEW_DELI
            EXCEPTIONS
              INTERVAL_NOT_FOUND      = 1
              NUMBER_RANGE_NOT_INTERN = 2
              OBJECT_NOT_FOUND        = 3
              QUANTITY_IS_0           = 4
              QUANTITY_IS_NOT_1       = 5
              INTERVAL_OVERFLOW       = 6
              BUFFER_OVERFLOW         = 7
              OTHERS                  = 8.
          IF SY-SUBRC NE 0.
****Process the record to error report***
            GW_SPLIT_FLAG = ' '.
            GW_CUS_RET_ERROR = 'X'.
            GW_REJECT_REASON_TAB = TEXT-056.
            GI_ERROR_FILE-REJECT_REASON = TEXT-056.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'MARC'.
            GW_SAP_ERROR_FLAG    = 'X'.

            GW_PROCESS_STATUS = 'F'.
            GW_FAIL_STEP      = 20.
            GW_FAIL_STEP_DESC = TEXT-056.
            GW_REASON         = TEXT-056.
            GW_STATUS         = TEXT-056.
** Begin of changes by USPRADI for New program on 08.12.2021
** Incase of error populate, the RECH and RECL tables with error message and step no.
            GV_STATUS = 'M'.
            GV_STEP = '20'.
            GV_STEP_DESCR = TEXT-056.
            GW_MSG_ID = ' '.
            GW_MSG_NO = ' '.
            PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_REASON GW_MSG_ID GW_MSG_NO LW_MBLNR
                                LT_BAPI_GM_ITEM.
** End of changes by USPRADI for New program on 08.12.2021
            PERFORM SPLIT_DEL_TABLE_UPDATE.
            PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
            PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
          ELSE.
***Populate data for Delivery Split
***Populate Item data for BAPI BAPI_OUTB_DELIVERY_SPLIT_DEC

            GW_OLD_DELI                       = GI_LIPS1-VBELN.
            GI_SPLIT_ITEMDATA-DELIV_NUMB      = GW_NEW_DELI.
            GI_SPLIT_ITEMDATA-DELIV_ITEM      = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
            GI_SPLIT_ITEMDATA-CURR_QTY        = 'B'.
            GI_SPLIT_ITEMDATA-DLV_QTY_STOCK   = GI_MARC_SPLIT_ITEM-QTY_EXPE.
            GI_SPLIT_ITEMDATA-BASE_UOM        = GI_MARC_SPLIT_ITEM-BAPI_ENTRY_UOM.
            GI_SPLIT_ITEMDATA-SALES_QTY_NUM   = GI_LIPS1-UMVKZ.
            GI_SPLIT_ITEMDATA-SALES_QTY_DENOM = GI_LIPS1-UMVKN.
            GI_SPLIT_ITEMDATA-CONVFACTOR      = GI_LIPS1-UMREF.
            APPEND GI_SPLIT_ITEMDATA TO GT_SPLIT_ITEMDATA.
            CLEAR:GI_SPLIT_ITEMDATA.
***Post BAPI for Delivery Split
            PERFORM DELIVERY_SPLIT USING GW_OLD_DELI GW_NEW_DELI GT_SPLIT_ITEMDATA GW_SPLIT_FLAG.
          ENDIF.
        ENDIF.

***IF Delivery Split is successful then check main delivery line qty = 0 then delete line item
        IF GW_SPLIT_FLAG = 'X'.

****Error Reprocessing
          IF P_REPR = 'X'.
****Split Delivery Fail Step, New Delivery created
            IF GW_NEW_DELI IS NOT INITIAL.
              SELECT SINGLE VBELN POSNR MATNR WERKS CHARG LFIMG MEINS UMVKZ UMVKN FROM LIPS
                   INTO GI_LIPS_SPLIT WHERE VBELN = GW_NEW_DELI.
            ELSE.
              SELECT SINGLE VBELN POSNR MATNR WERKS CHARG LFIMG MEINS UMVKZ UMVKN FROM LIPS
               INTO GI_LIPS_SPLIT WHERE VBELN = GI_MARC_SPLIT_ITEM-SPLIT_DEL_NO.
            ENDIF.
          ELSE.
** Delta Run
            SELECT SINGLE VBELN POSNR MATNR WERKS CHARG LFIMG MEINS UMVKZ UMVKN FROM LIPS
              INTO GI_LIPS_SPLIT WHERE VBELN = GW_NEW_DELI.
          ENDIF.

          IF SY-SUBRC = 0.

**** Populate Batch Insertion
***  Populate Structures for BAPI_OBD_DELIVERY_CHANGE to delete main delivery line item
            GI_BATCH_HEADER_DATA-DELIV_NUMB    = GI_LIPS_SPLIT-VBELN.
            GI_BATCH_HEADER_CONTROL-DELIV_NUMB = GI_LIPS_SPLIT-VBELN.
            GW_BATCH_DELIVERY                  = GI_LIPS_SPLIT-VBELN.

            GI_BATCH_ITEM_DATA-DELIV_NUMB = GI_LIPS_SPLIT-VBELN.
            GI_BATCH_ITEM_DATA-DELIV_ITEM = GI_LIPS_SPLIT-POSNR.
            GI_BATCH_ITEM_DATA-MATERIAL   = GI_LIPS_SPLIT-MATNR.
            GI_BATCH_ITEM_DATA-DLV_QTY    = GI_LIPS_SPLIT-LFIMG.
            GI_BATCH_ITEM_DATA-BATCH      = GI_MARC_SPLIT_ITEM-BAPI_BATCH.
            GI_BATCH_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS_SPLIT-UMVKZ.
            GI_BATCH_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS_SPLIT-UMVKN.
            GI_BATCH_ITEM_DATA-SALES_UNIT         = GI_LIPS1-VRKME.
            GI_BATCH_ITEM_DATA-BASE_UOM           = GI_LIPS_SPLIT-MEINS.

            GI_BATCH_ITEM_CONTROL-DELIV_NUMB = GI_LIPS_SPLIT-VBELN.
            GI_BATCH_ITEM_CONTROL-DELIV_ITEM = GI_LIPS_SPLIT-POSNR.
            GI_BATCH_ITEM_CONTROL-CHG_DELQTY = 'X'.


            IF GI_BATCH_ITEM_DATA IS NOT INITIAL.
              APPEND GI_BATCH_ITEM_DATA TO GT_BATCH_ITEM_DATA.
              APPEND GI_BATCH_ITEM_CONTROL TO GT_BATCH_ITEM_CONTROL.
              CLEAR: GI_BATCH_ITEM_DATA,GI_BATCH_ITEM_CONTROL.
            ENDIF.

***Error Reprocessing -- Fail Step = 30 = Batch Insertion
            IF P_REPR = 'X'.
              GW_FAIL_STEP_NO = 30.
*              IF gi_marc_split_item-process_status = 'F'
*                AND gi_marc_split_item-fail_step LE gw_fail_step_no.
              IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
***    Call BAPI BAPI_OUTB_DELIVERY_CHANGE to insert batch
                PERFORM DELIVERY_BATCH_INSERTION.
              ELSE.
                GW_BATCH_FLAG = 'X'.
              ENDIF.
            ELSE.
***Delta Run
***    Call BAPI BAPI_OUTB_DELIVERY_CHANGE to insert batch
              PERFORM DELIVERY_BATCH_INSERTION.
            ENDIF.

****IF main delivery batch insertion is successfull then check main delivery line qty = 0 then delete line item
            IF GW_BATCH_FLAG = 'X'.

****Get Main delivery details
              SELECT SINGLE VBELN POSNR MATNR WERKS CHARG LFIMG MEINS UMVKZ UMVKN
                INTO GI_LIPS_DELETE
                FROM LIPS
                WHERE VBELN = GI_MARC_SPLIT_ITEM-PO_NO
                AND   POSNR = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
              IF SY-SUBRC = 0.
                IF GI_LIPS_DELETE-LFIMG EQ 0.
***  Populate Structures for BAPI_OUTB_DELIVERY_CHANGE to delete main delivery line item
                  GI_DEL_HEADER_DATA-DELIV_NUMB    = GI_LIPS_DELETE-VBELN.
                  GI_DEL_HEADER_CONTROL-DELIV_NUMB = GI_LIPS_DELETE-VBELN.
                  GW_DEL_DELIVERY                  = GI_LIPS_DELETE-VBELN.

                  GI_DEL_ITEM_DATA-DELIV_NUMB = GI_LIPS_DELETE-VBELN.
                  GI_DEL_ITEM_DATA-DELIV_ITEM = GI_LIPS_DELETE-POSNR.
                  GI_DEL_ITEM_DATA-MATERIAL   = GI_LIPS_DELETE-MATNR.
                  GI_DEL_ITEM_DATA-DLV_QTY    = GI_LIPS_DELETE-LFIMG.
                  GI_DEL_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS_DELETE-UMVKZ.
                  GI_DEL_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS_DELETE-UMVKN.

                  GI_DEL_ITEM_CONTROL-DELIV_NUMB = GI_LIPS_DELETE-VBELN.
                  GI_DEL_ITEM_CONTROL-DELIV_ITEM = GI_LIPS_DELETE-POSNR.
                  GI_DEL_ITEM_CONTROL-DEL_ITEM   = 'X'.

                  IF GI_DEL_ITEM_DATA IS NOT INITIAL.
                    APPEND GI_DEL_ITEM_DATA TO GT_DEL_ITEM_DATA.
                    APPEND GI_DEL_ITEM_CONTROL TO GT_DEL_ITEM_CONTROL.
                    CLEAR: GI_DEL_ITEM_DATA,GI_DEL_ITEM_CONTROL.
                  ENDIF.

***Error Reprocessing -- Fail Step = 40 = Delete Line Item
                  IF P_REPR = 'X'.
                    GW_FAIL_STEP_NO = 40.
*                    IF gi_marc_split_item-process_status = 'F'
*                      AND gi_marc_split_item-fail_step LE gw_fail_step_no.
                    IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
***    Call BAPI BAPI_OBD_DELIVERY_CHANGE to remove Batch & Batch Split Line Items
                      PERFORM DELIVERY_ITEM_DELETION.
                    ELSE.
                      GW_DELETE_FLAG = 'X'.
                    ENDIF.
                  ELSE.
***Delta Run
***    Call BAPI BAPI_OBD_DELIVERY_CHANGE to remove Batch & Batch Split Line Items
                    PERFORM DELIVERY_ITEM_DELETION.
                  ENDIF.
                ELSE.
                  GW_DELETE_FLAG = 'X'.
                ENDIF.
** Begin of changes by USPRADI JE3K905848 on 15.03.2022
              ELSE. "incase delivery is already deleted
                IF P_REPR = 'X' .
                  GW_DELETE_FLAG = 'X'.
                ENDIF.
** End of changes by USPRADI JE3K905848 on 15.03.2022
              ENDIF. " Main Delivery Data after Spliting

***IF main delivery line qty = 0 then delete line item success then go for picking
*                    or qty NE 0 then go for batch picking
              IF GW_DELETE_FLAG = 'X'.

*    **Populate Delivery Picking
*    *Populate Picking Header Info
                CLEAR:GI_VBKOK_WA.
                GI_VBKOK_WA-VBELN_VL = GI_LIPS_SPLIT-VBELN.
                GI_VBKOK_WA-VBELN    = GI_LIPS_SPLIT-VBELN.
*    *Populate Picking Item Info
                GI_VBPOK_TAB-VBELN_VL = GI_LIPS_SPLIT-VBELN.
                GI_VBPOK_TAB-POSNR_VL = GI_LIPS_SPLIT-POSNR.
                GI_VBPOK_TAB-VBELN    = GI_LIPS_SPLIT-VBELN.
                GI_VBPOK_TAB-POSNN    = GI_LIPS_SPLIT-POSNR.
                GI_VBPOK_TAB-MATNR    = GI_LIPS_SPLIT-MATNR.
                GI_VBPOK_TAB-CHARG    = GI_MARC_SPLIT_ITEM-BAPI_BATCH.
                GI_VBPOK_TAB-WERKS    = GI_LIPS_SPLIT-WERKS.
                GI_VBPOK_TAB-PIKMG    = GI_LIPS_SPLIT-LFIMG.
                GI_VBPOK_TAB-UMVKZ    = GI_LIPS_SPLIT-UMVKZ.
                GI_VBPOK_TAB-UMVKN    = GI_LIPS_SPLIT-UMVKN.
                APPEND GI_VBPOK_TAB TO GT_VBPOK_TAB.
                CLEAR:GI_VBPOK_TAB.

***Error Reprocessing -- Fail Step = 50 = Picking
                IF P_REPR = 'X'.
                  GW_FAIL_STEP_NO = 50.
*                  IF gi_marc_split_item-process_status = 'F'
*                    AND gi_marc_split_item-fail_step LE gw_fail_step_no.
                  IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*    *** Post BAPI for Main Delivery Picking
                    PERFORM DELIVERY_PICKING USING GI_VBKOK_WA GT_VBPOK_TAB GW_PICK_FLAG.
                  ELSE.
                    GW_PICK_FLAG = 'X'.
                  ENDIF.
                ELSE.
***  Delta Run
*    *** Post BAPI for Main Delivery Picking
                  PERFORM DELIVERY_PICKING USING GI_VBKOK_WA GT_VBPOK_TAB GW_PICK_FLAG.
                ENDIF.

*    **IF main delivery picking is successfull then go for PGI process
                IF GW_PICK_FLAG = 'X'.

*    **Populating data for PGI
                  CLEAR:GI_PGI_HEADER_DATA,GI_PGI_HEADER_CONTROL,GI_PGI_DELIVERY.
                  GI_PGI_HEADER_DATA-DELIV_NUMB     = GI_LIPS_SPLIT-VBELN.
                  GI_PGI_HEADER_CONTROL-DELIV_NUMB  = GI_LIPS_SPLIT-VBELN.
                  GI_PGI_HEADER_CONTROL-POST_GI_FLG = 'X'.
                  GI_PGI_DELIVERY                   = GI_LIPS_SPLIT-VBELN.

***Error Reprocessing -- Fail Step = 60 = PGI
                  IF P_REPR = 'X'.
                    GW_FAIL_STEP_NO = 60.
*                    IF gi_marc_split_item-process_status = 'F'
*                      AND gi_marc_split_item-fail_step LE gw_fail_step_no.
                    IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*    *** Post BAPI for Main Delivery PGI
                      PERFORM DELIVERY_PGI USING  GI_PGI_HEADER_DATA GI_PGI_HEADER_CONTROL GI_PGI_DELIVERY GW_PGI_FLAG.
                    ELSE.
                      GW_PGI_FLAG = 'X'.
                      GW_PGI_GR_NO       =  GI_MARC_SPLIT_ITEM-PGI_GR_NO.
                      GW_PGI_GR_LINE_NO  =  GI_MARC_SPLIT_ITEM-PGI_GR_LINE_NO.
                      GW_PGI_GR_QTY      =  GI_MARC_SPLIT_ITEM-PGI_GR_QTY.
                      GW_PGI_GR_YEAR     =  GI_MARC_SPLIT_ITEM-PGI_GR_YEAR.
                      GW_PGI_MOVE_TYPE   =  GI_MARC_SPLIT_ITEM-PGI_MOVE_TYPE.
                    ENDIF.
                  ELSE.
***  Delta Run
*    *** Post BAPI for Main Delivery PGI
                    PERFORM DELIVERY_PGI USING  GI_PGI_HEADER_DATA GI_PGI_HEADER_CONTROL GI_PGI_DELIVERY GW_PGI_FLAG.
                  ENDIF.

*    **IF main delivery PGI is successful then go for Inspection
                  IF GW_PGI_FLAG = 'X'.
*    **Populate data for Inspection
                    GI_INSP_DATA-DELIV_NUMB = GI_LIPS_SPLIT-VBELN.
                    GI_INSP_DATA-DELIV_ITEM = GI_LIPS_SPLIT-POSNR.
                    GI_INSP_DATA-MATERIAL   = GI_LIPS_SPLIT-MATNR.
                    GI_INSP_DATA-QUAN       = GI_LIPS_SPLIT-LFIMG.
                    GI_INSP_DATA-UNIT       = GI_LIPS_SPLIT-MEINS.
                    GI_INSP_DATA-INSPECTION_DATE = SY-DATUM.
                    GI_INSP_DATA-DEC_CODE   = GI_MARC_SPLIT_ITEM-BAPI_DEC_CODE.
                    GI_INSP_DATA-FU_CODE    = GI_MARC_SPLIT_ITEM-BAPI_FU_CODE.
                    GI_INSP_DATA-INSPECTOR  = SY-UNAME.
                    GI_INSP_DATA-LFU_RESPONSIBLE  = SY-UNAME.

                    GI_LONGTEXT-VBELN       = GI_LIPS_SPLIT-VBELN.
                    GI_LONGTEXT-POSNR       = GI_LIPS_SPLIT-POSNR.
                    GI_INSP_DATA-LONGTEXT   = GI_LONGTEXT.
                    APPEND GI_INSP_DATA TO GT_INSP_DATA.
                    CLEAR: GI_INSP_DATA.

***Error Reprocessing -- Fail Step = 70 = Inspection
                    IF P_REPR = 'X'.
                      GW_FAIL_STEP_NO = 70.
*                      IF gi_marc_split_item-process_status = 'F'
*                        AND gi_marc_split_item-fail_step LE gw_fail_step_no.
                      IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*    **Post BAPI for Main Delivery Inspection
                        PERFORM DELIVERY_INSPECTION USING GT_INSP_DATA GW_INSP_FLAG.
                      ELSE.
                        GW_INSP_FLAG = 'X'.
                        GW_INSP_NO = GI_MARC_SPLIT_ITEM-INSP_NO.
                      ENDIF.
                    ELSE.
***  Delta Run
*    **Post BAPI for Main Delivery Inspection
                      PERFORM DELIVERY_INSPECTION USING GT_INSP_DATA GW_INSP_FLAG.
                    ENDIF.

*    **IF main delivery PGI is successful then go for Inspection
                    IF GW_INSP_FLAG = 'X'.
                      IF GI_MARC_SPLIT_ITEM-PROD_STAT EQ 'RF'.
                        GW_PROCESS_STATUS = 'C'.
                        GW_STATUS = ' '.
                        PERFORM SPLIT_DEL_TABLE_UPDATE.
                        GW_INPUT_STATUS_TAB = 'C'.
                        PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
                      ELSE.
*    **Populate Data for Goods Movement

                        GI_BAPI_GM_HEAD_CUS-DOC_DATE      = SY-DATUM.   "Document Date
                        GI_BAPI_GM_HEAD_CUS-PSTNG_DATE    = SY-DATUM.   "Posting Date
                        GI_BAPI_GM_HEAD_CUS-HEADER_TXT     = GI_MARC_SPLIT_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
                        GI_BAPI_GM_HEAD_SH-BILL_OF_LADING  = GI_MARC_SPLIT_ITEM-BAPI_BILL_OF_LADING. "cusIPPER_BL_NO
                        GI_BAPI_GM_HEAD_CUS-REF_DOC_NO     = GI_MARC_SPLIT_ITEM-BAPI_VENDOR_ID. "VEND_ID / "PO_NO
                        GI_BAPI_GM_ITEM_CUS-MATERIAL  = GI_LIPS_SPLIT-MATNR."SKU
                        GI_BAPI_GM_ITEM_CUS-ENTRY_UOM = GI_LIPS_SPLIT-MEINS. "UOM_ABBREV
                        GI_BAPI_GM_ITEM_CUS-ENTRY_QNT = GI_LIPS_SPLIT-LFIMG. "QTY_EXPE
                        GI_BAPI_GM_ITEM_CUS-PLANT     = GI_LIPS_SPLIT-WERKS. "COMP_CODE
                        GI_BAPI_GM_ITEM_CUS-BATCH     = GI_MARC_SPLIT_ITEM-BAPI_BATCH. "LOT
                        GI_BAPI_GM_ITEM_CUS-UNLOAD_PT = GI_MARC_SPLIT_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
                        GI_BAPI_GM_ITEM_CUS-ITEM_TEXT = GI_MARC_SPLIT_ITEM-BAPI_ITEM_TEXT. "Item Text
                        GI_BAPI_GM_ITEM_CUS-MVT_IND   = ' '.  "Movement Indicator
*    ****Transformations****
                        GI_BAPI_GM_ITEM_CUS-MOVE_TYPE = GI_MARC_SPLIT_ITEM-BAPI_MOVE_TYPE. "Movement Type
                        GI_BAPI_GM_ITEM_CUS-MOVE_REAS = GI_MARC_SPLIT_ITEM-BAPI_MOVE_REAS. "Reason for Goods movement
                        GI_BAPI_GM_ITEM_CUS-STGE_LOC  = GI_MARC_SPLIT_ITEM-BAPI_STGE_LOC.  "Storage Location
                        GI_BAPI_GM_ITEM_CUS-MOVE_STLOC  = GI_MARC_SPLIT_ITEM-BAPI_MOVE_STLOC.  "Destination Storage Location
                        GI_BAPI_GM_ITEM_CUS-STCK_TYPE = GI_MARC_SPLIT_ITEM-BAPI_STCK_TYPE. "Stock Type
                        GI_BAPI_GM_CODE_CUS-GM_CODE   = GI_MARC_SPLIT_ITEM-BAPI_GM_CODE."'03'."  "GM_CODE

                        APPEND GI_BAPI_GM_ITEM_CUS TO GT_BAPI_GM_ITEM_CUS.
                        CLEAR:GI_BAPI_GM_ITEM_CUS.

***Error Reprocessing -- Fail Step = 80 = Goods Movement
                        IF P_REPR = 'X'.
                          GW_FAIL_STEP_NO = 80.
*                          IF gi_marc_split_item-process_status = 'F'
*                            AND gi_marc_split_item-fail_step LE gw_fail_step_no.
                          IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*    **Post BAPI for Main Delivery Inspection
                            PERFORM DELIVERY_GOODS_MVMT USING GW_GOODS_FLAG.
                          ELSE.
                            GW_GOODS_FLAG = 'X'.
                            GW_GR_NO       =   GI_MARC_SPLIT_ITEM-GR_NO.
                            GW_GR_YEAR     =   GI_MARC_SPLIT_ITEM-GR_YEAR.
                            GW_GR_LINE_NO  =  GI_MARC_SPLIT_ITEM-GR_LINE_NO.
                            GW_GR_QTY_CUS  =   GI_MARC_SPLIT_ITEM-GR_QTY.
                            GW_GR_MOVE_TYPE  =   GI_MARC_SPLIT_ITEM-GR_MOVE_TYPE.
                          ENDIF.
                        ELSE.
***  Delta Run
*    **Post BAPI for Main Delivery Inspection
                          PERFORM DELIVERY_GOODS_MVMT USING GW_GOODS_FLAG.
                        ENDIF.

*    **IF main delivery Goods Receipt is successful
                        IF GW_GOODS_FLAG = 'X'.
                        ENDIF. " Goods Receipt Success Flag
                      ENDIF. " Product Status NE 'RF'
                    ENDIF. " Inspection Success Flag
                  ENDIF. " PGI Success Flag
                ENDIF. " Picking Success Flag
              ENDIF. " Main Delivery Line Deletion Success
            ENDIF.  " Batch Insertion Success Flag
          ENDIF. " LIPS Selection
        ENDIF. " Delivery Split Success Flag
      ENDIF. " Compare LIPS & File Qty
    ENDIF. " Batch Removal Success Flag
  ELSE. " If material is not batch managed

*** Compare the LIPS Qty & GR File QTY
    IF GI_MARC_SPLIT_ITEM-QTY_EXPE GT GI_LIPS1-LFIMG.
****Process the record to error report***
      GW_REC_ERROR         = 'X'.
      GW_INPUT_STATUS_TAB  = 'E'.
      GW_ERROR_TYPE_TAB    = 'MARC'.
      LW_LIFMG             = GI_LIPS1-LFIMG .
      CONCATENATE TEXT-054 LW_LIFMG TEXT-055
      INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.

      GW_PROCESS_STATUS = 'F'.
      GW_REASON         = TEXT-054.
      GW_STATUS         = TEXT-050.
** Update RECH and RECL tables with error status and reason
      GV_STATUS = 'M'.
      GW_MESSAGE = GW_REJECT_REASON_TAB.
      PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                          LT_BAPI_GM_ITEM.
      PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
      PERFORM SPLIT_DEL_TABLE_UPDATE.
      EXIT.
    ELSE.

***Error Reprocessing -- Fail Step = 20 = Split Delivery
      IF P_REPR = 'X'.
        GW_FAIL_STEP_NO = 20.
*        IF gi_marc_split_item-process_status = 'F'
*          AND gi_marc_split_item-fail_step LE gw_fail_step_no.
        IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*Getting Next New Delivery from NR Object
          CALL FUNCTION 'NUMBER_GET_NEXT'
            EXPORTING
***Begin of changes by 503187592 CHG0158498 DE3K9A06L1
*             nr_range_nr             = '17'
              NR_RANGE_NR             = 'ZS'
***End of changes by 503187592 CHG0158498 DE3K9A06L1
              OBJECT                  = 'RV_BELEG'
              QUANTITY                = '1'
            IMPORTING
              NUMBER                  = GW_NEW_DELI
            EXCEPTIONS
              INTERVAL_NOT_FOUND      = 1
              NUMBER_RANGE_NOT_INTERN = 2
              OBJECT_NOT_FOUND        = 3
              QUANTITY_IS_0           = 4
              QUANTITY_IS_NOT_1       = 5
              INTERVAL_OVERFLOW       = 6
              BUFFER_OVERFLOW         = 7
              OTHERS                  = 8.
          IF SY-SUBRC NE 0.
****Process the record to error report***
            GW_SPLIT_FLAG = ' '.
            GW_CUS_RET_ERROR = 'X'.
            GW_REJECT_REASON_TAB = TEXT-056.
            GI_ERROR_FILE-REJECT_REASON = TEXT-056.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'MARC'.
            GW_SAP_ERROR_FLAG    = 'X'.

            GW_PROCESS_STATUS = 'F'.
            GW_FAIL_STEP      = 20.
            GW_FAIL_STEP_DESC = TEXT-056.
            GW_REASON         = TEXT-056.
            GW_STATUS         = TEXT-056.
** Begin of changes by USPRADI for New program on 08.12.2021
** Incase of error populate, the RECH and RECL tables with error message and step no.
            GV_STATUS = 'M'.
            GV_STEP = '20'.
            GV_STEP_DESCR = TEXT-056.
            GW_MSG_ID = ' '.
            GW_MSG_NO = ' '.
            PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_REASON GW_MSG_ID GW_MSG_NO LW_MBLNR
                               LT_BAPI_GM_ITEM.
** End of changes by USPRADI for New program on 08.12.2021
            PERFORM SPLIT_DEL_TABLE_UPDATE.
            PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
            PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
          ELSE.
***Populate data for Delivery Split
***Populate Item data for BAPI BAPI_OUTB_DELIVERY_SPLIT_DEC

            GW_OLD_DELI                       = GI_LIPS1-VBELN.
            GI_SPLIT_ITEMDATA-DELIV_NUMB      = GW_NEW_DELI.
            GI_SPLIT_ITEMDATA-DELIV_ITEM      = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
            GI_SPLIT_ITEMDATA-CURR_QTY        = 'B'.
            GI_SPLIT_ITEMDATA-DLV_QTY_STOCK   = GI_MARC_SPLIT_ITEM-QTY_EXPE.
            GI_SPLIT_ITEMDATA-BASE_UOM        = GI_MARC_SPLIT_ITEM-BAPI_ENTRY_UOM.
            GI_SPLIT_ITEMDATA-SALES_QTY_NUM   = GI_LIPS1-UMVKZ.
            GI_SPLIT_ITEMDATA-SALES_QTY_DENOM = GI_LIPS1-UMVKN.
            GI_SPLIT_ITEMDATA-CONVFACTOR      = GI_LIPS1-UMREF.
            APPEND GI_SPLIT_ITEMDATA TO GT_SPLIT_ITEMDATA.
            CLEAR:GI_SPLIT_ITEMDATA.

***Post BAPI for Delivery Split
            PERFORM DELIVERY_SPLIT USING GW_OLD_DELI GW_NEW_DELI GT_SPLIT_ITEMDATA GW_SPLIT_FLAG.
          ENDIF.
        ELSE.
          GW_SPLIT_FLAG = 'X'.
** Begin of changes by USPRADI  JE3K905475 on 02.03.2022
          GW_SPLIT_DEL_NO         =   GI_MARC_SPLIT_ITEM-SPLIT_DEL_NO.
          GW_SPLIT_DEL_LINE_NO    =   GI_MARC_SPLIT_ITEM-SPLIT_DEL_LINE_NO.
          GW_SPLIT_DEL_QTY        =   GI_MARC_SPLIT_ITEM-SPLIT_DEL_QTY.
** End of changes by USPRADI  JE3K905475 on 02.03.2022
        ENDIF.
      ELSE.
*Getting Next New Delivery from NR Object
        CALL FUNCTION 'NUMBER_GET_NEXT'
          EXPORTING
***Begin of changes by 503187592 CHG0158498 DE3K9A06L1
*           nr_range_nr             = '17'
            NR_RANGE_NR             = 'ZS'
***End of changes by 503187592 CHG0158498 DE3K9A06L1
            OBJECT                  = 'RV_BELEG'
            QUANTITY                = '1'
          IMPORTING
            NUMBER                  = GW_NEW_DELI
          EXCEPTIONS
            INTERVAL_NOT_FOUND      = 1
            NUMBER_RANGE_NOT_INTERN = 2
            OBJECT_NOT_FOUND        = 3
            QUANTITY_IS_0           = 4
            QUANTITY_IS_NOT_1       = 5
            INTERVAL_OVERFLOW       = 6
            BUFFER_OVERFLOW         = 7
            OTHERS                  = 8.
        IF SY-SUBRC NE 0.
****Process the record to error report***
          GW_SPLIT_FLAG = ' '.
          GW_CUS_RET_ERROR = 'X'.
          GW_REJECT_REASON_TAB = TEXT-056.
          GI_ERROR_FILE-REJECT_REASON = TEXT-056.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'MARC'.
          GW_SAP_ERROR_FLAG    = 'X'.

          GW_PROCESS_STATUS = 'F'.
          GW_FAIL_STEP      = 20.
          GW_FAIL_STEP_DESC = TEXT-056.
          GW_REASON         = TEXT-056.
          GW_STATUS         = TEXT-056.
** Begin of changes by USPRADI for New program on 08.12.2021
** Incase of error populate, the RECH and RECL tables with error message and step no.
          GV_STATUS = 'M'.
          GV_STEP = '20'.
          GV_STEP_DESCR = TEXT-056.
          GW_MSG_ID = ' '.
          GW_MSG_NO = ' '.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_REASON GW_MSG_ID GW_MSG_NO LW_MBLNR
                             LT_BAPI_GM_ITEM.
** End of changes by USPRADI for New program on 08.12.2021
          PERFORM SPLIT_DEL_TABLE_UPDATE.
          PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        ELSE.
***Populate data for Delivery Split
***Populate Item data for BAPI BAPI_OUTB_DELIVERY_SPLIT_DEC

          GW_OLD_DELI                       = GI_LIPS1-VBELN.
          GI_SPLIT_ITEMDATA-DELIV_NUMB      = GW_NEW_DELI.
          GI_SPLIT_ITEMDATA-DELIV_ITEM      = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
          GI_SPLIT_ITEMDATA-CURR_QTY        = 'B'.
          GI_SPLIT_ITEMDATA-DLV_QTY_STOCK   = GI_MARC_SPLIT_ITEM-QTY_EXPE.
          GI_SPLIT_ITEMDATA-BASE_UOM        = GI_MARC_SPLIT_ITEM-BAPI_ENTRY_UOM.
          GI_SPLIT_ITEMDATA-SALES_QTY_NUM   = GI_LIPS1-UMVKZ.
          GI_SPLIT_ITEMDATA-SALES_QTY_DENOM = GI_LIPS1-UMVKN.
          GI_SPLIT_ITEMDATA-CONVFACTOR      = GI_LIPS1-UMREF.
          APPEND GI_SPLIT_ITEMDATA TO GT_SPLIT_ITEMDATA.
          CLEAR:GI_SPLIT_ITEMDATA.

***Post BAPI for Delivery Split
          PERFORM DELIVERY_SPLIT USING GW_OLD_DELI GW_NEW_DELI GT_SPLIT_ITEMDATA GW_SPLIT_FLAG.
        ENDIF.
      ENDIF.

***IF Delivery Split is successful then check main delivery line qty = 0 then delete line item
      IF GW_SPLIT_FLAG = 'X'.
****Get Main delivery details
        SELECT SINGLE VBELN POSNR MATNR WERKS CHARG LFIMG MEINS UMVKZ UMVKN
          INTO GI_LIPS_DELETE
          FROM LIPS
          WHERE VBELN = GI_MARC_SPLIT_ITEM-PO_NO
          AND   POSNR = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
        IF SY-SUBRC = 0.
          IF GI_LIPS_DELETE-LFIMG EQ 0.
***  Populate Structures for BAPI_OBD_DELIVERY_CHANGE to delete main delivery line item
            GI_DEL_HEADER_DATA-DELIV_NUMB    = GI_LIPS_DELETE-VBELN.
            GI_DEL_HEADER_CONTROL-DELIV_NUMB = GI_LIPS_DELETE-VBELN.
            GW_DEL_DELIVERY                  = GI_LIPS_DELETE-VBELN.

            GI_DEL_ITEM_DATA-DELIV_NUMB = GI_LIPS_DELETE-VBELN.
            GI_DEL_ITEM_DATA-DELIV_ITEM = GI_LIPS_DELETE-POSNR.
            GI_DEL_ITEM_DATA-MATERIAL   = GI_LIPS_DELETE-MATNR.
            GI_DEL_ITEM_DATA-DLV_QTY    = GI_LIPS_DELETE-LFIMG.
            GI_DEL_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS_DELETE-UMVKZ.
            GI_DEL_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS_DELETE-UMVKN.

            GI_DEL_ITEM_CONTROL-DELIV_NUMB = GI_LIPS_DELETE-VBELN.
            GI_DEL_ITEM_CONTROL-DELIV_ITEM = GI_LIPS_DELETE-POSNR.
            GI_DEL_ITEM_CONTROL-DEL_ITEM   = 'X'.

            IF GI_DEL_ITEM_DATA IS NOT INITIAL.
              APPEND GI_DEL_ITEM_DATA TO GT_DEL_ITEM_DATA.
              APPEND GI_DEL_ITEM_CONTROL TO GT_DEL_ITEM_CONTROL.
              CLEAR: GI_DEL_ITEM_DATA,GI_DEL_ITEM_CONTROL.
            ENDIF.

***Error Reprocessing -- Fail Step = 40 = Delete Line Item
            IF P_REPR = 'X'.
              GW_FAIL_STEP_NO = 40.
*              IF gi_marc_split_item-process_status = 'F'
*                AND gi_marc_split_item-fail_step LE gw_fail_step_no.
              IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
***    Call BAPI BAPI_OBD_DELIVERY_CHANGE to remove Batch & Batch Split Line Items
                PERFORM DELIVERY_ITEM_DELETION.
              ELSE.
                GW_DELETE_FLAG = 'X'.
              ENDIF.
            ELSE.
***Delta Run
***    Call BAPI BAPI_OBD_DELIVERY_CHANGE to remove Batch & Batch Split Line Items
              PERFORM DELIVERY_ITEM_DELETION.
            ENDIF.
          ELSE.
            GW_DELETE_FLAG = 'X'.
          ENDIF.
** Begin of changes by USPRADI JE3K905848 on 15.03.2022
        ELSE.
          IF P_REPR = 'X'.
            GW_DELETE_FLAG = 'X'.
          ENDIF.
** End of changes by USPRADI JE3K905848 on 15.03.2022
        ENDIF. " Main Delivery Data after Spliting

***IF main delivery line qty = 0 then delete line item success then go for picking
*                    or qty NE 0 then go for picking
        IF GW_DELETE_FLAG = 'X'.

****Error Reprocessing
          IF P_REPR = 'X'.
****Split Delivery Fail Step, New Delivery created
            IF GW_NEW_DELI IS NOT INITIAL.
              SELECT SINGLE VBELN POSNR MATNR WERKS CHARG LFIMG MEINS UMVKZ UMVKN FROM LIPS
                   INTO GI_LIPS_SPLIT WHERE VBELN = GW_NEW_DELI.
            ELSE.
              SELECT SINGLE VBELN POSNR MATNR WERKS CHARG LFIMG MEINS UMVKZ UMVKN FROM LIPS
               INTO GI_LIPS_SPLIT WHERE VBELN = GI_MARC_SPLIT_ITEM-SPLIT_DEL_NO.
            ENDIF.
          ELSE.
** Delta Run
            SELECT SINGLE VBELN POSNR MATNR WERKS CHARG LFIMG MEINS UMVKZ UMVKN FROM LIPS
              INTO GI_LIPS_SPLIT WHERE VBELN = GW_NEW_DELI.
          ENDIF.

          IF SY-SUBRC = 0.
*    **Populate Delivery Picking
*    *Populate Picking Header Info
            CLEAR:GI_VBKOK_WA.
            GI_VBKOK_WA-VBELN_VL = GI_LIPS_SPLIT-VBELN.
            GI_VBKOK_WA-VBELN    = GI_LIPS_SPLIT-VBELN.
*    *Populate Picking Item Info
            GI_VBPOK_TAB-VBELN_VL = GI_LIPS_SPLIT-VBELN.
            GI_VBPOK_TAB-POSNR_VL = GI_LIPS_SPLIT-POSNR.
            GI_VBPOK_TAB-VBELN    = GI_LIPS_SPLIT-VBELN.
            GI_VBPOK_TAB-POSNN    = GI_LIPS_SPLIT-POSNR.
            GI_VBPOK_TAB-MATNR    = GI_LIPS_SPLIT-MATNR.
            GI_VBPOK_TAB-CHARG    = GI_MARC_SPLIT_ITEM-BAPI_BATCH.
            GI_VBPOK_TAB-WERKS    = GI_LIPS_SPLIT-WERKS.
            GI_VBPOK_TAB-PIKMG    = GI_LIPS_SPLIT-LFIMG.
            GI_VBPOK_TAB-UMVKZ    = GI_LIPS_SPLIT-UMVKZ.
            GI_VBPOK_TAB-UMVKN    = GI_LIPS_SPLIT-UMVKN.
            APPEND GI_VBPOK_TAB TO GT_VBPOK_TAB.
            CLEAR:GI_VBPOK_TAB.

***Error Reprocessing -- Fail Step = 50 = Picking
            IF P_REPR = 'X'.
              GW_FAIL_STEP_NO = 50.
*              IF gi_marc_split_item-process_status = 'F'
*                AND gi_marc_split_item-fail_step LE gw_fail_step_no.
              IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*    *** Post BAPI for Main Delivery Picking
                PERFORM DELIVERY_PICKING USING GI_VBKOK_WA GT_VBPOK_TAB GW_PICK_FLAG.
              ELSE.
                GW_PICK_FLAG = 'X'.
              ENDIF.
            ELSE.
***  Delta Run
*    *** Post BAPI for Main Delivery Picking
              PERFORM DELIVERY_PICKING USING GI_VBKOK_WA GT_VBPOK_TAB GW_PICK_FLAG.
            ENDIF.

*    **IF main delivery picking is successfull then go for PGI process
            IF GW_PICK_FLAG = 'X'.

*    **Populating data for PGI
              CLEAR:GI_PGI_HEADER_DATA,GI_PGI_HEADER_CONTROL,GI_PGI_DELIVERY.
              GI_PGI_HEADER_DATA-DELIV_NUMB     = GI_LIPS_SPLIT-VBELN.
              GI_PGI_HEADER_CONTROL-DELIV_NUMB  = GI_LIPS_SPLIT-VBELN.
              GI_PGI_HEADER_CONTROL-POST_GI_FLG = 'X'.
              GI_PGI_DELIVERY                   = GI_LIPS_SPLIT-VBELN.

***Error Reprocessing -- Fail Step = 60 = PGI
              IF P_REPR = 'X'.
                GW_FAIL_STEP_NO = 60.
*                IF gi_marc_split_item-process_status = 'F'
*                  AND gi_marc_split_item-fail_step LE gw_fail_step_no.
                IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*    *** Post BAPI for Main Delivery PGI
                  PERFORM DELIVERY_PGI USING  GI_PGI_HEADER_DATA GI_PGI_HEADER_CONTROL GI_PGI_DELIVERY GW_PGI_FLAG.
                ELSE.
                  GW_PGI_FLAG = 'X'.
** Begin of changes by USPRADI JE3K905475 on 02.03.2022
                  GW_PGI_GR_NO       =  GI_MARC_SPLIT_ITEM-PGI_GR_NO.
                  GW_PGI_GR_LINE_NO  =  GI_MARC_SPLIT_ITEM-PGI_GR_LINE_NO.
                  GW_PGI_GR_QTY      =  GI_MARC_SPLIT_ITEM-PGI_GR_QTY.
                  GW_PGI_GR_YEAR     =  GI_MARC_SPLIT_ITEM-PGI_GR_YEAR.
                  GW_PGI_MOVE_TYPE   =  GI_MARC_SPLIT_ITEM-PGI_MOVE_TYPE.
** End of changes by USPRADI JE3K905475 on 02.03.2022
                ENDIF.
              ELSE.
***  Delta Run
*    *** Post BAPI for Main Delivery PGI
                PERFORM DELIVERY_PGI USING  GI_PGI_HEADER_DATA GI_PGI_HEADER_CONTROL GI_PGI_DELIVERY GW_PGI_FLAG.
              ENDIF.

*    **IF main delivery PGI is successful then go for Inspection
              IF GW_PGI_FLAG = 'X'.
*    **Populate data for Inspection
                GI_INSP_DATA-DELIV_NUMB = GI_LIPS_SPLIT-VBELN.
                GI_INSP_DATA-DELIV_ITEM = GI_LIPS_SPLIT-POSNR.
                GI_INSP_DATA-MATERIAL   = GI_LIPS_SPLIT-MATNR.
                GI_INSP_DATA-QUAN       = GI_LIPS_SPLIT-LFIMG.
                GI_INSP_DATA-UNIT       = GI_LIPS_SPLIT-MEINS.
                GI_INSP_DATA-INSPECTION_DATE = SY-DATUM.
                GI_INSP_DATA-DEC_CODE   = GI_MARC_SPLIT_ITEM-BAPI_DEC_CODE.
                GI_INSP_DATA-FU_CODE    = GI_MARC_SPLIT_ITEM-BAPI_FU_CODE.
                GI_INSP_DATA-INSPECTOR  = SY-UNAME.
                GI_INSP_DATA-LFU_RESPONSIBLE  = SY-UNAME.

                GI_LONGTEXT-VBELN       = GI_LIPS_SPLIT-VBELN.
                GI_LONGTEXT-POSNR       = GI_LIPS_SPLIT-POSNR.
                GI_INSP_DATA-LONGTEXT   = GI_LONGTEXT.
                APPEND GI_INSP_DATA TO GT_INSP_DATA.
                CLEAR: GI_INSP_DATA.

***Error Reprocessing -- Fail Step = 70 = Inspection
                IF P_REPR = 'X'.
                  GW_FAIL_STEP_NO = 70.
                  IF GI_MARC_SPLIT_ITEM-PROCESS_STATUS = 'F'
                    AND GI_MARC_SPLIT_ITEM-FAIL_STEP LE GW_FAIL_STEP_NO.
*    **Post BAPI for Main Delivery Inspection
                    PERFORM DELIVERY_INSPECTION USING GT_INSP_DATA GW_INSP_FLAG.
                  ELSE.
                    GW_INSP_FLAG = 'X'.
** Begin of changes by USPRADI JE3K905475 on 02.03.2022
                    GW_INSP_NO = GI_MARC_SPLIT_ITEM-INSP_NO.
** End of changes by USPRADI JE3K905475 on 02.03.2022
                  ENDIF.
                ELSE.
***  Delta Run
*    **Post BAPI for Main Delivery Inspection
                  PERFORM DELIVERY_INSPECTION USING GT_INSP_DATA GW_INSP_FLAG.
                ENDIF.

*    **IF main delivery PGI is successful then go for Inspection
                IF GW_INSP_FLAG = 'X'.
                  IF GI_MARC_SPLIT_ITEM-PROD_STAT EQ 'RF'.
                    GW_PROCESS_STATUS = 'C'.
                    GW_STATUS = ' '.
                    PERFORM SPLIT_DEL_TABLE_UPDATE.
                    GW_INPUT_STATUS_TAB = 'C'.
                    PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
                  ELSE.
*    **Populate Data for Goods Movement
                    GI_BAPI_GM_HEAD_CUS-DOC_DATE      = SY-DATUM.   "Document Date
                    GI_BAPI_GM_HEAD_CUS-PSTNG_DATE    = SY-DATUM.   "Posting Date
                    GI_BAPI_GM_HEAD_CUS-HEADER_TXT     = GI_MARC_SPLIT_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
                    GI_BAPI_GM_HEAD_SH-BILL_OF_LADING  = GI_MARC_SPLIT_ITEM-BAPI_BILL_OF_LADING. "cusIPPER_BL_NO
                    GI_BAPI_GM_HEAD_CUS-REF_DOC_NO     = GI_MARC_SPLIT_ITEM-BAPI_VENDOR_ID. "VEND_ID / "PO_NO
                    GI_BAPI_GM_ITEM_CUS-MATERIAL  = GI_LIPS_SPLIT-MATNR. "SKU
                    GI_BAPI_GM_ITEM_CUS-ENTRY_UOM = GI_LIPS_SPLIT-MEINS.. "UOM_ABBREV
                    GI_BAPI_GM_ITEM_CUS-ENTRY_QNT = GI_LIPS_SPLIT-LFIMG. "QTY_EXPE
                    GI_BAPI_GM_ITEM_CUS-PLANT     = GI_LIPS_SPLIT-WERKS. "COMP_CODE
                    GI_BAPI_GM_ITEM_CUS-BATCH     = GI_MARC_SPLIT_ITEM-BAPI_BATCH. "LOT
                    GI_BAPI_GM_ITEM_CUS-UNLOAD_PT = GI_MARC_SPLIT_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
                    GI_BAPI_GM_ITEM_CUS-ITEM_TEXT = GI_MARC_SPLIT_ITEM-BAPI_ITEM_TEXT. "Item Text
                    GI_BAPI_GM_ITEM_CUS-MVT_IND   = ' '.  "Movement Indicator

*    ****Transformations****
                    GI_BAPI_GM_ITEM_CUS-MOVE_TYPE = GI_MARC_SPLIT_ITEM-BAPI_MOVE_TYPE. "Movement Type
                    GI_BAPI_GM_ITEM_CUS-MOVE_REAS = GI_MARC_SPLIT_ITEM-BAPI_MOVE_REAS. "Reason for Goods movement
                    GI_BAPI_GM_ITEM_CUS-STGE_LOC  = GI_MARC_SPLIT_ITEM-BAPI_STGE_LOC.  "Storage Location
                    GI_BAPI_GM_ITEM_CUS-MOVE_STLOC  = GI_MARC_SPLIT_ITEM-BAPI_MOVE_STLOC.  " Des Storage Location
                    GI_BAPI_GM_ITEM_CUS-STCK_TYPE = GI_MARC_SPLIT_ITEM-BAPI_STCK_TYPE. "Stock Type
                    GI_BAPI_GM_CODE_CUS-GM_CODE   = GI_MARC_SPLIT_ITEM-BAPI_GM_CODE."'03'."  "GM_CODE

                    APPEND GI_BAPI_GM_ITEM_CUS TO GT_BAPI_GM_ITEM_CUS.
                    CLEAR:GI_BAPI_GM_ITEM_CUS.

***Error Reprocessing -- Fail Step = 80 = Goods Movement
                    IF P_REPR = 'X'.
                      GW_FAIL_STEP_NO = 80.
*                      IF gi_marc_split_item-process_status = 'F'
*                        AND gi_marc_split_item-fail_step LE gw_fail_step_no.
                      IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*    **Post BAPI for Main Delivery Inspection
                        PERFORM DELIVERY_GOODS_MVMT USING GW_GOODS_FLAG.
                      ELSE.
                        GW_GOODS_FLAG = 'X'.
** Begin of changes by USPRADI JE3K905475 on 02.03.2022
                        GW_GR_NO       =   GI_MARC_SPLIT_ITEM-GR_NO.
                        GW_GR_YEAR     =   GI_MARC_SPLIT_ITEM-GR_YEAR.
                        GW_GR_LINE_NO  =  GI_MARC_SPLIT_ITEM-GR_LINE_NO.
                        GW_GR_QTY_CUS  =   GI_MARC_SPLIT_ITEM-GR_QTY.
                        GW_GR_MOVE_TYPE  =   GI_MARC_SPLIT_ITEM-GR_MOVE_TYPE.
** End of changes by USPRADI JE3K905475 on 02.03.2022
                      ENDIF.
                    ELSE.
***  Delta Run
*    **Post BAPI for Main Delivery Inspection
                      PERFORM DELIVERY_GOODS_MVMT USING GW_GOODS_FLAG.
                    ENDIF.

*    **IF main delivery Goods Receipt is successful
                    IF GW_GOODS_FLAG = 'X'.
                    ENDIF. " Goods Receipt Success Flag
                  ENDIF. " Product Status NE 'RF'
                ENDIF. " Inspection Success Flag
              ENDIF. " PGI Success Flag
            ENDIF. " Picking Success Flag
          ENDIF. " LIPS Selection
        ENDIF. " Main Delivery Line Deletion Success
      ENDIF. " Delivery Split Success Flag
    ENDIF. " Compare LIPS & File Qty
  ENDIF. " Material is Batch Managed
ENDFORM.                    " CUS_RET_MAIN_DEL
*&---------------------------------------------------------------------*
*&      Form  CUS_RET_SPLIT_DEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CUS_RET_SPLIT_DEL .
  DATA: LW_LIFMG        TYPE CHAR9,
        LW_MBLNR        TYPE CHAR10,
        LT_BAPI_GM_ITEM TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.

***If Material Batch managed & file contain batch
  IF GI_MARC_SPLIT_ITEM-BAPI_BATCH IS NOT INITIAL.
***Populate Delivery Change
**** Calculating overall quantity
** Begin of changes by USPRADI JE3K905848 on 15.03.2022
*    LOOP AT gt_lips1 INTO gi_lips1_tmp  WHERE vbeln = gi_marc_split_item-po_no
*                                        AND   posnr = gi_marc_split_item-po_line_no
*                                        OR    uecha = gi_marc_split_item-po_line_no.
    LOOP AT GT_LIPS1 INTO GI_LIPS1_TMP  WHERE VBELN = GV_DEL
                                       AND   POSNR = GV_POSNR
                                       OR    UECHA = GV_POSNR.
** End of changes by USPRADI JE3K905848 on 15.03.2022
*****Calculating OBD Quamtity for Batch Addition after deletion
      IF GI_LIPS1_TMP-POSNR = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
        GW_OBD_MAIN_QTY = GW_OBD_MAIN_QTY + GI_LIPS1_TMP-LFIMG.
      ENDIF.
      IF GI_LIPS1_TMP-UECHA = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
        GW_OBD_CHILD_QTY = GW_OBD_CHILD_QTY + GI_LIPS1_TMP-LFIMG.
      ENDIF.

***  Populate Structures for BAPI_INB_DELIVERY_CHANGE to remove Batch & Batch Split Line Items
      GI_OBD_HEADER_DATA-DELIV_NUMB    = GI_LIPS1_TMP-VBELN.
      GI_OBD_HEADER_CONTROL-DELIV_NUMB = GI_LIPS1_TMP-VBELN.
      GW_OBD_DELIVERY                  = GI_LIPS1_TMP-VBELN.
***    Delivery Line Item has Batch Split
      IF GI_LIPS1_TMP-XCHPF = 'X' AND GI_LIPS1_TMP-CHARG IS NOT INITIAL AND GI_LIPS1_TMP-POSNR GT 900000.
        GI_OBD_ITEM_DATA-DELIV_NUMB = GI_LIPS1_TMP-VBELN.
        GI_OBD_ITEM_DATA-DELIV_ITEM = GI_LIPS1_TMP-POSNR.
        GI_OBD_ITEM_DATA-MATERIAL   = GI_LIPS1_TMP-MATNR.
        GI_OBD_ITEM_DATA-DLV_QTY    = GI_LIPS1_TMP-LFIMG.
        GI_OBD_ITEM_DATA-BATCH      = GI_LIPS1_TMP-CHARG.
        GI_OBD_ITEM_DATA-HIERARITEM = GI_LIPS1_TMP-UECHA.
        GI_OBD_ITEM_DATA-USEHIERITM = '1'.
        GI_OBD_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS1_TMP-UMVKZ.
        GI_OBD_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS1_TMP-UMVKN.
        GI_OBD_ITEM_DATA-SALES_UNIT         = GI_LIPS1_TMP-VRKME.
        GI_OBD_ITEM_DATA-BASE_UOM           = GI_LIPS1_TMP-MEINS.

        GI_OBD_ITEM_CONTROL-DELIV_NUMB = GI_LIPS1_TMP-VBELN.
        GI_OBD_ITEM_CONTROL-DELIV_ITEM = GI_LIPS1_TMP-POSNR.
        GI_OBD_ITEM_CONTROL-DEL_ITEM   = 'X'.

****    Delivery Line Item has Batch
      ELSEIF GI_LIPS1_TMP-XCHPF = 'X' AND GI_LIPS1_TMP-CHARG IS NOT INITIAL.
        GI_OBD_ITEM_DATA-DELIV_NUMB = GI_LIPS1_TMP-VBELN.
        GI_OBD_ITEM_DATA-DELIV_ITEM = GI_LIPS1_TMP-POSNR.
        GI_OBD_ITEM_DATA-MATERIAL   = GI_LIPS1_TMP-MATNR.
        GI_OBD_ITEM_DATA-DLV_QTY    = GI_LIPS1_TMP-LFIMG.
        GI_OBD_ITEM_DATA-BATCH      = ' '.
        GI_OBD_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS1_TMP-UMVKZ.
        GI_OBD_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS1_TMP-UMVKN.
        GI_OBD_ITEM_DATA-SALES_UNIT         = GI_LIPS1_TMP-VRKME.
        GI_OBD_ITEM_DATA-BASE_UOM           = GI_LIPS1_TMP-MEINS.

        GI_OBD_ITEM_CONTROL-DELIV_NUMB = GI_LIPS1_TMP-VBELN.
        GI_OBD_ITEM_CONTROL-DELIV_ITEM = GI_LIPS1_TMP-POSNR.
        GI_OBD_ITEM_CONTROL-CHG_DELQTY = 'X'.

      ENDIF.

      IF GI_OBD_ITEM_DATA IS NOT INITIAL.
        APPEND GI_OBD_ITEM_DATA TO GT_OBD_ITEM_DATA.
        APPEND GI_OBD_ITEM_CONTROL TO GT_OBD_ITEM_CONTROL.
        CLEAR: GI_OBD_ITEM_DATA,GI_OBD_ITEM_CONTROL.
      ENDIF.

      CLEAR:GI_LIPS1_TMP.
    ENDLOOP.

***Error Reprocessing -- Fail Step = 10 = Batch Removal
    IF P_REPR = 'X'.
      GW_FAIL_STEP_NO = 10.
*      IF gi_marc_split_item-process_status = 'F'
*        AND gi_marc_split_item-fail_step LE gw_fail_step_no.
      IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
***    Call BAPI BAPI_OBD_DELIVERY_CHANGE to remove Batch & Batch Split Line Items
        PERFORM DELIVERY_BATCH_REMOVE.
      ELSE.
        IF GT_OBD_ITEM_DATA IS NOT INITIAL.
          GW_OBD_FLAG = 'X'.
        ELSE.
          GW_OBD_FLAG = ' '.
        ENDIF.
      ENDIF.
    ELSE.
***Delta Run
***    Call BAPI BAPI_OBD_DELIVERY_CHANGE to remove Batch & Batch Split Line Items
      PERFORM DELIVERY_BATCH_REMOVE.
    ENDIF.

    IF GW_OBD_CHILD_QTY IS NOT INITIAL.
      GW_OBD_FULL_QTY = GW_OBD_MAIN_QTY + GW_OBD_CHILD_QTY.
    ELSE.
      GW_OBD_FULL_QTY = GW_OBD_MAIN_QTY.
    ENDIF.
*    **IF main delivery Batch Removal is successful then go for Picking
    IF ( GW_OBD_FLAG = 'X' AND GT_OBD_ITEM_DATA IS NOT INITIAL )
      OR ( GW_OBD_FLAG = ' ' AND GT_OBD_ITEM_DATA IS INITIAL ).
*** Compare the LIPS Qty & GR File QTY
      IF GI_MARC_SPLIT_ITEM-QTY_EXPE GT GW_OBD_FULL_QTY.
****Process the record to error report***

        GW_REC_ERROR         = 'X'.
        GW_INPUT_STATUS_TAB  = 'E'.
        GW_ERROR_TYPE_TAB    = 'MARC'.
        LW_LIFMG             = GW_OBD_FULL_QTY .
        CONCATENATE TEXT-054 LW_LIFMG TEXT-055
        INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.

        GW_PROCESS_STATUS = 'F'.
        GW_REASON         = TEXT-054.
        GW_STATUS         = TEXT-050.
** Begin of changes by USPRADI for New program on 08.12.2021
** Update RECH and RECL tables with error status and reason
        GV_STATUS = 'M'.
        GV_STEP = ' '.
        GV_STEP_DESCR = TEXT-054.
        GW_MSG_ID = ' '.
        GW_MSG_NO = ' '.
        PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_REASON GW_MSG_ID GW_MSG_NO LW_MBLNR
                            LT_BAPI_GM_ITEM.
** End of changes by USPRADI for New program on 08.12.2021
        PERFORM SPLIT_DEL_TABLE_UPDATE.
        PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        EXIT.
      ELSE.

***Error Reprocessing -- Fail Step = 20 = Split Delivery
        IF P_REPR = 'X'.
          GW_FAIL_STEP_NO = 20.
*          IF gi_marc_split_item-process_status = 'F'
*            AND gi_marc_split_item-fail_step LE gw_fail_step_no.
          IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*Getting Next New Delivery from NR Object
            CALL FUNCTION 'NUMBER_GET_NEXT'
              EXPORTING
***Begin of changes by 503187592 CHG0158498 DE3K9A06L1
*               nr_range_nr             = '17'
                NR_RANGE_NR             = 'ZS'
***End of changes by 503187592 CHG0158498 DE3K9A06L1
                OBJECT                  = 'RV_BELEG'
                QUANTITY                = '1'
              IMPORTING
                NUMBER                  = GW_NEW_DELI
              EXCEPTIONS
                INTERVAL_NOT_FOUND      = 1
                NUMBER_RANGE_NOT_INTERN = 2
                OBJECT_NOT_FOUND        = 3
                QUANTITY_IS_0           = 4
                QUANTITY_IS_NOT_1       = 5
                INTERVAL_OVERFLOW       = 6
                BUFFER_OVERFLOW         = 7
                OTHERS                  = 8.
            IF SY-SUBRC NE 0.
****Process the record to error report***
              GW_SPLIT_FLAG = ' '.
              GW_CUS_RET_ERROR = 'X'.
              GW_REJECT_REASON_TAB = TEXT-056.
              GI_ERROR_FILE-REJECT_REASON = TEXT-056.
              GW_INPUT_STATUS_TAB  = 'E'.
              GW_ERROR_TYPE_TAB    = 'MARC'.
              GW_SAP_ERROR_FLAG    = 'X'.

              GW_PROCESS_STATUS = 'F'.
              GW_FAIL_STEP      = 20.
              GW_FAIL_STEP_DESC = TEXT-056.
              GW_REASON         = TEXT-056.
              GW_STATUS         = TEXT-056.
** Begin of changes by USPRADI for New program on 08.12.2021
** Incase of error populate, the RECH and RECL tables with error message and step no.
              GV_STATUS = 'M'.
              GV_STEP = '20'.
              GV_STEP_DESCR = TEXT-056.
              GW_MSG_ID = ' '.
              GW_MSG_NO = ' '.
              PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_REASON GW_MSG_ID GW_MSG_NO LW_MBLNR
                                  LT_BAPI_GM_ITEM.
** End of changes by USPRADI for New program on 08.12.2021
              PERFORM SPLIT_DEL_TABLE_UPDATE.
              PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
              PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
            ELSE.
***Populate data for Delivery Split
***Populate Item data for BAPI BAPI_OUTB_DELIVERY_SPLIT_DEC

              GW_OLD_DELI                       = GI_LIPS1-VBELN.
              GI_SPLIT_ITEMDATA-DELIV_NUMB      = GW_NEW_DELI.
              GI_SPLIT_ITEMDATA-DELIV_ITEM      = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
              GI_SPLIT_ITEMDATA-CURR_QTY        = 'B'.
              GI_SPLIT_ITEMDATA-DLV_QTY_STOCK   = GI_MARC_SPLIT_ITEM-QTY_EXPE.
              GI_SPLIT_ITEMDATA-BASE_UOM        = GI_MARC_SPLIT_ITEM-BAPI_ENTRY_UOM.
              GI_SPLIT_ITEMDATA-SALES_QTY_NUM   = GI_LIPS1-UMVKZ.
              GI_SPLIT_ITEMDATA-SALES_QTY_DENOM = GI_LIPS1-UMVKN.
              GI_SPLIT_ITEMDATA-CONVFACTOR      = GI_LIPS1-UMREF.
              APPEND GI_SPLIT_ITEMDATA TO GT_SPLIT_ITEMDATA.
              CLEAR:GI_SPLIT_ITEMDATA.
***Post BAPI for Delivery Split
              PERFORM DELIVERY_SPLIT USING GW_OLD_DELI GW_NEW_DELI GT_SPLIT_ITEMDATA GW_SPLIT_FLAG.
            ENDIF.
          ELSE.
            GW_SPLIT_FLAG = 'X'.
            GW_SPLIT_DEL_NO         =   GI_MARC_SPLIT_ITEM-SPLIT_DEL_NO.
            GW_SPLIT_DEL_LINE_NO    =   GI_MARC_SPLIT_ITEM-SPLIT_DEL_LINE_NO.
            GW_SPLIT_DEL_QTY        =   GI_MARC_SPLIT_ITEM-SPLIT_DEL_QTY.
          ENDIF.
        ELSE.
***Delta Run
*Getting Next New Delivery from NR Object
          CALL FUNCTION 'NUMBER_GET_NEXT'
            EXPORTING
***Begin of changes by 503187592 CHG0158498 DE3K9A06L1
*             nr_range_nr             = '17'
              NR_RANGE_NR             = 'ZS'
***End of changes by 503187592 CHG0158498 DE3K9A06L1
              OBJECT                  = 'RV_BELEG'
              QUANTITY                = '1'
            IMPORTING
              NUMBER                  = GW_NEW_DELI
            EXCEPTIONS
              INTERVAL_NOT_FOUND      = 1
              NUMBER_RANGE_NOT_INTERN = 2
              OBJECT_NOT_FOUND        = 3
              QUANTITY_IS_0           = 4
              QUANTITY_IS_NOT_1       = 5
              INTERVAL_OVERFLOW       = 6
              BUFFER_OVERFLOW         = 7
              OTHERS                  = 8.
          IF SY-SUBRC NE 0.
****Process the record to error report***
            GW_SPLIT_FLAG = ' '.
            GW_CUS_RET_ERROR = 'X'.
            GW_REJECT_REASON_TAB = TEXT-056.
            GI_ERROR_FILE-REJECT_REASON = TEXT-056.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'MARC'.
            GW_SAP_ERROR_FLAG    = 'X'.

            GW_PROCESS_STATUS = 'F'.
            GW_FAIL_STEP      = 20.
            GW_FAIL_STEP_DESC = TEXT-056.
            GW_REASON         = TEXT-056.
            GW_STATUS         = TEXT-056.
** Begin of changes by USPRADI for New program on 08.12.2021
** Incase of error populate, the RECH and RECL tables with error message and step no.
            GV_STATUS = 'M'.
            GV_STEP = '20'.
            GV_STEP_DESCR = TEXT-056.
            GW_MSG_ID = ' '.
            GW_MSG_NO = ' '.
            PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_REASON GW_MSG_ID GW_MSG_NO LW_MBLNR
                                LT_BAPI_GM_ITEM.
** End of changes by USPRADI for New program on 08.12.2021
            PERFORM SPLIT_DEL_TABLE_UPDATE.
            PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
            PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
          ELSE.
***Populate data for Delivery Split
***Populate Item data for BAPI BAPI_OUTB_DELIVERY_SPLIT_DEC

            GW_OLD_DELI                       = GI_LIPS1-VBELN.
            GI_SPLIT_ITEMDATA-DELIV_NUMB      = GW_NEW_DELI.
            GI_SPLIT_ITEMDATA-DELIV_ITEM      = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
            GI_SPLIT_ITEMDATA-CURR_QTY        = 'B'.
            GI_SPLIT_ITEMDATA-DLV_QTY_STOCK   = GI_MARC_SPLIT_ITEM-QTY_EXPE.
            GI_SPLIT_ITEMDATA-BASE_UOM        = GI_MARC_SPLIT_ITEM-BAPI_ENTRY_UOM.
            GI_SPLIT_ITEMDATA-SALES_QTY_NUM   = GI_LIPS1-UMVKZ.
            GI_SPLIT_ITEMDATA-SALES_QTY_DENOM = GI_LIPS1-UMVKN.
            GI_SPLIT_ITEMDATA-CONVFACTOR      = GI_LIPS1-UMREF.
            APPEND GI_SPLIT_ITEMDATA TO GT_SPLIT_ITEMDATA.
            CLEAR:GI_SPLIT_ITEMDATA.
***Post BAPI for Delivery Split
            PERFORM DELIVERY_SPLIT USING GW_OLD_DELI GW_NEW_DELI GT_SPLIT_ITEMDATA GW_SPLIT_FLAG.
          ENDIF.
        ENDIF.

***IF Delivery Split is successful then check main delivery line qty = 0 then delete line item
        IF GW_SPLIT_FLAG = 'X'.

****Error Reprocessing
          IF P_REPR = 'X'.
****Split Delivery Fail Step, New Delivery created
            IF GW_NEW_DELI IS NOT INITIAL.
              SELECT SINGLE VBELN POSNR MATNR WERKS CHARG LFIMG MEINS UMVKZ UMVKN FROM LIPS
                   INTO GI_LIPS_SPLIT WHERE VBELN = GW_NEW_DELI.
            ELSE.
              SELECT SINGLE VBELN POSNR MATNR WERKS CHARG LFIMG MEINS UMVKZ UMVKN FROM LIPS
               INTO GI_LIPS_SPLIT WHERE VBELN = GI_MARC_SPLIT_ITEM-SPLIT_DEL_NO.
            ENDIF.
          ELSE.
** Delta Run
            SELECT SINGLE VBELN POSNR MATNR WERKS CHARG LFIMG MEINS UMVKZ UMVKN FROM LIPS
              INTO GI_LIPS_SPLIT WHERE VBELN = GW_NEW_DELI.
          ENDIF.

          IF SY-SUBRC = 0.

**** Populate Batch Insertion
***  Populate Structures for BAPI_OBD_DELIVERY_CHANGE to delete main delivery line item
            GI_BATCH_HEADER_DATA-DELIV_NUMB    = GI_LIPS_SPLIT-VBELN.
            GI_BATCH_HEADER_CONTROL-DELIV_NUMB = GI_LIPS_SPLIT-VBELN.
            GW_BATCH_DELIVERY                  = GI_LIPS_SPLIT-VBELN.

            GI_BATCH_ITEM_DATA-DELIV_NUMB = GI_LIPS_SPLIT-VBELN.
            GI_BATCH_ITEM_DATA-DELIV_ITEM = GI_LIPS_SPLIT-POSNR.
            GI_BATCH_ITEM_DATA-MATERIAL   = GI_LIPS_SPLIT-MATNR.
            GI_BATCH_ITEM_DATA-DLV_QTY    = GI_LIPS_SPLIT-LFIMG.
            GI_BATCH_ITEM_DATA-BATCH      = GI_MARC_SPLIT_ITEM-BAPI_BATCH.
            GI_BATCH_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS_SPLIT-UMVKZ.
            GI_BATCH_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS_SPLIT-UMVKN.
            GI_BATCH_ITEM_DATA-SALES_UNIT         = GI_LIPS1-VRKME.
            GI_BATCH_ITEM_DATA-BASE_UOM           = GI_LIPS_SPLIT-MEINS.

            GI_BATCH_ITEM_CONTROL-DELIV_NUMB = GI_LIPS_SPLIT-VBELN.
            GI_BATCH_ITEM_CONTROL-DELIV_ITEM = GI_LIPS_SPLIT-POSNR.
            GI_BATCH_ITEM_CONTROL-CHG_DELQTY = 'X'.


            IF GI_BATCH_ITEM_DATA IS NOT INITIAL.
              APPEND GI_BATCH_ITEM_DATA TO GT_BATCH_ITEM_DATA.
              APPEND GI_BATCH_ITEM_CONTROL TO GT_BATCH_ITEM_CONTROL.
              CLEAR: GI_BATCH_ITEM_DATA,GI_BATCH_ITEM_CONTROL.
            ENDIF.

***Error Reprocessing -- Fail Step = 30 = Batch Insertion
            IF P_REPR = 'X'.
              GW_FAIL_STEP_NO = 30.
*              IF gi_marc_split_item-process_status = 'F'
*                AND gi_marc_split_item-fail_step LE gw_fail_step_no.
              IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
***    Call BAPI BAPI_OUTB_DELIVERY_CHANGE to insert batch
                PERFORM DELIVERY_BATCH_INSERTION.
              ELSE.
                GW_BATCH_FLAG = 'X'.
              ENDIF.
            ELSE.
***Delta Run
***    Call BAPI BAPI_OUTB_DELIVERY_CHANGE to insert batch
              PERFORM DELIVERY_BATCH_INSERTION.
            ENDIF.

****IF main delivery batch insertion is successfull then check main delivery line qty = 0 then delete line item
            IF GW_BATCH_FLAG = 'X'.

****Get Main delivery details
              SELECT SINGLE VBELN POSNR MATNR WERKS CHARG LFIMG MEINS UMVKZ UMVKN
                INTO GI_LIPS_DELETE
                FROM LIPS
                WHERE VBELN = GI_MARC_SPLIT_ITEM-PO_NO
                AND   POSNR = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
              IF SY-SUBRC = 0.
                IF GI_LIPS_DELETE-LFIMG EQ 0.
***  Populate Structures for BAPI_OUTB_DELIVERY_CHANGE to delete main delivery line item
                  GI_DEL_HEADER_DATA-DELIV_NUMB    = GI_LIPS_DELETE-VBELN.
                  GI_DEL_HEADER_CONTROL-DELIV_NUMB = GI_LIPS_DELETE-VBELN.
                  GW_DEL_DELIVERY                  = GI_LIPS_DELETE-VBELN.

                  GI_DEL_ITEM_DATA-DELIV_NUMB = GI_LIPS_DELETE-VBELN.
                  GI_DEL_ITEM_DATA-DELIV_ITEM = GI_LIPS_DELETE-POSNR.
                  GI_DEL_ITEM_DATA-MATERIAL   = GI_LIPS_DELETE-MATNR.
                  GI_DEL_ITEM_DATA-DLV_QTY    = GI_LIPS_DELETE-LFIMG.
                  GI_DEL_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS_DELETE-UMVKZ.
                  GI_DEL_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS_DELETE-UMVKN.

                  GI_DEL_ITEM_CONTROL-DELIV_NUMB = GI_LIPS_DELETE-VBELN.
                  GI_DEL_ITEM_CONTROL-DELIV_ITEM = GI_LIPS_DELETE-POSNR.
                  GI_DEL_ITEM_CONTROL-DEL_ITEM   = 'X'.

                  IF GI_DEL_ITEM_DATA IS NOT INITIAL.
                    APPEND GI_DEL_ITEM_DATA TO GT_DEL_ITEM_DATA.
                    APPEND GI_DEL_ITEM_CONTROL TO GT_DEL_ITEM_CONTROL.
                    CLEAR: GI_DEL_ITEM_DATA,GI_DEL_ITEM_CONTROL.
                  ENDIF.

***Error Reprocessing -- Fail Step = 40 = Delete Line Item
                  IF P_REPR = 'X'.
                    GW_FAIL_STEP_NO = 40.
*                    IF gi_marc_split_item-process_status = 'F'
*                      AND gi_marc_split_item-fail_step LE gw_fail_step_no.
                    IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
***    Call BAPI BAPI_OBD_DELIVERY_CHANGE to remove Batch & Batch Split Line Items
                      PERFORM DELIVERY_ITEM_DELETION.
                    ELSE.
                      GW_DELETE_FLAG = 'X'.
                    ENDIF.
                  ELSE.
***Delta Run
***    Call BAPI BAPI_OBD_DELIVERY_CHANGE to remove Batch & Batch Split Line Items
                    PERFORM DELIVERY_ITEM_DELETION.
                  ENDIF.
                ELSE.
                  GW_DELETE_FLAG = 'X'.
                ENDIF.
** Begin of changes by USPRADI JE3K905848 on 15.03.2022
              ELSE. "incase delivery is already deleted
                IF P_REPR = 'X' .
                  GW_DELETE_FLAG = 'X'.
                ENDIF.
** End of changes by USPRADI JE3K905848 on 15.03.2022
              ENDIF. " Main Delivery Data after Spliting

***IF main delivery line qty = 0 then delete line item success then go for picking
*                    or qty NE 0 then go for batch picking
              IF GW_DELETE_FLAG = 'X'.

*    **Populate Delivery Picking
*    *Populate Picking Header Info
                CLEAR:GI_VBKOK_WA.
                GI_VBKOK_WA-VBELN_VL = GI_LIPS_SPLIT-VBELN.
                GI_VBKOK_WA-VBELN    = GI_LIPS_SPLIT-VBELN.
*    *Populate Picking Item Info
                GI_VBPOK_TAB-VBELN_VL = GI_LIPS_SPLIT-VBELN.
                GI_VBPOK_TAB-POSNR_VL = GI_LIPS_SPLIT-POSNR.
                GI_VBPOK_TAB-VBELN    = GI_LIPS_SPLIT-VBELN.
                GI_VBPOK_TAB-POSNN    = GI_LIPS_SPLIT-POSNR.
                GI_VBPOK_TAB-MATNR    = GI_LIPS_SPLIT-MATNR.
                GI_VBPOK_TAB-CHARG    = GI_MARC_SPLIT_ITEM-BAPI_BATCH.
                GI_VBPOK_TAB-WERKS    = GI_LIPS_SPLIT-WERKS.
                GI_VBPOK_TAB-PIKMG    = GI_LIPS_SPLIT-LFIMG.
                GI_VBPOK_TAB-UMVKZ    = GI_LIPS_SPLIT-UMVKZ.
                GI_VBPOK_TAB-UMVKN    = GI_LIPS_SPLIT-UMVKN.
                APPEND GI_VBPOK_TAB TO GT_VBPOK_TAB.
                CLEAR:GI_VBPOK_TAB.

***Error Reprocessing -- Fail Step = 50 = Picking
                IF P_REPR = 'X'.
                  GW_FAIL_STEP_NO = 50.
*                  IF gi_marc_split_item-process_status = 'F'
*                    AND gi_marc_split_item-fail_step LE gw_fail_step_no.
                  IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*    *** Post BAPI for Main Delivery Picking
                    PERFORM DELIVERY_PICKING USING GI_VBKOK_WA GT_VBPOK_TAB GW_PICK_FLAG.
                  ELSE.
                    GW_PICK_FLAG = 'X'.
                  ENDIF.
                ELSE.
***  Delta Run
*    *** Post BAPI for Main Delivery Picking
                  PERFORM DELIVERY_PICKING USING GI_VBKOK_WA GT_VBPOK_TAB GW_PICK_FLAG.
                ENDIF.

*    **IF main delivery picking is successfull then go for PGI process
                IF GW_PICK_FLAG = 'X'.

*    **Populating data for PGI
                  CLEAR:GI_PGI_HEADER_DATA,GI_PGI_HEADER_CONTROL,GI_PGI_DELIVERY.
                  GI_PGI_HEADER_DATA-DELIV_NUMB     = GI_LIPS_SPLIT-VBELN.
                  GI_PGI_HEADER_CONTROL-DELIV_NUMB  = GI_LIPS_SPLIT-VBELN.
                  GI_PGI_HEADER_CONTROL-POST_GI_FLG = 'X'.
                  GI_PGI_DELIVERY                   = GI_LIPS_SPLIT-VBELN.

***Error Reprocessing -- Fail Step = 60 = PGI
                  IF P_REPR = 'X'.
                    GW_FAIL_STEP_NO = 60.
                    IF GI_MARC_SPLIT_ITEM-PROCESS_STATUS = 'F'
                      AND GI_MARC_SPLIT_ITEM-FAIL_STEP LE GW_FAIL_STEP_NO.
*    *** Post BAPI for Main Delivery PGI
                      PERFORM DELIVERY_PGI USING  GI_PGI_HEADER_DATA GI_PGI_HEADER_CONTROL GI_PGI_DELIVERY GW_PGI_FLAG.
                    ELSE.
                      GW_PGI_FLAG = 'X'.
                      GW_PGI_GR_NO       =  GI_MARC_SPLIT_ITEM-PGI_GR_NO.
                      GW_PGI_GR_LINE_NO  =  GI_MARC_SPLIT_ITEM-PGI_GR_LINE_NO.
                      GW_PGI_GR_QTY      =  GI_MARC_SPLIT_ITEM-PGI_GR_QTY.
                      GW_PGI_GR_YEAR     =  GI_MARC_SPLIT_ITEM-PGI_GR_YEAR.
                      GW_PGI_MOVE_TYPE   =  GI_MARC_SPLIT_ITEM-PGI_MOVE_TYPE.
                    ENDIF.
                  ELSE.
***  Delta Run
*    *** Post BAPI for Main Delivery PGI
                    PERFORM DELIVERY_PGI USING  GI_PGI_HEADER_DATA GI_PGI_HEADER_CONTROL GI_PGI_DELIVERY GW_PGI_FLAG.
                  ENDIF.

*    **IF main delivery PGI is successful then go for Inspection
                  IF GW_PGI_FLAG = 'X'.
*    **Populate data for Inspection
                    GI_INSP_DATA-DELIV_NUMB = GI_LIPS_SPLIT-VBELN.
                    GI_INSP_DATA-DELIV_ITEM = GI_LIPS_SPLIT-POSNR.
                    GI_INSP_DATA-MATERIAL   = GI_LIPS_SPLIT-MATNR.
                    GI_INSP_DATA-QUAN       = GI_LIPS_SPLIT-LFIMG.
                    GI_INSP_DATA-UNIT       = GI_LIPS_SPLIT-MEINS.
                    GI_INSP_DATA-INSPECTION_DATE = SY-DATUM.
                    GI_INSP_DATA-DEC_CODE   = GI_MARC_SPLIT_ITEM-BAPI_DEC_CODE.
                    GI_INSP_DATA-FU_CODE    = GI_MARC_SPLIT_ITEM-BAPI_FU_CODE.
                    GI_INSP_DATA-INSPECTOR  = SY-UNAME.
                    GI_INSP_DATA-LFU_RESPONSIBLE  = SY-UNAME.

                    GI_LONGTEXT-VBELN       = GI_LIPS_SPLIT-VBELN.
                    GI_LONGTEXT-POSNR       = GI_LIPS_SPLIT-POSNR.
                    GI_INSP_DATA-LONGTEXT   = GI_LONGTEXT.
                    APPEND GI_INSP_DATA TO GT_INSP_DATA.
                    CLEAR: GI_INSP_DATA.

***Error Reprocessing -- Fail Step = 70 = Inspection
                    IF P_REPR = 'X'.
                      GW_FAIL_STEP_NO = 70.
*                      IF gi_marc_split_item-process_status = 'F'
*                        AND gi_marc_split_item-fail_step LE gw_fail_step_no.
                      IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*    **Post BAPI for Main Delivery Inspection
                        PERFORM DELIVERY_INSPECTION USING GT_INSP_DATA GW_INSP_FLAG.
                      ELSE.
                        GW_INSP_FLAG = 'X'.
                        GW_INSP_NO = GI_MARC_SPLIT_ITEM-INSP_NO.
                      ENDIF.
                    ELSE.
***  Delta Run
*    **Post BAPI for Main Delivery Inspection
                      PERFORM DELIVERY_INSPECTION USING GT_INSP_DATA GW_INSP_FLAG.
                    ENDIF.

*    **IF main delivery PGI is successful then go for Inspection
                    IF GW_INSP_FLAG = 'X'.
                      IF GI_MARC_SPLIT_ITEM-PROD_STAT EQ 'RF'.
                        GW_PROCESS_STATUS = 'C'.
                        GW_STATUS = ' '.
                        PERFORM SPLIT_DEL_TABLE_UPDATE.
                        GW_INPUT_STATUS_TAB = 'C'.
                        PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
                      ELSE.
*    **Populate Data for Goods Movement

                        GI_BAPI_GM_HEAD_CUS-DOC_DATE      = SY-DATUM.   "Document Date
                        GI_BAPI_GM_HEAD_CUS-PSTNG_DATE    = SY-DATUM.   "Posting Date
                        GI_BAPI_GM_HEAD_CUS-HEADER_TXT     = GI_MARC_SPLIT_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
                        GI_BAPI_GM_HEAD_SH-BILL_OF_LADING  = GI_MARC_SPLIT_ITEM-BAPI_BILL_OF_LADING. "cusIPPER_BL_NO
                        GI_BAPI_GM_HEAD_CUS-REF_DOC_NO     = GI_MARC_SPLIT_ITEM-BAPI_VENDOR_ID. "VEND_ID / "PO_NO
                        GI_BAPI_GM_ITEM_CUS-MATERIAL  = GI_LIPS_SPLIT-MATNR."SKU
                        GI_BAPI_GM_ITEM_CUS-ENTRY_UOM = GI_LIPS_SPLIT-MEINS. "UOM_ABBREV
                        GI_BAPI_GM_ITEM_CUS-ENTRY_QNT = GI_LIPS_SPLIT-LFIMG. "QTY_EXPE
                        GI_BAPI_GM_ITEM_CUS-PLANT     = GI_LIPS_SPLIT-WERKS. "COMP_CODE
                        GI_BAPI_GM_ITEM_CUS-BATCH     = GI_MARC_SPLIT_ITEM-BAPI_BATCH. "LOT
                        GI_BAPI_GM_ITEM_CUS-UNLOAD_PT = GI_MARC_SPLIT_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
                        GI_BAPI_GM_ITEM_CUS-ITEM_TEXT = GI_MARC_SPLIT_ITEM-BAPI_ITEM_TEXT. "Item Text
                        GI_BAPI_GM_ITEM_CUS-MVT_IND   = ' '.  "Movement Indicator
*    ****Transformations****
                        GI_BAPI_GM_ITEM_CUS-MOVE_TYPE = GI_MARC_SPLIT_ITEM-BAPI_MOVE_TYPE. "Movement Type
                        GI_BAPI_GM_ITEM_CUS-MOVE_REAS = GI_MARC_SPLIT_ITEM-BAPI_MOVE_REAS. "Reason for Goods movement
                        GI_BAPI_GM_ITEM_CUS-STGE_LOC  = GI_MARC_SPLIT_ITEM-BAPI_STGE_LOC.  "Storage Location
                        GI_BAPI_GM_ITEM_CUS-MOVE_STLOC  = GI_MARC_SPLIT_ITEM-BAPI_MOVE_STLOC.  "Destination Storage Location
                        GI_BAPI_GM_ITEM_CUS-STCK_TYPE = GI_MARC_SPLIT_ITEM-BAPI_STCK_TYPE. "Stock Type
                        GI_BAPI_GM_CODE_CUS-GM_CODE   = GI_MARC_SPLIT_ITEM-BAPI_GM_CODE."'03'."  "GM_CODE

                        APPEND GI_BAPI_GM_ITEM_CUS TO GT_BAPI_GM_ITEM_CUS.
                        CLEAR:GI_BAPI_GM_ITEM_CUS.

***Error Reprocessing -- Fail Step = 80 = Goods Movement
                        IF P_REPR = 'X'.
                          GW_FAIL_STEP_NO = 80.
*                          IF gi_marc_split_item-process_status = 'F'
*                            AND gi_marc_split_item-fail_step LE gw_fail_step_no.
                          IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*    **Post BAPI for Main Delivery Inspection
                            PERFORM DELIVERY_GOODS_MVMT USING GW_GOODS_FLAG.
                          ELSE.
                            GW_GOODS_FLAG = 'X'.
                            GW_GR_NO       =   GI_MARC_SPLIT_ITEM-GR_NO.
                            GW_GR_YEAR     =   GI_MARC_SPLIT_ITEM-GR_YEAR.
                            GW_GR_LINE_NO  =  GI_MARC_SPLIT_ITEM-GR_LINE_NO.
                            GW_GR_QTY_CUS  =   GI_MARC_SPLIT_ITEM-GR_QTY.
                            GW_GR_MOVE_TYPE  =   GI_MARC_SPLIT_ITEM-GR_MOVE_TYPE.
                          ENDIF.
                        ELSE.
***  Delta Run
*    **Post BAPI for Main Delivery Inspection
                          PERFORM DELIVERY_GOODS_MVMT USING GW_GOODS_FLAG.
                        ENDIF.

*    **IF main delivery Goods Receipt is successful
                        IF GW_GOODS_FLAG = 'X'.
                        ENDIF. " Goods Receipt Success Flag
                      ENDIF. " Product Status NE 'RF'
                    ENDIF. " Inspection Success Flag
                  ENDIF. " PGI Success Flag
                ENDIF. " Picking Success Flag
              ENDIF. " Main Delivery Line Deletion Success
            ENDIF.  " Batch Insertion Success Flag
          ENDIF. " LIPS Selection
        ENDIF. " Delivery Split Success Flag
      ENDIF. " Compare LIPS & File Qty
    ENDIF. " Batch Removal Success Flag
  ELSE. " If material is not batch managed

*** Compare the LIPS Qty & GR File QTY
    IF GI_MARC_SPLIT_ITEM-QTY_EXPE GT GI_LIPS1-LFIMG.
****Process the record to error report***
      GW_REC_ERROR         = 'X'.
      GW_INPUT_STATUS_TAB  = 'E'.
      GW_ERROR_TYPE_TAB    = 'MARC'.
      LW_LIFMG             = GI_LIPS1-LFIMG .
      CONCATENATE TEXT-054 LW_LIFMG TEXT-055
      INTO GW_REJECT_REASON_TAB SEPARATED BY SPACE.

      GW_PROCESS_STATUS = 'F'.
      GW_REASON         = TEXT-054.
      GW_STATUS         = TEXT-050.
      PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
      PERFORM SPLIT_DEL_TABLE_UPDATE.
** Begin of changes by USPRADI for New program on 08.12.2021
** Update RECH and RECL tables with error status and reason
      READ TABLE GT_GR_RECL INTO GI_GR_RECL WITH KEY PO_NO = GI_MARC_SPLIT_ITEM-PO_NO
                                                     PO_LINE_NO = GI_MARC_SPLIT_ITEM-PO_LINE_NO
                                                     LP = GI_MARC_SPLIT_ITEM-LP
                                                     CART_LP = GI_MARC_SPLIT_ITEM-CART_LP.
      IF SY-SUBRC IS INITIAL.
        GV_TABIX = SY-TABIX.
        GI_GR_RECL-PROCESS_STATUS = 'M'.
        GI_GR_RECL-REASON = GW_REJECT_REASON_TAB.
        MODIFY GT_GR_RECL FROM GI_GR_RECL INDEX GV_TABIX.
      ENDIF.
** End of changes by USPRADI for New program on 08.12.2021
      EXIT.
    ELSE.

***Error Reprocessing -- Fail Step = 20 = Split Delivery
      IF P_REPR = 'X'.
        GW_FAIL_STEP_NO = 20.
*        IF gi_marc_split_item-process_status = 'F'
*          AND gi_marc_split_item-fail_step LE gw_fail_step_no.
        IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*Getting Next New Delivery from NR Object
          CALL FUNCTION 'NUMBER_GET_NEXT'
            EXPORTING
***Begin of changes by 503187592 CHG0158498 DE3K9A06L1
*             nr_range_nr             = '17'
              NR_RANGE_NR             = 'ZS'
***End of changes by 503187592 CHG0158498 DE3K9A06L1
              OBJECT                  = 'RV_BELEG'
              QUANTITY                = '1'
            IMPORTING
              NUMBER                  = GW_NEW_DELI
            EXCEPTIONS
              INTERVAL_NOT_FOUND      = 1
              NUMBER_RANGE_NOT_INTERN = 2
              OBJECT_NOT_FOUND        = 3
              QUANTITY_IS_0           = 4
              QUANTITY_IS_NOT_1       = 5
              INTERVAL_OVERFLOW       = 6
              BUFFER_OVERFLOW         = 7
              OTHERS                  = 8.
          IF SY-SUBRC NE 0.
****Process the record to error report***
            GW_SPLIT_FLAG = ' '.
            GW_CUS_RET_ERROR = 'X'.
            GW_REJECT_REASON_TAB = TEXT-056.
            GI_ERROR_FILE-REJECT_REASON = TEXT-056.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'MARC'.
            GW_SAP_ERROR_FLAG    = 'X'.

            GW_PROCESS_STATUS = 'F'.
            GW_FAIL_STEP      = 20.
            GW_FAIL_STEP_DESC = TEXT-056.
            GW_REASON         = TEXT-056.
            GW_STATUS         = TEXT-056.
** Begin of changes by USPRADI for New program on 08.12.2021
** Incase of error populate, the RECH and RECL tables with error message and step no.
            GV_STATUS = 'M'.
            GV_STEP = '20'.
            GV_STEP_DESCR = TEXT-056.
            GW_MSG_ID = ' '.
            GW_MSG_NO = ' '.
            PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_REASON GW_MSG_ID GW_MSG_NO LW_MBLNR
                               LT_BAPI_GM_ITEM.
** End of changes by USPRADI for New program on 08.12.2021
            PERFORM SPLIT_DEL_TABLE_UPDATE.
            PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
            PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
          ELSE.
***Populate data for Delivery Split
***Populate Item data for BAPI BAPI_OUTB_DELIVERY_SPLIT_DEC

            GW_OLD_DELI                       = GI_LIPS1-VBELN.
            GI_SPLIT_ITEMDATA-DELIV_NUMB      = GW_NEW_DELI.
            GI_SPLIT_ITEMDATA-DELIV_ITEM      = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
            GI_SPLIT_ITEMDATA-CURR_QTY        = 'B'.
            GI_SPLIT_ITEMDATA-DLV_QTY_STOCK   = GI_MARC_SPLIT_ITEM-QTY_EXPE.
            GI_SPLIT_ITEMDATA-BASE_UOM        = GI_MARC_SPLIT_ITEM-BAPI_ENTRY_UOM.
            GI_SPLIT_ITEMDATA-SALES_QTY_NUM   = GI_LIPS1-UMVKZ.
            GI_SPLIT_ITEMDATA-SALES_QTY_DENOM = GI_LIPS1-UMVKN.
            GI_SPLIT_ITEMDATA-CONVFACTOR      = GI_LIPS1-UMREF.
            APPEND GI_SPLIT_ITEMDATA TO GT_SPLIT_ITEMDATA.
            CLEAR:GI_SPLIT_ITEMDATA.

***Post BAPI for Delivery Split
            PERFORM DELIVERY_SPLIT USING GW_OLD_DELI GW_NEW_DELI GT_SPLIT_ITEMDATA GW_SPLIT_FLAG.
          ENDIF.
        ELSE.
          GW_SPLIT_FLAG = 'X'.
** Begin of changes by USPRADI  JE3K905475 on 02.03.2022
          GW_SPLIT_DEL_NO         =   GI_MARC_SPLIT_ITEM-SPLIT_DEL_NO.
          GW_SPLIT_DEL_LINE_NO    =   GI_MARC_SPLIT_ITEM-SPLIT_DEL_LINE_NO.
          GW_SPLIT_DEL_QTY        =   GI_MARC_SPLIT_ITEM-SPLIT_DEL_QTY.
** End of changes by USPRADI  JE3K905475 on 02.03.2022
        ENDIF.
      ELSE.
*Getting Next New Delivery from NR Object
        CALL FUNCTION 'NUMBER_GET_NEXT'
          EXPORTING
***Begin of changes by 503187592 CHG0158498 DE3K9A06L1
*           nr_range_nr             = '17'
            NR_RANGE_NR             = 'ZS'
***End of changes by 503187592 CHG0158498 DE3K9A06L1
            OBJECT                  = 'RV_BELEG'
            QUANTITY                = '1'
          IMPORTING
            NUMBER                  = GW_NEW_DELI
          EXCEPTIONS
            INTERVAL_NOT_FOUND      = 1
            NUMBER_RANGE_NOT_INTERN = 2
            OBJECT_NOT_FOUND        = 3
            QUANTITY_IS_0           = 4
            QUANTITY_IS_NOT_1       = 5
            INTERVAL_OVERFLOW       = 6
            BUFFER_OVERFLOW         = 7
            OTHERS                  = 8.
        IF SY-SUBRC NE 0.
****Process the record to error report***
          GW_SPLIT_FLAG = ' '.
          GW_CUS_RET_ERROR = 'X'.
          GW_REJECT_REASON_TAB = TEXT-056.
          GI_ERROR_FILE-REJECT_REASON = TEXT-056.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'MARC'.
          GW_SAP_ERROR_FLAG    = 'X'.

          GW_PROCESS_STATUS = 'F'.
          GW_FAIL_STEP      = 20.
          GW_FAIL_STEP_DESC = TEXT-056.
          GW_REASON         = TEXT-056.
          GW_STATUS         = TEXT-056.
** Begin of changes by USPRADI for New program on 08.12.2021
** Incase of error populate, the RECH and RECL tables with error message and step no.
          GV_STATUS = 'M'.
          GV_STEP = '20'.
          GV_STEP_DESCR = TEXT-056.
          GW_MSG_ID = ' '.
          GW_MSG_NO = ' '.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_REASON GW_MSG_ID GW_MSG_NO LW_MBLNR
                             LT_BAPI_GM_ITEM.
** End of changes by USPRADI for New program on 08.12.2021
          PERFORM SPLIT_DEL_TABLE_UPDATE.
          PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        ELSE.
***Populate data for Delivery Split
***Populate Item data for BAPI BAPI_OUTB_DELIVERY_SPLIT_DEC

          GW_OLD_DELI                       = GI_LIPS1-VBELN.
          GI_SPLIT_ITEMDATA-DELIV_NUMB      = GW_NEW_DELI.
          GI_SPLIT_ITEMDATA-DELIV_ITEM      = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
          GI_SPLIT_ITEMDATA-CURR_QTY        = 'B'.
          GI_SPLIT_ITEMDATA-DLV_QTY_STOCK   = GI_MARC_SPLIT_ITEM-QTY_EXPE.
          GI_SPLIT_ITEMDATA-BASE_UOM        = GI_MARC_SPLIT_ITEM-BAPI_ENTRY_UOM.
          GI_SPLIT_ITEMDATA-SALES_QTY_NUM   = GI_LIPS1-UMVKZ.
          GI_SPLIT_ITEMDATA-SALES_QTY_DENOM = GI_LIPS1-UMVKN.
          GI_SPLIT_ITEMDATA-CONVFACTOR      = GI_LIPS1-UMREF.
          APPEND GI_SPLIT_ITEMDATA TO GT_SPLIT_ITEMDATA.
          CLEAR:GI_SPLIT_ITEMDATA.

***Post BAPI for Delivery Split
          PERFORM DELIVERY_SPLIT USING GW_OLD_DELI GW_NEW_DELI GT_SPLIT_ITEMDATA GW_SPLIT_FLAG.
        ENDIF.
      ENDIF.

***IF Delivery Split is successful then check main delivery line qty = 0 then delete line item
      IF GW_SPLIT_FLAG = 'X'.
****Get Main delivery details
        SELECT SINGLE VBELN POSNR MATNR WERKS CHARG LFIMG MEINS UMVKZ UMVKN
          INTO GI_LIPS_DELETE
          FROM LIPS
          WHERE VBELN = GI_MARC_SPLIT_ITEM-PO_NO
          AND   POSNR = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
        IF SY-SUBRC = 0.
          IF GI_LIPS_DELETE-LFIMG EQ 0.
***  Populate Structures for BAPI_OBD_DELIVERY_CHANGE to delete main delivery line item
            GI_DEL_HEADER_DATA-DELIV_NUMB    = GI_LIPS_DELETE-VBELN.
            GI_DEL_HEADER_CONTROL-DELIV_NUMB = GI_LIPS_DELETE-VBELN.
            GW_DEL_DELIVERY                  = GI_LIPS_DELETE-VBELN.

            GI_DEL_ITEM_DATA-DELIV_NUMB = GI_LIPS_DELETE-VBELN.
            GI_DEL_ITEM_DATA-DELIV_ITEM = GI_LIPS_DELETE-POSNR.
            GI_DEL_ITEM_DATA-MATERIAL   = GI_LIPS_DELETE-MATNR.
            GI_DEL_ITEM_DATA-DLV_QTY    = GI_LIPS_DELETE-LFIMG.
            GI_DEL_ITEM_DATA-FACT_UNIT_NOM      = GI_LIPS_DELETE-UMVKZ.
            GI_DEL_ITEM_DATA-FACT_UNIT_DENOM    = GI_LIPS_DELETE-UMVKN.

            GI_DEL_ITEM_CONTROL-DELIV_NUMB = GI_LIPS_DELETE-VBELN.
            GI_DEL_ITEM_CONTROL-DELIV_ITEM = GI_LIPS_DELETE-POSNR.
            GI_DEL_ITEM_CONTROL-DEL_ITEM   = 'X'.

            IF GI_DEL_ITEM_DATA IS NOT INITIAL.
              APPEND GI_DEL_ITEM_DATA TO GT_DEL_ITEM_DATA.
              APPEND GI_DEL_ITEM_CONTROL TO GT_DEL_ITEM_CONTROL.
              CLEAR: GI_DEL_ITEM_DATA,GI_DEL_ITEM_CONTROL.
            ENDIF.

***Error Reprocessing -- Fail Step = 40 = Delete Line Item
            IF P_REPR = 'X'.
              GW_FAIL_STEP_NO = 40.
              IF GI_MARC_SPLIT_ITEM-PROCESS_STATUS = 'F'
                AND GI_MARC_SPLIT_ITEM-FAIL_STEP LE GW_FAIL_STEP_NO.
***    Call BAPI BAPI_OBD_DELIVERY_CHANGE to remove Batch & Batch Split Line Items
                PERFORM DELIVERY_ITEM_DELETION.
              ELSE.
                GW_DELETE_FLAG = 'X'.
              ENDIF.
            ELSE.
***Delta Run
***    Call BAPI BAPI_OBD_DELIVERY_CHANGE to remove Batch & Batch Split Line Items
              PERFORM DELIVERY_ITEM_DELETION.
            ENDIF.
          ELSE.
            GW_DELETE_FLAG = 'X'.
          ENDIF.
** Begin of changes by USPRADI JE3K905848 on 15.03.2022
        ELSE. "incase delivery is already deleted
          IF P_REPR = 'X' ."AND gv_fstep LE gw_fail_step_no.
            GW_DELETE_FLAG = 'X'.
          ENDIF.
** End of changes by USPRADI JE3K905848 on 15.03.2022
        ENDIF. " Main Delivery Data after Spliting

***IF main delivery line qty = 0 then delete line item success then go for picking
*                    or qty NE 0 then go for picking
        IF GW_DELETE_FLAG = 'X'.

****Error Reprocessing
          IF P_REPR = 'X'.
****Split Delivery Fail Step, New Delivery created
            IF GW_NEW_DELI IS NOT INITIAL.
              SELECT SINGLE VBELN POSNR MATNR WERKS CHARG LFIMG MEINS UMVKZ UMVKN FROM LIPS
                   INTO GI_LIPS_SPLIT WHERE VBELN = GW_NEW_DELI.
            ELSE.
              SELECT SINGLE VBELN POSNR MATNR WERKS CHARG LFIMG MEINS UMVKZ UMVKN FROM LIPS
               INTO GI_LIPS_SPLIT WHERE VBELN = GI_MARC_SPLIT_ITEM-SPLIT_DEL_NO.
            ENDIF.
          ELSE.
** Delta Run
            SELECT SINGLE VBELN POSNR MATNR WERKS CHARG LFIMG MEINS UMVKZ UMVKN FROM LIPS
              INTO GI_LIPS_SPLIT WHERE VBELN = GW_NEW_DELI.
          ENDIF.

          IF SY-SUBRC = 0.
*    **Populate Delivery Picking
*    *Populate Picking Header Info
            CLEAR:GI_VBKOK_WA.
            GI_VBKOK_WA-VBELN_VL = GI_LIPS_SPLIT-VBELN.
            GI_VBKOK_WA-VBELN    = GI_LIPS_SPLIT-VBELN.
*    *Populate Picking Item Info
            GI_VBPOK_TAB-VBELN_VL = GI_LIPS_SPLIT-VBELN.
            GI_VBPOK_TAB-POSNR_VL = GI_LIPS_SPLIT-POSNR.
            GI_VBPOK_TAB-VBELN    = GI_LIPS_SPLIT-VBELN.
            GI_VBPOK_TAB-POSNN    = GI_LIPS_SPLIT-POSNR.
            GI_VBPOK_TAB-MATNR    = GI_LIPS_SPLIT-MATNR.
            GI_VBPOK_TAB-CHARG    = GI_MARC_SPLIT_ITEM-BAPI_BATCH.
            GI_VBPOK_TAB-WERKS    = GI_LIPS_SPLIT-WERKS.
            GI_VBPOK_TAB-PIKMG    = GI_LIPS_SPLIT-LFIMG.
            GI_VBPOK_TAB-UMVKZ    = GI_LIPS_SPLIT-UMVKZ.
            GI_VBPOK_TAB-UMVKN    = GI_LIPS_SPLIT-UMVKN.
            APPEND GI_VBPOK_TAB TO GT_VBPOK_TAB.
            CLEAR:GI_VBPOK_TAB.

***Error Reprocessing -- Fail Step = 50 = Picking
            IF P_REPR = 'X'.
              GW_FAIL_STEP_NO = 50.
*              IF gi_marc_split_item-process_status = 'F'
*                AND gi_marc_split_item-fail_step LE gw_fail_step_no.
              IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*    *** Post BAPI for Main Delivery Picking
                PERFORM DELIVERY_PICKING USING GI_VBKOK_WA GT_VBPOK_TAB GW_PICK_FLAG.
              ELSE.
                GW_PICK_FLAG = 'X'.
              ENDIF.
            ELSE.
***  Delta Run
*    *** Post BAPI for Main Delivery Picking
              PERFORM DELIVERY_PICKING USING GI_VBKOK_WA GT_VBPOK_TAB GW_PICK_FLAG.
            ENDIF.

*    **IF main delivery picking is successfull then go for PGI process
            IF GW_PICK_FLAG = 'X'.

*    **Populating data for PGI
              CLEAR:GI_PGI_HEADER_DATA,GI_PGI_HEADER_CONTROL,GI_PGI_DELIVERY.
              GI_PGI_HEADER_DATA-DELIV_NUMB     = GI_LIPS_SPLIT-VBELN.
              GI_PGI_HEADER_CONTROL-DELIV_NUMB  = GI_LIPS_SPLIT-VBELN.
              GI_PGI_HEADER_CONTROL-POST_GI_FLG = 'X'.
              GI_PGI_DELIVERY                   = GI_LIPS_SPLIT-VBELN.

***Error Reprocessing -- Fail Step = 60 = PGI
              IF P_REPR = 'X'.
                GW_FAIL_STEP_NO = 60.
*                IF gi_marc_split_item-process_status = 'F'
*                  AND gi_marc_split_item-fail_step LE gw_fail_step_no.
                IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*    *** Post BAPI for Main Delivery PGI
                  PERFORM DELIVERY_PGI USING  GI_PGI_HEADER_DATA GI_PGI_HEADER_CONTROL GI_PGI_DELIVERY GW_PGI_FLAG.
                ELSE.
                  GW_PGI_FLAG = 'X'.
** Begin of changes by USPRADI JE3K905475 on 02.03.2022
                  GW_PGI_GR_NO       =  GI_MARC_SPLIT_ITEM-PGI_GR_NO.
                  GW_PGI_GR_LINE_NO  =  GI_MARC_SPLIT_ITEM-PGI_GR_LINE_NO.
                  GW_PGI_GR_QTY      =  GI_MARC_SPLIT_ITEM-PGI_GR_QTY.
                  GW_PGI_GR_YEAR     =  GI_MARC_SPLIT_ITEM-PGI_GR_YEAR.
                  GW_PGI_MOVE_TYPE   =  GI_MARC_SPLIT_ITEM-PGI_MOVE_TYPE.
** End of changes by USPRADI JE3K905475 on 02.03.2022
                ENDIF.
              ELSE.
***  Delta Run
*    *** Post BAPI for Main Delivery PGI
                PERFORM DELIVERY_PGI USING  GI_PGI_HEADER_DATA GI_PGI_HEADER_CONTROL GI_PGI_DELIVERY GW_PGI_FLAG.
              ENDIF.

*    **IF main delivery PGI is successful then go for Inspection
              IF GW_PGI_FLAG = 'X'.
*    **Populate data for Inspection
                GI_INSP_DATA-DELIV_NUMB = GI_LIPS_SPLIT-VBELN.
                GI_INSP_DATA-DELIV_ITEM = GI_LIPS_SPLIT-POSNR.
                GI_INSP_DATA-MATERIAL   = GI_LIPS_SPLIT-MATNR.
                GI_INSP_DATA-QUAN       = GI_LIPS_SPLIT-LFIMG.
                GI_INSP_DATA-UNIT       = GI_LIPS_SPLIT-MEINS.
                GI_INSP_DATA-INSPECTION_DATE = SY-DATUM.
                GI_INSP_DATA-DEC_CODE   = GI_MARC_SPLIT_ITEM-BAPI_DEC_CODE.
                GI_INSP_DATA-FU_CODE    = GI_MARC_SPLIT_ITEM-BAPI_FU_CODE.
                GI_INSP_DATA-INSPECTOR  = SY-UNAME.
                GI_INSP_DATA-LFU_RESPONSIBLE  = SY-UNAME.

                GI_LONGTEXT-VBELN       = GI_LIPS_SPLIT-VBELN.
                GI_LONGTEXT-POSNR       = GI_LIPS_SPLIT-POSNR.
                GI_INSP_DATA-LONGTEXT   = GI_LONGTEXT.
                APPEND GI_INSP_DATA TO GT_INSP_DATA.
                CLEAR: GI_INSP_DATA.

***Error Reprocessing -- Fail Step = 70 = Inspection
                IF P_REPR = 'X'.
                  GW_FAIL_STEP_NO = 70.
*                  IF gi_marc_split_item-process_status = 'F'
*                    AND gi_marc_split_item-fail_step LE gw_fail_step_no.
                  IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*    **Post BAPI for Main Delivery Inspection
                    PERFORM DELIVERY_INSPECTION USING GT_INSP_DATA GW_INSP_FLAG.
                  ELSE.
                    GW_INSP_FLAG = 'X'.
** Begin of changes by USPRADI JE3K905475 on 02.03.2022
                    GW_INSP_NO = GI_MARC_SPLIT_ITEM-INSP_NO.
** End of changes by USPRADI JE3K905475 on 02.03.2022
                  ENDIF.
                ELSE.
***  Delta Run
*    **Post BAPI for Main Delivery Inspection
                  PERFORM DELIVERY_INSPECTION USING GT_INSP_DATA GW_INSP_FLAG.
                ENDIF.

*    **IF main delivery PGI is successful then go for Inspection
                IF GW_INSP_FLAG = 'X'.
                  IF GI_MARC_SPLIT_ITEM-PROD_STAT EQ 'RF'.
                    GW_PROCESS_STATUS = 'C'.
                    GW_STATUS = ' '.
                    PERFORM SPLIT_DEL_TABLE_UPDATE.
                    GW_INPUT_STATUS_TAB = 'C'.
                    PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
                  ELSE.
*    **Populate Data for Goods Movement
                    GI_BAPI_GM_HEAD_CUS-DOC_DATE      = SY-DATUM.   "Document Date
                    GI_BAPI_GM_HEAD_CUS-PSTNG_DATE    = SY-DATUM.   "Posting Date
                    GI_BAPI_GM_HEAD_CUS-HEADER_TXT     = GI_MARC_SPLIT_ITEM-BAPI_HEADER_TXT. "TRAN_SEQ_NO
                    GI_BAPI_GM_HEAD_SH-BILL_OF_LADING  = GI_MARC_SPLIT_ITEM-BAPI_BILL_OF_LADING. "cusIPPER_BL_NO
                    GI_BAPI_GM_HEAD_CUS-REF_DOC_NO     = GI_MARC_SPLIT_ITEM-BAPI_VENDOR_ID. "VEND_ID / "PO_NO
                    GI_BAPI_GM_ITEM_CUS-MATERIAL  = GI_LIPS_SPLIT-MATNR. "SKU
                    GI_BAPI_GM_ITEM_CUS-ENTRY_UOM = GI_LIPS_SPLIT-MEINS.. "UOM_ABBREV
                    GI_BAPI_GM_ITEM_CUS-ENTRY_QNT = GI_LIPS_SPLIT-LFIMG. "QTY_EXPE
                    GI_BAPI_GM_ITEM_CUS-PLANT     = GI_LIPS_SPLIT-WERKS. "COMP_CODE
                    GI_BAPI_GM_ITEM_CUS-BATCH     = GI_MARC_SPLIT_ITEM-BAPI_BATCH. "LOT
                    GI_BAPI_GM_ITEM_CUS-UNLOAD_PT = GI_MARC_SPLIT_ITEM-BAPI_UNLOAD_PT. "CART_LP / "LP
                    GI_BAPI_GM_ITEM_CUS-ITEM_TEXT = GI_MARC_SPLIT_ITEM-BAPI_ITEM_TEXT. "Item Text
                    GI_BAPI_GM_ITEM_CUS-MVT_IND   = ' '.  "Movement Indicator

*    ****Transformations****
                    GI_BAPI_GM_ITEM_CUS-MOVE_TYPE = GI_MARC_SPLIT_ITEM-BAPI_MOVE_TYPE. "Movement Type
                    GI_BAPI_GM_ITEM_CUS-MOVE_REAS = GI_MARC_SPLIT_ITEM-BAPI_MOVE_REAS. "Reason for Goods movement
                    GI_BAPI_GM_ITEM_CUS-STGE_LOC  = GI_MARC_SPLIT_ITEM-BAPI_STGE_LOC.  "Storage Location
                    GI_BAPI_GM_ITEM_CUS-MOVE_STLOC  = GI_MARC_SPLIT_ITEM-BAPI_MOVE_STLOC.  " Des Storage Location
                    GI_BAPI_GM_ITEM_CUS-STCK_TYPE = GI_MARC_SPLIT_ITEM-BAPI_STCK_TYPE. "Stock Type
                    GI_BAPI_GM_CODE_CUS-GM_CODE   = GI_MARC_SPLIT_ITEM-BAPI_GM_CODE."'03'."  "GM_CODE

                    APPEND GI_BAPI_GM_ITEM_CUS TO GT_BAPI_GM_ITEM_CUS.
                    CLEAR:GI_BAPI_GM_ITEM_CUS.

***Error Reprocessing -- Fail Step = 80 = Goods Movement
                    IF P_REPR = 'X'.
                      GW_FAIL_STEP_NO = 80.
*                      IF gi_marc_split_item-process_status = 'F'
*                        AND gi_marc_split_item-fail_step LE gw_fail_step_no.
                      IF GV_PROCESS_STATUS = 'E' AND GV_FSTEP LE GW_FAIL_STEP_NO.
*    **Post BAPI for Main Delivery Inspection
                        PERFORM DELIVERY_GOODS_MVMT USING GW_GOODS_FLAG.
                      ELSE.
                        GW_GOODS_FLAG = 'X'.
** Begin of changes by USPRADI JE3K905475 on 02.03.2022
                        GW_GR_NO       =   GI_MARC_SPLIT_ITEM-GR_NO.
                        GW_GR_YEAR     =   GI_MARC_SPLIT_ITEM-GR_YEAR.
                        GW_GR_LINE_NO  =  GI_MARC_SPLIT_ITEM-GR_LINE_NO.
                        GW_GR_QTY_CUS  =   GI_MARC_SPLIT_ITEM-GR_QTY.
                        GW_GR_MOVE_TYPE  =   GI_MARC_SPLIT_ITEM-GR_MOVE_TYPE.
** End of changes by USPRADI JE3K905475 on 02.03.2022
                      ENDIF.
                    ELSE.
***  Delta Run
*    **Post BAPI for Main Delivery Inspection
                      PERFORM DELIVERY_GOODS_MVMT USING GW_GOODS_FLAG.
                    ENDIF.

*    **IF main delivery Goods Receipt is successful
                    IF GW_GOODS_FLAG = 'X'.
                    ENDIF. " Goods Receipt Success Flag
                  ENDIF. " Product Status NE 'RF'
                ENDIF. " Inspection Success Flag
              ENDIF. " PGI Success Flag
            ENDIF. " Picking Success Flag
          ENDIF. " LIPS Selection
        ENDIF. " Main Delivery Line Deletion Success
      ENDIF. " Delivery Split Success Flag
    ENDIF. " Compare LIPS & File Qty
  ENDIF. " Material is Batch Managed
ENDFORM.                    " CUS_RET_SPLIT_DEL
*&---------------------------------------------------------------------*
*&      Form  DELIVERY_BATCH_REMOVE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DELIVERY_BATCH_REMOVE .
  DATA: LT_BAPI_GM_ITEM TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.
  DATA: LW_MBLNR TYPE CHAR10.
  IF GT_OBD_ITEM_DATA IS NOT INITIAL.
    CALL FUNCTION 'BAPI_OUTB_DELIVERY_CHANGE'
      EXPORTING
        HEADER_DATA    = GI_OBD_HEADER_DATA
        HEADER_CONTROL = GI_OBD_HEADER_CONTROL
        DELIVERY       = GW_OBD_DELIVERY
      TABLES
        ITEM_DATA      = GT_OBD_ITEM_DATA
        ITEM_CONTROL   = GT_OBD_ITEM_CONTROL
        RETURN         = GT_OBD_RETURN.
    IF GT_OBD_RETURN IS INITIAL.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          WAIT = 'X'.
      GW_OBD_FLAG = 'X'.
** Begin of changes by USPRADI DE3K9A0D94 on 13.05.2022
*      gv_status = 'C'.
      GV_STATUS = 'I'.
** End of changes by USPRADI DE3K9A0D94 on 13.05.2022
      CLEAR: GV_STEP, GV_STEP_DESCR, GW_MESSAGE, GW_MSG_ID, GW_MSG_NO.
      PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                              LT_BAPI_GM_ITEM.
      GW_PROCESS_STATUS = 'I'.
      GW_STATUS = TEXT-052.
      PERFORM SPLIT_DEL_TABLE_UPDATE.

    ELSE.
      READ TABLE GT_OBD_RETURN INTO GI_OBD_RETURN WITH KEY TYPE = 'E'.
      IF SY-SUBRC = 0.
        GW_OBD_FLAG = ' '.
        CONCATENATE GI_OBD_RETURN-ID GI_OBD_RETURN-NUMBER INTO GW_BAPI_ERROR.
        IF GW_BAPI_ERROR IN S_RETURN.
          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              ID         = GI_OBD_RETURN-ID
              NUMBER     = GI_OBD_RETURN-NUMBER
              LANGUAGE   = SY-LANGU
              TEXTFORMAT = SPACE
              MESSAGE_V1 = GI_OBD_RETURN-MESSAGE_V1
              MESSAGE_V2 = GI_OBD_RETURN-MESSAGE_V2
              MESSAGE_V3 = GI_OBD_RETURN-MESSAGE_V3
              MESSAGE_V4 = GI_OBD_RETURN-MESSAGE_V4
            IMPORTING
              MESSAGE    = GW_MESSAGE.

          GW_CUS_RET_ERROR = 'X'.
          GW_REJECT_REASON_TAB = GW_MESSAGE.
          GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'SAP'.
          GW_SAP_ERROR_FLAG    = 'X'.
          GW_MSG_ID            = GI_OBD_RETURN-ID.
          GW_MSG_NO            = GI_OBD_RETURN-NUMBER.

          GW_PROCESS_STATUS = 'F'.
          GW_FAIL_STEP      = 10.
          GW_FAIL_STEP_DESC = TEXT-053.
          GW_REASON         = GW_MESSAGE.
          GW_STATUS         = TEXT-053.
** Incase of error populate, the RECH and RECL tables with error message and step no.
          GV_STATUS = 'E'.
          GV_STEP = '10'.
          GV_STEP_DESCR = TEXT-053.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                              LT_BAPI_GM_ITEM.
          PERFORM SPLIT_DEL_TABLE_UPDATE.
          PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        ELSE.
          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              ID         = GI_OBD_RETURN-ID
              NUMBER     = GI_OBD_RETURN-NUMBER
              LANGUAGE   = SY-LANGU
              TEXTFORMAT = SPACE
              MESSAGE_V1 = GI_OBD_RETURN-MESSAGE_V1
              MESSAGE_V2 = GI_OBD_RETURN-MESSAGE_V2
              MESSAGE_V3 = GI_OBD_RETURN-MESSAGE_V3
              MESSAGE_V4 = GI_OBD_RETURN-MESSAGE_V4
            IMPORTING
              MESSAGE    = GW_MESSAGE.

          GW_CUS_RET_ERROR = 'X'.
          GW_REJECT_REASON_TAB = GW_MESSAGE.
          GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'MARC'.
          GW_SAP_ERROR_FLAG    = 'X'.
          GW_MSG_ID            = GI_OBD_RETURN-ID.
          GW_MSG_NO            = GI_OBD_RETURN-NUMBER.

          GW_PROCESS_STATUS = 'F'.
          GW_FAIL_STEP      = 10.
          GW_FAIL_STEP_DESC = TEXT-053.
          GW_REASON         = GW_MESSAGE.
          GW_STATUS         = TEXT-053.
** Update RECH and RECL tables with error status and reason
          GV_STATUS = 'M'.
          GV_STEP = '10'.
          GV_STEP_DESCR = TEXT-053.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                              LT_BAPI_GM_ITEM.
          PERFORM SPLIT_DEL_TABLE_UPDATE.
          PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.                    " DELIVERY_BATCH_REMOVE
*&---------------------------------------------------------------------*
*&      Form  SPLIT_DEL_TABLE_UPDATE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SPLIT_DEL_TABLE_UPDATE .
  DATA: LI_ZTMM_MARC_GR_CUS TYPE ZTMM_MARC_GR_CUS.

  SELECT SINGLE * INTO LI_ZTMM_MARC_GR_CUS FROM ZTMM_MARC_GR_CUS
  WHERE TRAN_NO   = GI_MARC_SPLIT_ITEM-TRAN_NO
  AND TRAN_SEQ_NO = GI_MARC_SPLIT_ITEM-TRAN_SEQ_NO
  AND DATA_TYPE   = GI_MARC_SPLIT_ITEM-DATA_TYPE
  AND COMP_CODE   = GI_MARC_SPLIT_ITEM-COMP_CODE
  AND PO_NO       = GI_MARC_SPLIT_ITEM-PO_NO
  AND PO_LINE_NO  = GI_MARC_SPLIT_ITEM-PO_LINE_NO
  AND BAPI_UNLOAD_PT = GI_MARC_SPLIT_ITEM-BAPI_UNLOAD_PT.

  IF LI_ZTMM_MARC_GR_CUS IS NOT INITIAL.
    IF LI_ZTMM_MARC_GR_CUS-STATUS IS NOT INITIAL.
      CONCATENATE LI_ZTMM_MARC_GR_CUS-STATUS '/' GW_STATUS INTO LI_ZTMM_MARC_GR_CUS-STATUS.
    ELSE.
      CONCATENATE LI_ZTMM_MARC_GR_CUS-STATUS GW_STATUS INTO LI_ZTMM_MARC_GR_CUS-STATUS.
    ENDIF.

    UPDATE ZTMM_MARC_GR_CUS SET PROCESS_STATUS = GW_PROCESS_STATUS
                                FAIL_STEP      = GW_FAIL_STEP
                                FAIL_STEP_DESC = GW_FAIL_STEP_DESC
                                REASON         = GW_REASON
                                STATUS         = LI_ZTMM_MARC_GR_CUS-STATUS
                                SPLIT_DEL_NO   = GW_SPLIT_DEL_NO
                                SPLIT_DEL_LINE_NO = GW_SPLIT_DEL_LINE_NO
                                SPLIT_DEL_QTY     = GW_SPLIT_DEL_QTY
                                PGI_GR_NO         = GW_PGI_GR_NO
                                PGI_GR_LINE_NO    = GW_PGI_GR_LINE_NO
                                PGI_GR_QTY        = GW_PGI_GR_QTY
                                PGI_GR_YEAR       = GW_PGI_GR_YEAR
                                PGI_MOVE_TYPE     = GW_PGI_MOVE_TYPE
                                INSP_NO           = GW_INSP_NO
                                GR_NO             = GW_GR_NO
                                GR_LINE_NO        = GW_GR_LINE_NO
                                GR_YEAR           = GW_GR_YEAR
                                GR_QTY            = GW_GR_QTY_CUS
                                GR_MOVE_TYPE      = GW_GR_MOVE_TYPE
                                CHANGE_DATE   = SY-DATUM
                                CHANGE_TIME   = SY-UZEIT
                                CHANGE_USER   = SY-UNAME
                                REJECT_REASON = GW_REJECT_REASON_TAB
                                ERROR_TYPE    = GW_ERROR_TYPE_TAB
                             WHERE  TRAN_NO   = GI_MARC_SPLIT_ITEM-TRAN_NO
                                 AND   TRAN_SEQ_NO = GI_MARC_SPLIT_ITEM-TRAN_SEQ_NO
                                 AND   DATA_TYPE   = GI_MARC_SPLIT_ITEM-DATA_TYPE
                                 AND   COMP_CODE   = GI_MARC_SPLIT_ITEM-COMP_CODE
                                 AND   PO_NO       = GI_MARC_SPLIT_ITEM-PO_NO
                                 AND   PO_LINE_NO  = GI_MARC_SPLIT_ITEM-PO_LINE_NO
                                 AND   BAPI_UNLOAD_PT = GI_MARC_SPLIT_ITEM-BAPI_UNLOAD_PT.
    IF SY-SUBRC = 0.
      COMMIT WORK.
    ENDIF.
  ELSE.
    UPDATE ZTMM_MARC_GR_CUS SET PROCESS_STATUS = GW_PROCESS_STATUS
                                FAIL_STEP      = GW_FAIL_STEP
                                FAIL_STEP_DESC = GW_FAIL_STEP_DESC
                                REASON         = GW_REASON
                                STATUS         = GW_STATUS
                                SPLIT_DEL_NO   = GW_SPLIT_DEL_NO
                                SPLIT_DEL_LINE_NO = GW_SPLIT_DEL_LINE_NO
                                SPLIT_DEL_QTY     = GW_SPLIT_DEL_QTY
                                PGI_GR_NO         = GW_PGI_GR_NO
                                PGI_GR_LINE_NO    = GW_PGI_GR_LINE_NO
                                PGI_GR_QTY        = GW_PGI_GR_QTY
                                PGI_GR_YEAR       = GW_PGI_GR_YEAR
                                PGI_MOVE_TYPE     = GW_PGI_MOVE_TYPE
                                INSP_NO           = GW_INSP_NO
                                GR_NO             = GW_GR_NO
                                GR_LINE_NO        = GW_GR_LINE_NO
                                GR_YEAR           = GW_GR_YEAR
                                GR_QTY            = GW_GR_QTY_CUS
                                GR_MOVE_TYPE      = GW_GR_MOVE_TYPE
                                CHANGE_DATE   = SY-DATUM
                                CHANGE_TIME   = SY-UZEIT
                                CHANGE_USER   = SY-UNAME
                                REJECT_REASON = GW_REJECT_REASON_TAB
                                ERROR_TYPE    = GW_ERROR_TYPE_TAB
                             WHERE  TRAN_NO   = GI_MARC_SPLIT_ITEM-TRAN_NO
                                 AND   TRAN_SEQ_NO = GI_MARC_SPLIT_ITEM-TRAN_SEQ_NO
                                 AND   DATA_TYPE   = GI_MARC_SPLIT_ITEM-DATA_TYPE
                                 AND   COMP_CODE   = GI_MARC_SPLIT_ITEM-COMP_CODE
                                 AND   PO_NO       = GI_MARC_SPLIT_ITEM-PO_NO
                                 AND   PO_LINE_NO  = GI_MARC_SPLIT_ITEM-PO_LINE_NO
                                 AND   BAPI_UNLOAD_PT = GI_MARC_SPLIT_ITEM-BAPI_UNLOAD_PT.

    IF SY-SUBRC = 0.
      COMMIT WORK.
    ENDIF.
  ENDIF.
ENDFORM.                    " SPLIT_DEL_TABLE_UPDATE
*&---------------------------------------------------------------------*
*&      Form  DELIVERY_SPLIT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GW_OLD_DELI  text
*      -->P_GW_NEW_DELI  text
*      -->P_GT_SPLIT_ITEMDATA  text
*      -->P_GW_SPLIT_FLAG  text
*----------------------------------------------------------------------*
FORM DELIVERY_SPLIT  USING    PW_OLD_DELI
                              PW_NEW_DELI
                              PT_SPLIT_ITEMDATA
                              PW_SPLIT_FLAG.

  DATA: LW_VBELN TYPE  VBELN_VL,
        LW_POSNR TYPE  POSNR_VL,
        LW_LFIMG TYPE  LFIMG.

  DATA: LT_BAPI_GM_ITEM TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.
  DATA: LW_MBLNR TYPE CHAR10.
*    **Post BAPI for Delivery Split
  IF NOT PW_NEW_DELI IS INITIAL.
    CALL FUNCTION 'BAPI_OUTB_DELIVERY_SPLIT_DEC'
      EXPORTING
        DELIVERY              = PW_OLD_DELI
        DELIVERYNEW           = PW_NEW_DELI   "Will take the latest delivery number from Number Range Object
        DELIVERYITEMSBELONGTO = 'N'
        BUSINESSPROCESS       = 'Z001'
      TABLES
        ITEMDATA              = GT_SPLIT_ITEMDATA
        RETURN                = GT_SPLIT_RETURN.

    IF GT_SPLIT_RETURN IS INITIAL.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          WAIT = GC_X.
      PW_SPLIT_FLAG = 'X'.

      SELECT SINGLE VBELN POSNR LFIMG INTO (LW_VBELN, LW_POSNR, LW_LFIMG)
        FROM LIPS WHERE VBELN = PW_NEW_DELI.
      IF SY-SUBRC = 0.
        GW_SPLIT_DEL_NO         =   LW_VBELN.
        GW_SPLIT_DEL_LINE_NO    =   LW_POSNR.
        GW_SPLIT_DEL_QTY        =   LW_LFIMG.
      ENDIF.
** Begin of changes by USPRADI DE3K9A0D94 on 13.05.2022
*      gv_status = 'C'.
      GV_STATUS = 'I'.
** End of changes by USPRADI DE3K9A0D94 on 13.05.2022
      CLEAR: GV_STEP, GV_STEP_DESCR, GW_MESSAGE, GW_MSG_ID, GW_MSG_NO.
      PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                              LT_BAPI_GM_ITEM.
      GW_PROCESS_STATUS = 'I'.
      GW_STATUS = TEXT-067.
      PERFORM SPLIT_DEL_TABLE_UPDATE.

****
    ELSE. "" Error incase of BAPI_OUTB_DELIVERY_SPLIT_DEC'
      READ TABLE GT_SPLIT_RETURN INTO GI_SPLIT_RETURN WITH KEY TYPE = 'E'.
      IF SY-SUBRC = 0.
        PW_SPLIT_FLAG = ' '.
        CONCATENATE GI_SPLIT_RETURN-ID GI_SPLIT_RETURN-NUMBER INTO GW_BAPI_ERROR.
        IF GW_BAPI_ERROR IN S_RETURN.
          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              ID         = GI_SPLIT_RETURN-ID
              NUMBER     = GI_SPLIT_RETURN-NUMBER
              LANGUAGE   = SY-LANGU
              TEXTFORMAT = SPACE
              MESSAGE_V1 = GI_SPLIT_RETURN-MESSAGE_V1
              MESSAGE_V2 = GI_SPLIT_RETURN-MESSAGE_V2
              MESSAGE_V3 = GI_SPLIT_RETURN-MESSAGE_V3
              MESSAGE_V4 = GI_SPLIT_RETURN-MESSAGE_V4
            IMPORTING
              MESSAGE    = GW_MESSAGE.

          GW_CUS_RET_ERROR = 'X'.
          GW_REJECT_REASON_TAB = GW_MESSAGE.
          GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'SAP'.
          GW_SAP_ERROR_FLAG    = 'X'.
          GW_MSG_ID            = GI_SPLIT_RETURN-ID.
          GW_MSG_NO            = GI_SPLIT_RETURN-NUMBER.

          GW_PROCESS_STATUS = 'F'.
          GW_FAIL_STEP      = 20.
          GW_FAIL_STEP_DESC = TEXT-056.
          GW_REASON         = GW_MESSAGE.
          GW_STATUS         = TEXT-056.
** Incase of error populate, the RECH and RECL tables with error message and step no.
          GV_STATUS = 'E'.
          GV_STEP = '20'.
          GV_STEP_DESCR = TEXT-056.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                LT_BAPI_GM_ITEM.
          PERFORM SPLIT_DEL_TABLE_UPDATE.
          PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        ELSE.
          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              ID         = GI_SPLIT_RETURN-ID
              NUMBER     = GI_SPLIT_RETURN-NUMBER
              LANGUAGE   = SY-LANGU
              TEXTFORMAT = SPACE
              MESSAGE_V1 = GI_SPLIT_RETURN-MESSAGE_V1
              MESSAGE_V2 = GI_SPLIT_RETURN-MESSAGE_V2
              MESSAGE_V3 = GI_SPLIT_RETURN-MESSAGE_V3
              MESSAGE_V4 = GI_SPLIT_RETURN-MESSAGE_V4
            IMPORTING
              MESSAGE    = GW_MESSAGE.

          GW_CUS_RET_ERROR = 'X'.
          GW_REJECT_REASON_TAB = GW_MESSAGE.
          GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'MARC'.
          GW_SAP_ERROR_FLAG    = 'X'.
          GW_MSG_ID            = GI_SPLIT_RETURN-ID.
          GW_MSG_NO            = GI_SPLIT_RETURN-NUMBER.

          GW_PROCESS_STATUS = 'F'.
          GW_FAIL_STEP      = 20.
          GW_FAIL_STEP_DESC = TEXT-056.
          GW_REASON         = GW_MESSAGE.
          GW_STATUS         = TEXT-056.
** Incase of error populate, the RECH and RECL tables with error message and step no.
          GV_STATUS = 'M'.
          GV_STEP = '20'.
          GV_STEP_DESCR = TEXT-056.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                LT_BAPI_GM_ITEM.
          PERFORM SPLIT_DEL_TABLE_UPDATE.
          PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " DELIVERY_SPLIT
*&---------------------------------------------------------------------*
*&      Form  DELIVERY_BATCH_INSERTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DELIVERY_BATCH_INSERTION .
  DATA: LT_BAPI_GM_ITEM TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.
  DATA: LW_MBLNR TYPE CHAR10.
  IF GT_BATCH_ITEM_DATA IS NOT INITIAL.
    CALL FUNCTION 'BAPI_OUTB_DELIVERY_CHANGE'
      EXPORTING
        HEADER_DATA    = GI_BATCH_HEADER_DATA
        HEADER_CONTROL = GI_BATCH_HEADER_CONTROL
        DELIVERY       = GW_BATCH_DELIVERY
      TABLES
        ITEM_DATA      = GT_BATCH_ITEM_DATA
        ITEM_CONTROL   = GT_BATCH_ITEM_CONTROL
        RETURN         = GT_BATCH_RETURN.
    IF GT_DEL_RETURN IS INITIAL.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          WAIT = 'X'.
      GW_BATCH_FLAG = 'X'.

** Begin of changes by USPRADI DE3K9A0D94 on 13.05.2022
*      gv_status = 'C'.
      GV_STATUS = 'I'.
** End of changes by USPRADI DE3K9A0D94 on 13.05.2022
      CLEAR: GV_STEP, GV_STEP_DESCR, GW_MESSAGE, GW_MSG_ID, GW_MSG_NO.
      PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                              LT_BAPI_GM_ITEM.
      GW_PROCESS_STATUS = 'I'.
      GW_STATUS = TEXT-070.
      PERFORM SPLIT_DEL_TABLE_UPDATE.
    ELSE.
      READ TABLE GT_BATCH_RETURN INTO GI_BATCH_RETURN WITH KEY TYPE = 'E'.
      IF SY-SUBRC = 0.
        GW_BATCH_FLAG = ' '.
        CONCATENATE GI_BATCH_RETURN-ID GI_BATCH_RETURN-NUMBER INTO GW_BAPI_ERROR.
        IF GW_BAPI_ERROR IN S_RETURN.
          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              ID         = GI_BATCH_RETURN-ID
              NUMBER     = GI_BATCH_RETURN-NUMBER
              LANGUAGE   = SY-LANGU
              TEXTFORMAT = SPACE
              MESSAGE_V1 = GI_BATCH_RETURN-MESSAGE_V1
              MESSAGE_V2 = GI_BATCH_RETURN-MESSAGE_V2
              MESSAGE_V3 = GI_BATCH_RETURN-MESSAGE_V3
              MESSAGE_V4 = GI_BATCH_RETURN-MESSAGE_V4
            IMPORTING
              MESSAGE    = GW_MESSAGE.

          GW_CUS_RET_ERROR = 'X'.
          GW_REJECT_REASON_TAB = GW_MESSAGE.
          GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'SAP'.
          GW_SAP_ERROR_FLAG    = 'X'.
          GW_MSG_ID            = GI_BATCH_RETURN-ID.
          GW_MSG_NO            = GI_BATCH_RETURN-NUMBER.

          GW_PROCESS_STATUS = 'F'.
          GW_FAIL_STEP      = 30.
          GW_FAIL_STEP_DESC = TEXT-070.
          GW_REASON         = GW_MESSAGE.
          GW_STATUS         = TEXT-070.
** Incase of error populate, the RECH and RECL tables with error message and step no.
          GV_STATUS = 'E'.
          GV_STEP = '30'.
          GV_STEP_DESCR = TEXT-070.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                              LT_BAPI_GM_ITEM.
          PERFORM SPLIT_DEL_TABLE_UPDATE.
          PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        ELSE.
          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              ID         = GI_BATCH_RETURN-ID
              NUMBER     = GI_BATCH_RETURN-NUMBER
              LANGUAGE   = SY-LANGU
              TEXTFORMAT = SPACE
              MESSAGE_V1 = GI_BATCH_RETURN-MESSAGE_V1
              MESSAGE_V2 = GI_BATCH_RETURN-MESSAGE_V2
              MESSAGE_V3 = GI_BATCH_RETURN-MESSAGE_V3
              MESSAGE_V4 = GI_BATCH_RETURN-MESSAGE_V4
            IMPORTING
              MESSAGE    = GW_MESSAGE.

          GW_CUS_RET_ERROR = 'X'.
          GW_REJECT_REASON_TAB = GW_MESSAGE.
          GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'MARC'.
          GW_SAP_ERROR_FLAG    = 'X'.
          GW_MSG_ID            = GI_BATCH_RETURN-ID.
          GW_MSG_NO            = GI_BATCH_RETURN-NUMBER.

          GW_PROCESS_STATUS = 'F'.
          GW_FAIL_STEP      = 30.
          GW_FAIL_STEP_DESC = TEXT-070.
          GW_REASON         = GW_MESSAGE.
          GW_STATUS         = TEXT-070.
** Incase of error populate, the RECH and RECL tables with error message and step no.
          GV_STATUS = 'M'.
          GV_STEP = '30'.
          GV_STEP_DESCR = TEXT-070.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                              LT_BAPI_GM_ITEM.
          PERFORM SPLIT_DEL_TABLE_UPDATE.
          PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.                    " DELIVERY_BATCH_INSERTION
*&---------------------------------------------------------------------*
*&      Form  DELIVERY_ITEM_DELETION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DELIVERY_ITEM_DELETION .
  DATA: LT_BAPI_GM_ITEM TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.
  DATA: LW_MBLNR TYPE CHAR10.
  DATA: LW_VBELN TYPE VBELN_VL.
  IF GT_DEL_ITEM_DATA IS NOT INITIAL.
    PERFORM FETCH_DATA_FOR_IDOC USING GW_DEL_DELIVERY.
    CALL FUNCTION 'BAPI_OUTB_DELIVERY_CHANGE'
      EXPORTING
        HEADER_DATA    = GI_DEL_HEADER_DATA
        HEADER_CONTROL = GI_DEL_HEADER_CONTROL
        DELIVERY       = GW_DEL_DELIVERY
      TABLES
        ITEM_DATA      = GT_DEL_ITEM_DATA
        ITEM_CONTROL   = GT_DEL_ITEM_CONTROL
        RETURN         = GT_DEL_RETURN.
    IF GT_DEL_RETURN IS INITIAL.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          WAIT = 'X'.


      IF GV_RECTYPE = '04'.
        READ TABLE GT_ZTUHCD1 WITH KEY ZKEY = 'GR' FIELD = 'LFART_DELETE_COMPLETE' LOW = GW_LFART
                                                       TRANSPORTING NO FIELDS.
        IF SY-SUBRC IS INITIAL.
          READ TABLE GT_ZTUHCD1 WITH KEY FIELD = 'WERKS' LOW = GW_WERKS
                                                       TRANSPORTING NO FIELDS.
          IF SY-SUBRC IS INITIAL.
            IF GW_VSTEL IS NOT INITIAL.
              CLEAR LW_VBELN.
              SELECT SINGLE VBELN
                            FROM LIKP
                            INTO LW_VBELN
                            WHERE VBELN = GW_DEL_DELIVERY.
              IF SY-SUBRC IS NOT INITIAL.
***Trigger IDOC once return delivery is deleted
                PERFORM POST_IDOC.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.


      GW_DELETE_FLAG = 'X'.
** Begin of changes by USPRADI DE3K9A0D94 on 13.05.2022
*      gv_status = 'C'.
      GV_STATUS = 'I'.
** End of changes by USPRADI DE3K9A0D94 on 13.05.2022
      CLEAR: GV_STEP, GV_STEP_DESCR, GW_MESSAGE, GW_MSG_ID, GW_MSG_NO.
      PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                              LT_BAPI_GM_ITEM.
      GW_PROCESS_STATUS = 'I'.
      GW_STATUS = TEXT-068.
      PERFORM SPLIT_DEL_TABLE_UPDATE.

    ELSE.
      READ TABLE GT_DEL_RETURN INTO GI_DEL_RETURN WITH KEY  TYPE = 'E'.
      IF SY-SUBRC = 0.
        GW_DELETE_FLAG = ' '.
        CONCATENATE GI_DEL_RETURN-ID GI_DEL_RETURN-NUMBER INTO GW_BAPI_ERROR.
        IF GW_BAPI_ERROR IN S_RETURN.
          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              ID         = GI_DEL_RETURN-ID
              NUMBER     = GI_DEL_RETURN-NUMBER
              LANGUAGE   = SY-LANGU
              TEXTFORMAT = SPACE
              MESSAGE_V1 = GI_DEL_RETURN-MESSAGE_V1
              MESSAGE_V2 = GI_DEL_RETURN-MESSAGE_V2
              MESSAGE_V3 = GI_DEL_RETURN-MESSAGE_V3
              MESSAGE_V4 = GI_DEL_RETURN-MESSAGE_V4
            IMPORTING
              MESSAGE    = GW_MESSAGE.

          GW_CUS_RET_ERROR = 'X'.
          GW_REJECT_REASON_TAB = GW_MESSAGE.
          GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'SAP'.
          GW_SAP_ERROR_FLAG    = 'X'.
          GW_MSG_ID            = GI_DEL_RETURN-ID.
          GW_MSG_NO            = GI_DEL_RETURN-NUMBER.

          GW_PROCESS_STATUS = 'F'.
          GW_FAIL_STEP      = 40.
          GW_FAIL_STEP_DESC = TEXT-069.
          GW_REASON         = GW_MESSAGE.
          GW_STATUS         = TEXT-069.
** Incase of error populate, the RECH and RECL tables with error message and step no.
          GV_STATUS = 'E'.
          GV_STEP = '40'.
          GV_STEP_DESCR = TEXT-069.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                LT_BAPI_GM_ITEM.
          PERFORM SPLIT_DEL_TABLE_UPDATE.
          PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.

          PERFORM SPLIT_DEL_TABLE_UPDATE.
        ELSE.
          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              ID         = GI_DEL_RETURN-ID
              NUMBER     = GI_DEL_RETURN-NUMBER
              LANGUAGE   = SY-LANGU
              TEXTFORMAT = SPACE
              MESSAGE_V1 = GI_DEL_RETURN-MESSAGE_V1
              MESSAGE_V2 = GI_DEL_RETURN-MESSAGE_V2
              MESSAGE_V3 = GI_DEL_RETURN-MESSAGE_V3
              MESSAGE_V4 = GI_DEL_RETURN-MESSAGE_V4
            IMPORTING
              MESSAGE    = GW_MESSAGE.

          GW_CUS_RET_ERROR = 'X'.
          GW_REJECT_REASON_TAB = GW_MESSAGE.
          GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'MARC'.
          GW_SAP_ERROR_FLAG    = 'X'.
          GW_MSG_ID            = GI_DEL_RETURN-ID.
          GW_MSG_NO            = GI_DEL_RETURN-NUMBER.

          GW_PROCESS_STATUS = 'F'.
          GW_FAIL_STEP      = 40.
          GW_FAIL_STEP_DESC = TEXT-069.
          GW_REASON         = GW_MESSAGE.
          GW_STATUS         = TEXT-069.
** Incase of error populate, the RECH and RECL tables with error message and step no.
          GV_STATUS = 'M'.
          GV_STEP = '40'.
          GV_STEP_DESCR = TEXT-069.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                LT_BAPI_GM_ITEM.
          PERFORM SPLIT_DEL_TABLE_UPDATE.
          PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        ENDIF.
** Begin of changes by USPRADI  DE3K9A0D94 on 13.05.2022
      ELSE.
        READ TABLE GT_DEL_RETURN INTO GI_DEL_RETURN WITH KEY  TYPE = 'A'.
        IF SY-SUBRC = 0.
          GW_DELETE_FLAG = ' '.
          CONCATENATE GI_DEL_RETURN-ID GI_DEL_RETURN-NUMBER INTO GW_BAPI_ERROR.
          IF GW_BAPI_ERROR IN S_RETURN.
            CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
              EXPORTING
                ID         = GI_DEL_RETURN-ID
                NUMBER     = GI_DEL_RETURN-NUMBER
                LANGUAGE   = SY-LANGU
                TEXTFORMAT = SPACE
                MESSAGE_V1 = GI_DEL_RETURN-MESSAGE_V1
                MESSAGE_V2 = GI_DEL_RETURN-MESSAGE_V2
                MESSAGE_V3 = GI_DEL_RETURN-MESSAGE_V3
                MESSAGE_V4 = GI_DEL_RETURN-MESSAGE_V4
              IMPORTING
                MESSAGE    = GW_MESSAGE.

            GW_CUS_RET_ERROR = 'X'.
            GW_REJECT_REASON_TAB = GW_MESSAGE.
            GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'SAP'.
            GW_SAP_ERROR_FLAG    = 'X'.
            GW_MSG_ID            = GI_DEL_RETURN-ID.
            GW_MSG_NO            = GI_DEL_RETURN-NUMBER.

            GW_PROCESS_STATUS = 'F'.
            GW_FAIL_STEP      = 40.
            GW_FAIL_STEP_DESC = TEXT-069.
            GW_REASON         = GW_MESSAGE.
            GW_STATUS         = TEXT-069.
** Incase of error populate, the RECH and RECL tables with error message and step no.
            GV_STATUS = 'E'.
            GV_STEP = '40'.
            GV_STEP_DESCR = TEXT-069.
            PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                  LT_BAPI_GM_ITEM.
            PERFORM SPLIT_DEL_TABLE_UPDATE.
            PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
            PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.

            PERFORM SPLIT_DEL_TABLE_UPDATE.
          ELSE.
            CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
              EXPORTING
                ID         = GI_DEL_RETURN-ID
                NUMBER     = GI_DEL_RETURN-NUMBER
                LANGUAGE   = SY-LANGU
                TEXTFORMAT = SPACE
                MESSAGE_V1 = GI_DEL_RETURN-MESSAGE_V1
                MESSAGE_V2 = GI_DEL_RETURN-MESSAGE_V2
                MESSAGE_V3 = GI_DEL_RETURN-MESSAGE_V3
                MESSAGE_V4 = GI_DEL_RETURN-MESSAGE_V4
              IMPORTING
                MESSAGE    = GW_MESSAGE.

            GW_CUS_RET_ERROR = 'X'.
            GW_REJECT_REASON_TAB = GW_MESSAGE.
            GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'MARC'.
            GW_SAP_ERROR_FLAG    = 'X'.
            GW_MSG_ID            = GI_DEL_RETURN-ID.
            GW_MSG_NO            = GI_DEL_RETURN-NUMBER.

            GW_PROCESS_STATUS = 'F'.
            GW_FAIL_STEP      = 40.
            GW_FAIL_STEP_DESC = TEXT-069.
            GW_REASON         = GW_MESSAGE.
            GW_STATUS         = TEXT-069.
** Incase of error populate, the RECH and RECL tables with error message and step no.
            GV_STATUS = 'M'.
            GV_STEP = '40'.
            GV_STEP_DESCR = TEXT-069.
            PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                  LT_BAPI_GM_ITEM.
            PERFORM SPLIT_DEL_TABLE_UPDATE.
            PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
            PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
          ENDIF.
        ENDIF.
** End of changes by USPRADI  DE3K9A0D94 on 13.05.2022
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.                    " DELIVERY_ITEM_DELETION
*&---------------------------------------------------------------------*
*&      Form  POST_IDOC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM POST_IDOC .
  DATA: LI_Z1MM_MARC_TRNH TYPE Z1MM_MARC_TRNH,
        LI_Z1MM_MARC_PORH TYPE Z1MM_MARC_PORH,
        LI_Z1MM_MARC_PORL TYPE Z1MM_MARC_PORL,
        LI_Z1MM_MARC_ENDT TYPE Z1MM_MARC_ENDT,
        LI_Z1MM_MARC_TRLR TYPE Z1MM_MARC_TRLR,
        LI_EDIDC          TYPE EDIDC,
        LT_EDIDC          TYPE STANDARD TABLE OF EDIDC,
        LT_EDIDD          TYPE STANDARD TABLE OF EDIDD,
        LI_EDIDD_DS       TYPE EDIDD,
        LW_KNUMH          TYPE KNUMH,
        LW_PARNR          TYPE NA_PARNR,
        LW_OBJ            TYPE CHAR10,
        LW_NO             TYPE CHAR2,
        LW_NUMBER(8)      TYPE N,
        LW_SEQ_NO(13)     TYPE C,
        LW_COMP_CODE      TYPE CHAR1.

  DATA: LI_MARC_GR_CUS TYPE ZTMM_MARC_GR_CUS,
        LT_MARC_GR_CUS TYPE STANDARD TABLE OF ZTMM_MARC_GR_CUS.

  CLEAR:GI_ZTUHCD1.
  READ TABLE GT_ZTUHCD1 INTO GI_ZTUHCD1 WITH KEY ZKEY = 'IBD'
                                                 LOW  = GW_WERKS.
  IF SY-SUBRC = 0.
    LW_OBJ = GI_ZTUHCD1-FIELD.
    LW_NO  = GI_ZTUHCD1-HIGH.
  ENDIF.

  CLEAR:GI_ZTUHCD1.
  READ TABLE GT_ZTUHCD1 INTO GI_ZTUHCD1 WITH KEY FIELD = 'CCODE'
                                                 LOW  = GW_WERKS.
  IF SY-SUBRC = 0.
    LW_COMP_CODE   = GI_ZTUHCD1-HIGH.
  ENDIF.

  CALL FUNCTION 'NUMBER_GET_NEXT'
    EXPORTING
      NR_RANGE_NR             = LW_NO
      OBJECT                  = LW_OBJ
    IMPORTING
      NUMBER                  = LW_NUMBER
    EXCEPTIONS
      INTERVAL_NOT_FOUND      = 1
      NUMBER_RANGE_NOT_INTERN = 2
      OBJECT_NOT_FOUND        = 3
      QUANTITY_IS_0           = 4
      QUANTITY_IS_NOT_1       = 5
      INTERVAL_OVERFLOW       = 6
      BUFFER_OVERFLOW         = 7
      OTHERS                  = 8.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = LW_NUMBER
      IMPORTING
        OUTPUT = LW_NUMBER.
    CONCATENATE 'PORI' LW_COMP_CODE LW_NUMBER INTO LW_SEQ_NO.
  ENDIF.

  LI_Z1MM_MARC_TRNH-RECORD_ID   = 'TRNH'.
  LI_Z1MM_MARC_TRNH-TRAN_NO     = LW_SEQ_NO.
  LI_Z1MM_MARC_TRNH-TRAN_FORMAT = 'FFL'.
  LI_Z1MM_MARC_TRNH-ACTION      = 'N'.
  LI_Z1MM_MARC_TRNH-RECORD_DATE = SY-DATLO.
  CONCATENATE SY-TIMLO+0(2) ':' SY-TIMLO+2(2) INTO LI_Z1MM_MARC_TRNH-RECORD_TIME.
  LI_Z1MM_MARC_TRNH-DATA_TYPE      = 'POR'.
  LI_Z1MM_MARC_TRNH-TRAN_DEST      =  ' ' .
  LI_Z1MM_MARC_TRNH-TRAN_SOURCE    =  ' ' .
  LI_Z1MM_MARC_TRNH-NO_TIMES_SENT  =  '000000000' .
  LI_Z1MM_MARC_TRNH-TRAN_SEQ_NO    =  '000000000' .
  LI_Z1MM_MARC_TRNH-MARC_TRAN_NO   =  ' ' .
  LI_Z1MM_MARC_TRNH-EDT_DETAIL_RECORDS =  ' ' .
  LI_Z1MM_MARC_TRNH-EDT_HDR_RECORDS    =  ' ' .
  LI_Z1MM_MARC_TRNH-NO_DETAIL_RECORDS  =  ' '.
  LI_Z1MM_MARC_TRNH-NO_HDR_RECORDS     =  ' '.
  LI_EDIDD_DS-SEGNAM = 'Z1MM_MARC_TRNH'.
  MOVE LI_Z1MM_MARC_TRNH TO LI_EDIDD_DS-SDATA.
  APPEND LI_EDIDD_DS TO LT_EDIDD.
  CLEAR:LI_EDIDD_DS.

  LI_Z1MM_MARC_PORH-RECORD_ID   = 'PORH' .
  LI_Z1MM_MARC_PORH-ACTION      = 'D' .
  LI_Z1MM_MARC_PORH-RECORD_DATE = SY-DATLO.
  CONCATENATE SY-TIMLO+0(2) ':' SY-TIMLO+2(2) INTO LI_Z1MM_MARC_PORH-RECORD_TIME .
  LI_Z1MM_MARC_PORH-COMP_CODE   =  GW_COMP_CODE_TAB.
  LI_Z1MM_MARC_PORH-PO_NO       =  GW_DEL_DELIVERY.
  LI_Z1MM_MARC_PORH-PO_TYPE     = '04' .
  LI_EDIDD_DS-SEGNAM = 'Z1MM_MARC_PORH'.
  MOVE LI_Z1MM_MARC_PORH TO LI_EDIDD_DS-SDATA.
  APPEND LI_EDIDD_DS TO LT_EDIDD.
  CLEAR:LI_EDIDD_DS.

  LI_Z1MM_MARC_PORL-RECORD_ID   = 'PORL' .
  LI_Z1MM_MARC_PORL-ACTION      = 'D'.
  LI_EDIDD_DS-SEGNAM = 'Z1MM_MARC_PORL'.
  MOVE LI_Z1MM_MARC_PORL TO LI_EDIDD_DS-SDATA.
  APPEND LI_EDIDD_DS TO LT_EDIDD.
  CLEAR:LI_EDIDD_DS.

  LI_Z1MM_MARC_ENDT-RECORD         = 'ENDT' .
  LI_Z1MM_MARC_ENDT-COMP_CODE      = GW_COMP_CODE_TAB.
  LI_Z1MM_MARC_ENDT-TRANSACTION_ID = GW_DEL_DELIVERY.
  LI_Z1MM_MARC_ENDT-NO_OF_DETAIL_RECORDS = '000000000'.
  LI_Z1MM_MARC_ENDT-NO_OF_HDR_RECORDS    = '000000001'.
  LI_EDIDD_DS-SEGNAM = 'Z1MM_MARC_ENDT'.
  MOVE LI_Z1MM_MARC_ENDT TO LI_EDIDD_DS-SDATA.
  APPEND LI_EDIDD_DS TO LT_EDIDD.
  CLEAR:LI_EDIDD_DS.

  LI_Z1MM_MARC_TRLR-RECORD               = 'TRLR' .
  LI_Z1MM_MARC_TRLR-TRANSACTION_ID       = LW_SEQ_NO.
  LI_Z1MM_MARC_TRLR-NO_OF_DETAIL_RECORDS = '000000000'.
  LI_Z1MM_MARC_TRLR-NO_OF_HDR_RECORDS    = '000000001'.
  LI_EDIDD_DS-SEGNAM = 'Z1MM_MARC_TRLR'.
  MOVE LI_Z1MM_MARC_TRLR TO LI_EDIDD_DS-SDATA.
  APPEND LI_EDIDD_DS TO LT_EDIDD.
  CLEAR:LI_EDIDD_DS.


*Create the interface parameters
  LI_EDIDC-MESTYP = 'ZMM_DESADV'.             "Message Type
  LI_EDIDC-IDOCTP = 'ZMM_DELVRY07'.           "Basic Idoc Type

  CLEAR LW_KNUMH.
  SELECT SINGLE KNUMH
                FROM B021
                INTO LW_KNUMH
                WHERE KAPPL = 'V2' AND
                      KSCHL = 'ZAVA' AND
                      LFART = GW_LFART AND
                      VSTEL = GW_VSTEL.
  IF SY-SUBRC IS INITIAL.
    CLEAR LW_PARNR.
    SELECT SINGLE PARNR
                  FROM NACH
                  INTO LW_PARNR
                  WHERE KNUMH = LW_KNUMH.
    IF SY-SUBRC IS INITIAL.
      LI_EDIDC-RCVPRN = LW_PARNR.
      CLEAR LI_EDIDC-RCVPRT.
      SELECT SINGLE RCVPRT
                    RCVPFC
                    FROM EDP13
                    INTO (LI_EDIDC-RCVPRT, LI_EDIDC-RCVPFC)
                    WHERE RCVPRN = LI_EDIDC-RCVPRN AND
                          MESTYP = 'ZMM_DESADV'.
      IF LI_EDIDC-RCVPRT IS NOT INITIAL AND LI_EDIDC-RCVPFC IS NOT INITIAL.
        CALL FUNCTION 'MASTER_IDOC_DISTRIBUTE'
          EXPORTING
            MASTER_IDOC_CONTROL            = LI_EDIDC
*           OBJ_TYPE                       = ''
*           CHNUM                          = ''
          TABLES
            COMMUNICATION_IDOC_CONTROL     = LT_EDIDC
            MASTER_IDOC_DATA               = LT_EDIDD
          EXCEPTIONS
            ERROR_IN_IDOC_CONTROL          = 1
            ERROR_WRITING_IDOC_STATUS      = 2
            ERROR_IN_IDOC_DATA             = 3
            SENDING_LOGICAL_SYSTEM_UNKNOWN = 4
            OTHERS                         = 5.
        IF SY-SUBRC <> 0.
* Implement suitable error handling here
          ROLLBACK WORK.
        ELSE.
          COMMIT WORK AND WAIT.
          CLEAR LI_EDIDC.
          READ TABLE LT_EDIDC INTO LI_EDIDC INDEX 1.
          IF SY-SUBRC IS INITIAL AND LI_EDIDC-DOCNUM IS NOT INITIAL.
            LI_MARC_GR_CUS-DFLAG_IDOC = LI_EDIDC-DOCNUM.
            REFRESH LT_MARC_GR_CUS.
            SELECT *
                   FROM ZTMM_MARC_GR_CUS
                   INTO TABLE LT_MARC_GR_CUS
                   WHERE "tran_no = gw_tran_no_tab AND
                         "tran_seq_no = gw_trans_seq_no_tab AND
                         PO_NO = GW_DEL_DELIVERY.
            IF SY-SUBRC IS INITIAL.
              MODIFY LT_MARC_GR_CUS FROM LI_MARC_GR_CUS TRANSPORTING DFLAG_IDOC WHERE "tran_no = gw_tran_no_tab AND
                                                                                      "tran_seq_no = gw_trans_seq_no_tab AND
                                                                                      PO_NO = GW_DEL_DELIVERY.
              IF SY-SUBRC IS INITIAL.
                MODIFY ZTMM_MARC_GR_CUS FROM TABLE LT_MARC_GR_CUS.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.                    " POST_IDOC
*&---------------------------------------------------------------------*
*&      Form  DELIVERY_PICKING
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GI_VBKOK_WA  text
*      -->P_GT_VBPOK_TAB  text
*      -->P_GW_PICK_FLAG  text
*----------------------------------------------------------------------*
FORM DELIVERY_PICKING   USING  PI_VBKOK_WA
                               PT_VBPOK_TAB
                               PW_PICK_FLAG .
  DATA: LT_BAPI_GM_ITEM TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.
  DATA: LW_MBLNR TYPE CHAR10.
*    *** Post BAPI for Delivery Picking
  IF NOT GT_VBPOK_TAB[] IS INITIAL.
    CALL FUNCTION 'SD_DELIVERY_UPDATE_PICKING'
      EXPORTING
        VBKOK_WA               = GI_VBKOK_WA
        IF_ERROR_MESSAGES_SEND = 'X'
      TABLES
        VBPOK_TAB              = GT_VBPOK_TAB.
    IF SY-SUBRC = 0.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          WAIT = 'X'.
*    **Check Delivery is Picked or not
      SELECT SINGLE VBELN KOSTK FROM VBUK INTO GI_VBUK WHERE VBELN = GI_VBKOK_WA-VBELN.

      IF  GI_VBUK-KOSTK = 'C'. " 'Completely Processed'.
        PW_PICK_FLAG = 'X'.

** Begin of changes by USPRADI DE3K9A0D94 on 13.05.2022
*      gv_status = 'C'.
        GV_STATUS = 'I'.
** End of changes by USPRADI DE3K9A0D94 on 13.05.2022
        CLEAR: GV_STEP, GV_STEP_DESCR, GW_MESSAGE, GW_MSG_ID, GW_MSG_NO.
        PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                                LT_BAPI_GM_ITEM.
        GW_PROCESS_STATUS = 'I'.
        GW_STATUS = TEXT-057.
        PERFORM SPLIT_DEL_TABLE_UPDATE.
      ELSEIF GI_VBUK-KOSTK = 'B'. " 'Partially Processed'.
        PW_PICK_FLAG = ' '.
        GW_CUS_RET_ERROR = 'X'.
        GW_REJECT_REASON_TAB = TEXT-058.
        GI_ERROR_FILE-REJECT_REASON = TEXT-058.
        GW_INPUT_STATUS_TAB  = 'E'.
        GW_ERROR_TYPE_TAB    = 'MARC'.
        GW_SAP_ERROR_FLAG    = 'X'.
*        gw_msg_id            = gi_pgi_return-id.
*        gw_msg_no            = gi_pgi_return-number.


        GW_PROCESS_STATUS = 'F'.
        GW_FAIL_STEP      = 50.
        GW_FAIL_STEP_DESC = TEXT-059.
        GW_REASON         = TEXT-058.
        GW_STATUS         = TEXT-059.
** Incase of error populate, the RECH and RECL tables with error message and step no.
        GV_STATUS = 'M'.
        GV_STEP = '50'.
        GV_STEP_DESCR = TEXT-059.
        GW_MSG_ID = ' '.
        GW_MSG_NO = ' '.
        PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_REASON GW_MSG_ID GW_MSG_NO LW_MBLNR
                            LT_BAPI_GM_ITEM.
        PERFORM SPLIT_DEL_TABLE_UPDATE.
        PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
        PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
      ELSEIF GI_VBUK-KOSTK = 'A'. " 'Not yet Processed'.
        PW_PICK_FLAG = ' '.
        GW_CUS_RET_ERROR = 'X'.
        GW_REJECT_REASON_TAB = TEXT-060.
        GI_ERROR_FILE-REJECT_REASON = TEXT-060.
        GW_INPUT_STATUS_TAB  = 'E'.
        GW_ERROR_TYPE_TAB    = 'MARC'.
        GW_SAP_ERROR_FLAG    = 'X'.

        GW_PROCESS_STATUS = 'F'.
        GW_FAIL_STEP      = 50.
        GW_FAIL_STEP_DESC = TEXT-059.
        GW_REASON         = TEXT-060.
        GW_STATUS         = TEXT-059.

** Incase of error populate, the RECH and RECL tables with error message and step no.
        GV_STATUS = 'M'.
        GV_STEP = '50'.
        GV_STEP_DESCR = TEXT-059.
        GW_MSG_ID = ' '.
        GW_MSG_NO = ' '.
        PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_REASON GW_MSG_ID GW_MSG_NO LW_MBLNR
                            LT_BAPI_GM_ITEM.
        PERFORM SPLIT_DEL_TABLE_UPDATE.
        PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
        PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
      ENDIF.
    ELSE.
      PW_PICK_FLAG = ' '.
      GW_CUS_RET_ERROR = 'X'.
      GW_REJECT_REASON_TAB = TEXT-059.
      GI_ERROR_FILE-REJECT_REASON = TEXT-059.
      GW_INPUT_STATUS_TAB  = 'E'.
      GW_ERROR_TYPE_TAB    = 'MARC'.
      GW_SAP_ERROR_FLAG    = 'X'.

      GW_PROCESS_STATUS = 'F'.
      GW_FAIL_STEP      = 50.
      GW_FAIL_STEP_DESC = TEXT-059.
      GW_REASON         = TEXT-059.
      GW_STATUS         = TEXT-059.
** Incase of error populate, the RECH and RECL tables with error message and step no.
      GV_STATUS = 'M'.
      GV_STEP = '50'.
      GV_STEP_DESCR = TEXT-059.
      GW_MSG_ID = ' '.
      GW_MSG_NO = ' '.
      PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_REASON GW_MSG_ID GW_MSG_NO LW_MBLNR
                          LT_BAPI_GM_ITEM.
      PERFORM SPLIT_DEL_TABLE_UPDATE.
      PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
      PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.

    ENDIF.
  ENDIF.

ENDFORM.                    " DELIVERY_PICKING
*&---------------------------------------------------------------------*
*&      Form  DELIVERY_PGI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GI_PGI_HEADER_DATA  text
*      -->P_GI_PGI_HEADER_CONTROL  text
*      -->P_GI_PGI_DELIVERY  text
*      -->P_GW_PGI_FLAG  text
*----------------------------------------------------------------------*
FORM DELIVERY_PGI  USING    PI_PGI_HEADER_DATA
                            PI_PGI_HEADER_CONTROL
                            PI_PGI_DELIVERY
                            PW_PGI_FLAG.
  DATA: LT_BAPI_GM_ITEM TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.
  DATA: LW_MBLNR TYPE CHAR10.

  DATA: LW_FROMNUMBER TYPE NRFROM,
        LW_TONUMBER   TYPE NRTO.

  DATA: LW_BWART TYPE BWART.

*    **Post BAPI for PGI
  IF PI_PGI_HEADER_DATA IS NOT INITIAL.

    CALL FUNCTION 'BAPI_OUTB_DELIVERY_CONFIRM_DEC'
      EXPORTING
        HEADER_DATA    = PI_PGI_HEADER_DATA
        HEADER_CONTROL = PI_PGI_HEADER_CONTROL
        DELIVERY       = PI_PGI_DELIVERY
      TABLES
        RETURN         = GT_PGI_RETURN.

    IF GT_PGI_RETURN IS INITIAL.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          WAIT = GC_X.

      IF GV_RECTYPE = '04'.
        PERFORM FETCH_DATA_FOR_IDOC USING PI_PGI_DELIVERY.
        READ TABLE GT_ZTUHCD1 WITH KEY ZKEY = 'GR' FIELD = 'LFART_DELETE_COMPLETE' LOW = GW_LFART
                                                       TRANSPORTING NO FIELDS.
        IF SY-SUBRC IS INITIAL.
          READ TABLE GT_ZTUHCD1 WITH KEY FIELD = 'WERKS' LOW = GW_WERKS
                                                       TRANSPORTING NO FIELDS.
          IF SY-SUBRC IS INITIAL.

* getting number range
            CLEAR: LW_FROMNUMBER,
                   LW_TONUMBER.
            SELECT SINGLE FROMNUMBER
                          TONUMBER
                          INTO (LW_FROMNUMBER, LW_TONUMBER) FROM NRIV
                          WHERE OBJECT = 'RV_BELEG' AND
                                SUBOBJECT = ' ' AND
                                NRRANGENR = 'Z7'.
            IF SY-SUBRC IS INITIAL.
              IF PI_PGI_DELIVERY BETWEEN LW_FROMNUMBER AND LW_TONUMBER.
                GW_DEL_DELIVERY = PI_PGI_DELIVERY.
***Post IDOC once return delivery is PGIed
                PERFORM POST_IDOC.
                CLEAR GW_DEL_DELIVERY.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.

      PW_PGI_FLAG = 'X'.

      IF GW_SPLIT_FLAG = 'X'.
*** Get movement type from LIPS table "USPRADI
        SELECT SINGLE BWART
          FROM LIPS
          INTO LW_BWART
          WHERE VBELN = GI_LIPS_SPLIT-VBELN
            AND POSNR = GI_LIPS_SPLIT-POSNR.
        IF SY-SUBRC IS INITIAL.

        ENDIF.
*** Checking for PGI document
        SELECT
        VBELV
        POSNV
        VBELN
        POSNN
        VBTYP_N
        RFMNG
        VBTYP_V
        PLMIN
        BWART
        MJAHR
        INTO GI_VBFA_PGI
        FROM VBFA
        WHERE VBELV = GI_LIPS_SPLIT-VBELN
        AND   POSNV = GI_LIPS_SPLIT-POSNR
        AND   VBTYP_N = 'R'
*        AND   bwart = '657'
        AND BWART = LW_BWART "USPRADI
        ORDER BY PRIMARY KEY.
        ENDSELECT.
        IF SY-SUBRC = 0.
          GW_PGI_GR_NO       =  GI_VBFA_PGI-VBELN.
          GW_PGI_GR_LINE_NO  =  GI_VBFA_PGI-POSNN.
          GW_PGI_GR_QTY      =  GI_VBFA_PGI-RFMNG.
          GW_PGI_GR_YEAR     =  GI_VBFA_PGI-MJAHR.
          GW_PGI_MOVE_TYPE   =  GI_VBFA_PGI-BWART.
        ENDIF.

      ELSE.
*** Get movement type from LIPS table "USPRADI
        SELECT SINGLE BWART
          FROM LIPS
          INTO LW_BWART
          WHERE VBELN = GI_MARC_SPLIT_ITEM-PO_NO
            AND POSNR = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
        IF SY-SUBRC IS INITIAL.

        ENDIF.
*** Checking for PGI document
        SELECT
        VBELV
        POSNV
        VBELN
        POSNN
        VBTYP_N
        RFMNG
        VBTYP_V
        PLMIN
        BWART
        MJAHR
        INTO GI_VBFA_PGI
        FROM VBFA
        WHERE VBELV = GI_MARC_SPLIT_ITEM-PO_NO
        AND   POSNV = GI_MARC_SPLIT_ITEM-PO_LINE_NO
        AND   VBTYP_N = 'R'
        AND   BWART = LW_BWART"'657' "USPRADI
        ORDER BY PRIMARY KEY.
        ENDSELECT.
        IF SY-SUBRC = 0.
          GW_PGI_GR_NO       =  GI_VBFA_PGI-VBELN.
          GW_PGI_GR_LINE_NO  =  GI_VBFA_PGI-POSNN.
          GW_PGI_GR_QTY      =  GI_VBFA_PGI-RFMNG.
          GW_PGI_GR_YEAR     =  GI_VBFA_PGI-MJAHR.
          GW_PGI_MOVE_TYPE   =  GI_VBFA_PGI-BWART.
        ENDIF.
      ENDIF.

** Begin of changes by USPRADI DE3K9A0D94 on 13.05.2022
*      gv_status = 'C'.
      GV_STATUS = 'I'.
** End of changes by USPRADI DE3K9A0D94 on 13.05.2022
      CLEAR: GV_STEP, GV_STEP_DESCR, GW_MESSAGE, GW_MSG_ID, GW_MSG_NO.
      PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO GW_PGI_GR_NO"lw_mblnr
                              LT_BAPI_GM_ITEM.
      GW_PROCESS_STATUS = 'I'.
      GW_STATUS = TEXT-061.
      PERFORM SPLIT_DEL_TABLE_UPDATE.
    ELSE."" Error incase of BAPI_OUTB_DELIVERY_CONFIRM_DEC
      READ TABLE GT_PGI_RETURN INTO GI_PGI_RETURN WITH KEY TYPE = 'E'.
      IF SY-SUBRC = 0.
        PW_PGI_FLAG = ' '.
        CONCATENATE GI_PGI_RETURN-ID GI_PGI_RETURN-NUMBER INTO GW_BAPI_ERROR.
        IF GW_BAPI_ERROR IN S_RETURN.
          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              ID         = GI_PGI_RETURN-ID
              NUMBER     = GI_PGI_RETURN-NUMBER
              LANGUAGE   = SY-LANGU
              TEXTFORMAT = SPACE
              MESSAGE_V1 = GI_PGI_RETURN-MESSAGE_V1
              MESSAGE_V2 = GI_PGI_RETURN-MESSAGE_V2
              MESSAGE_V3 = GI_PGI_RETURN-MESSAGE_V3
              MESSAGE_V4 = GI_PGI_RETURN-MESSAGE_V4
            IMPORTING
              MESSAGE    = GW_MESSAGE.

          GW_CUS_RET_ERROR = 'X'.
          GW_REJECT_REASON_TAB = GW_MESSAGE.
          GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'SAP'.
          GW_SAP_ERROR_FLAG    = 'X'.
          GW_MSG_ID            = GI_PGI_RETURN-ID.
          GW_MSG_NO            = GI_PGI_RETURN-NUMBER.

          GW_PROCESS_STATUS = 'F'.
          GW_FAIL_STEP      = 60.
          GW_FAIL_STEP_DESC = TEXT-062.
          GW_REASON         = GW_MESSAGE.
          GW_STATUS         = TEXT-062.
** Incase of error populate, the RECH and RECL tables with error message and step no.
          GV_STATUS = 'E'.
          GV_STEP = '60'.
          GV_STEP_DESCR = TEXT-062.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                      LT_BAPI_GM_ITEM.
          PERFORM SPLIT_DEL_TABLE_UPDATE.
          PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        ELSE.
          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              ID         = GI_PGI_RETURN-ID
              NUMBER     = GI_PGI_RETURN-NUMBER
              LANGUAGE   = SY-LANGU
              TEXTFORMAT = SPACE
              MESSAGE_V1 = GI_PGI_RETURN-MESSAGE_V1
              MESSAGE_V2 = GI_PGI_RETURN-MESSAGE_V2
              MESSAGE_V3 = GI_PGI_RETURN-MESSAGE_V3
              MESSAGE_V4 = GI_PGI_RETURN-MESSAGE_V4
            IMPORTING
              MESSAGE    = GW_MESSAGE.

          GW_CUS_RET_ERROR = 'X'.
          GW_REJECT_REASON_TAB = GW_MESSAGE.
          GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'MARC'.
          GW_SAP_ERROR_FLAG    = 'X'.
          GW_MSG_ID            = GI_PGI_RETURN-ID.
          GW_MSG_NO            = GI_PGI_RETURN-NUMBER.

          GW_PROCESS_STATUS = 'F'.
          GW_FAIL_STEP      = 60.
          GW_FAIL_STEP_DESC = TEXT-062.
          GW_REASON         = GW_MESSAGE.
          GW_STATUS         = TEXT-062.
** Incase of error populate, the RECH and RECL tables with error message and step no.
          GV_STATUS = 'M'.
          GV_STEP = '60'.
          GV_STEP_DESCR = TEXT-062.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                      LT_BAPI_GM_ITEM.
          PERFORM SPLIT_DEL_TABLE_UPDATE.
          PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " DELIVERY_PGI
*&---------------------------------------------------------------------*
*&      Form  DELIVERY_INSPECTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GT_INSP_DATA  text
*      -->P_GW_INSP_FLAG  text
*----------------------------------------------------------------------*
FORM DELIVERY_INSPECTION  USING    PT_INSP_DATA
                                   PW_INSP_FLAG.

  DATA: LW_INSPEC_NO TYPE /SPE/INSPEC_NO.

  DATA: LT_BAPI_GM_ITEM TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.
  DATA: LW_MBLNR TYPE CHAR10.
  IF PT_INSP_DATA IS NOT INITIAL.

*    **Post BAPI for Inspection
    CALL FUNCTION 'MSR_INSP_LFU_RFC'
      EXPORTING
        IT_INSP_DATA = PT_INSP_DATA
        IV_LANGUAGE  = 'E'
        IV_COMMIT    = 'X'
      IMPORTING
        ET_RETURN    = GT_INSP_RETURN.
*  IF gt_insp_return IS INITIAL.

    CLEAR:GI_INSP_RETURN.
    READ TABLE GT_INSP_RETURN INTO GI_INSP_RETURN WITH KEY TYPE = 'S'.
    IF SY-SUBRC = 0.
      PW_INSP_FLAG = 'X'.

      IF GW_SPLIT_FLAG = 'X'.
***Checking for Inspection Document
        SELECT SINGLE INSPEC_NO
          FROM /SPE/INSPECRESH INTO LW_INSPEC_NO
          WHERE DELIV_NUMB = GI_LIPS_SPLIT-VBELN
          AND   DELIV_ITEM = GI_LIPS_SPLIT-POSNR.
        IF SY-SUBRC = 0.
          GW_INSP_NO          =   LW_INSPEC_NO.
        ENDIF.
      ELSE.
***Checking for Inspection Document
        SELECT SINGLE INSPEC_NO
          FROM /SPE/INSPECRESH INTO LW_INSPEC_NO
          WHERE DELIV_NUMB = GI_MARC_SPLIT_ITEM-PO_NO
          AND   DELIV_ITEM = GI_MARC_SPLIT_ITEM-PO_LINE_NO.
        IF SY-SUBRC = 0.
          GW_INSP_NO          =   LW_INSPEC_NO.
        ENDIF.
      ENDIF.

** Begin of changes by USPRADI DE3K9A0D94 on 13.05.2022
*      gv_status = 'C'.
      GV_STATUS = 'I'.
** End of changes by USPRADI DE3K9A0D94 on 13.05.2022
      CLEAR: GV_STEP, GV_STEP_DESCR, GW_MESSAGE, GW_MSG_ID, GW_MSG_NO.
      PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                              LT_BAPI_GM_ITEM.
      GW_PROCESS_STATUS = 'I'.
      GW_STATUS = TEXT-063.
      PERFORM SPLIT_DEL_TABLE_UPDATE.
    ELSE."" Error incase of MSR_INSP_LFU_RFC'
      CLEAR:GI_INSP_RETURN.
      READ TABLE GT_INSP_RETURN INTO GI_INSP_RETURN WITH KEY TYPE = 'E'.
      IF SY-SUBRC = 0.
        PW_INSP_FLAG = ' '.
        CONCATENATE GI_INSP_RETURN-ID GI_INSP_RETURN-NUMBER INTO GW_BAPI_ERROR.
        IF GW_BAPI_ERROR IN S_RETURN.
          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              ID         = GI_INSP_RETURN-ID
              NUMBER     = GI_INSP_RETURN-NUMBER
              LANGUAGE   = SY-LANGU
              TEXTFORMAT = SPACE
              MESSAGE_V1 = GI_INSP_RETURN-MESSAGE_V1
              MESSAGE_V2 = GI_INSP_RETURN-MESSAGE_V2
              MESSAGE_V3 = GI_INSP_RETURN-MESSAGE_V3
              MESSAGE_V4 = GI_INSP_RETURN-MESSAGE_V4
            IMPORTING
              MESSAGE    = GW_MESSAGE.

          GW_CUS_RET_ERROR = 'X'.
          GW_REJECT_REASON_TAB = GW_MESSAGE.
          GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'SAP'.
          GW_SAP_ERROR_FLAG    = 'X'.
          GW_MSG_ID            = GI_INSP_RETURN-ID.
          GW_MSG_NO            = GI_INSP_RETURN-NUMBER.

          GW_PROCESS_STATUS = 'F'.
          GW_FAIL_STEP      = 70.
          GW_FAIL_STEP_DESC = TEXT-064.
          GW_REASON         = GW_MESSAGE.
          GW_STATUS         = TEXT-064.

** Incase of error populate, the RECH and RECL tables with error message and step no.
          GV_STATUS = 'E'.
          GV_STEP = '70'.
          GV_STEP_DESCR = TEXT-064.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                      LT_BAPI_GM_ITEM.
          PERFORM SPLIT_DEL_TABLE_UPDATE.
          PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        ELSE.
          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              ID         = GI_INSP_RETURN-ID
              NUMBER     = GI_INSP_RETURN-NUMBER
              LANGUAGE   = SY-LANGU
              TEXTFORMAT = SPACE
              MESSAGE_V1 = GI_INSP_RETURN-MESSAGE_V1
              MESSAGE_V2 = GI_INSP_RETURN-MESSAGE_V2
              MESSAGE_V3 = GI_INSP_RETURN-MESSAGE_V3
              MESSAGE_V4 = GI_INSP_RETURN-MESSAGE_V4
            IMPORTING
              MESSAGE    = GW_MESSAGE.

          GW_CUS_RET_ERROR = 'X'.
          GW_REJECT_REASON_TAB = GW_MESSAGE.
          GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'MARC'.
          GW_SAP_ERROR_FLAG    = 'X'.
          GW_MSG_ID            = GI_INSP_RETURN-ID.
          GW_MSG_NO            = GI_INSP_RETURN-NUMBER.

          GW_PROCESS_STATUS = 'F'.
          GW_FAIL_STEP      = 70.
          GW_FAIL_STEP_DESC = TEXT-064.
          GW_REASON         = GW_MESSAGE.
          GW_STATUS         = TEXT-064.
** Incase of error populate, the RECH and RECL tables with error message and step no.
          GV_STATUS = 'M'.
          GV_STEP = '70'.
          GV_STEP_DESCR = TEXT-064.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO LW_MBLNR
                      LT_BAPI_GM_ITEM.
          PERFORM SPLIT_DEL_TABLE_UPDATE.
          PERFORM ERROR_TABLE_UPDATE TABLES LT_BAPI_GM_ITEM.
          PERFORM FILE_TABLE_UPDATE USING LW_MBLNR LT_BAPI_GM_ITEM.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " DELIVERY_INSPECTION
*&---------------------------------------------------------------------*
*&      Form  DELIVERY_GOODS_MVMT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GW_GOODS_FLAG  text
*----------------------------------------------------------------------*
FORM DELIVERY_GOODS_MVMT  USING  PW_GOODS_FLAG.

  DATA: LW_MBLNR_TMP TYPE MBLNR,
        LW_MJAHR_TMP TYPE MJAHR,
        LW_ZEILE     TYPE MBLPO,
        LW_BWART     TYPE BWART,
        LW_MENGE     TYPE MENGE_D.

  DATA: LW_BAPI_LINES    TYPE I,
        LW_BAPI_LINES_ER TYPE I.
  CLEAR: LW_BAPI_LINES, LW_BAPI_LINES_ER.
  DATA: LT_MARC_SPLIT_ITEM  TYPE STANDARD TABLE OF ZTMM_MARC_GR_ER,
        LI_MARC_SPLIT_ITEM  TYPE ZTMM_MARC_GR_ER,
        LI_BAPI_GM_ITEM_CUS TYPE BAPI2017_GM_ITEM_CREATE.

  IF GT_BAPI_GM_ITEM_CUS IS NOT INITIAL.
    CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
      EXPORTING
        GOODSMVT_HEADER  = GI_BAPI_GM_HEAD_CUS
        GOODSMVT_CODE    = GI_BAPI_GM_CODE_CUS
      IMPORTING
        MATERIALDOCUMENT = GW_MBLNR
        MATDOCUMENTYEAR  = GW_MJAHR
      TABLES
        GOODSMVT_ITEM    = GT_BAPI_GM_ITEM_CUS
        RETURN           = GT_BAPI_RETURN_CUS.

    IF GW_MBLNR IS NOT INITIAL.

      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          WAIT = GC_X.

      PW_GOODS_FLAG = 'X'.

      SELECT SINGLE MBLNR MJAHR ZEILE BWART MENGE
        FROM MSEG INTO (LW_MBLNR_TMP, LW_MJAHR_TMP, LW_ZEILE, LW_BWART, LW_MENGE)
        WHERE MBLNR = GW_MBLNR
        AND   MJAHR = GW_MJAHR.
      IF SY-SUBRC = 0.
        GW_GR_NO       =   LW_MBLNR_TMP.
        GW_GR_YEAR     =   LW_MJAHR_TMP.
        GW_GR_LINE_NO  =   LW_ZEILE.
        GW_GR_QTY_CUS  =   LW_MENGE.
        GW_GR_MOVE_TYPE  =   LW_BWART.
      ENDIF.

      GV_STATUS = 'C'.
      CLEAR: GV_STEP, GV_STEP_DESCR, GW_MESSAGE, GW_MSG_ID, GW_MSG_NO.
      PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO GW_MBLNR
                              GT_BAPI_GM_ITEM.

      GW_PROCESS_STATUS = 'C'.
      GW_STATUS = TEXT-065.
      PERFORM SPLIT_DEL_TABLE_UPDATE.

      GW_INPUT_STATUS_TAB = 'C'.
      PERFORM FILE_TABLE_UPDATE USING GW_MBLNR GT_BAPI_GM_ITEM_CUS.

      "" Delete Entries when SAP Error Reprocessing is successful
      LOOP AT GT_BAPI_GM_ITEM_CUS INTO GI_BAPI_GM_ITEM_CUS.
        READ TABLE  GT_MARC_SPLIT_ITEM INTO GI_MARC_SPLIT_ITEM WITH KEY
                  BAPI_ITEM_TEXT = GI_BAPI_GM_ITEM_CUS-ITEM_TEXT
                  BAPI_UNLOAD_PT = GI_BAPI_GM_ITEM_CUS-UNLOAD_PT
                  BINARY SEARCH.

        IF SY-SUBRC = 0.
          MOVE-CORRESPONDING GI_MARC_SPLIT_ITEM TO LI_MARC_SPLIT_ITEM.
          APPEND LI_MARC_SPLIT_ITEM TO LT_MARC_SPLIT_ITEM.
        ENDIF.
      ENDLOOP.

*      DELETE ztmm_marc_gr_er FROM TABLE lt_marc_split_item.
    ELSE.
      READ TABLE GT_BAPI_RETURN_CUS INTO GI_BAPI_RETURN_CUS WITH KEY TYPE = 'E'.
      IF SY-SUBRC = 0.
        PW_GOODS_FLAG = ' '.
        CONCATENATE GI_BAPI_RETURN_CUS-ID GI_BAPI_RETURN_CUS-NUMBER INTO GW_BAPI_ERROR.
        IF GW_BAPI_ERROR IN S_RETURN.
          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              ID         = GI_BAPI_RETURN_CUS-ID
              NUMBER     = GI_BAPI_RETURN_CUS-NUMBER
              LANGUAGE   = SY-LANGU
              TEXTFORMAT = SPACE
              MESSAGE_V1 = GI_BAPI_RETURN_CUS-MESSAGE_V1
              MESSAGE_V2 = GI_BAPI_RETURN_CUS-MESSAGE_V2
              MESSAGE_V3 = GI_BAPI_RETURN_CUS-MESSAGE_V3
              MESSAGE_V4 = GI_BAPI_RETURN_CUS-MESSAGE_V4
            IMPORTING
              MESSAGE    = GW_MESSAGE.

          GW_CUS_RET_ERROR = 'X'.
          GW_REJECT_REASON_TAB = GW_MESSAGE.
          GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'SAP'.
          GW_SAP_ERROR_FLAG    = 'X'.
          GW_MSG_ID            = GI_BAPI_RETURN_CUS-ID.
          GW_MSG_NO            = GI_BAPI_RETURN_CUS-NUMBER.

          GW_PROCESS_STATUS = 'F'.
          GW_FAIL_STEP      = 80.
          GW_FAIL_STEP_DESC = TEXT-066.
          GW_REASON         = GW_MESSAGE.
          GW_STATUS         = TEXT-066.
** Incase of error populate, the RECH and RECL tables with error message and step no.
          GV_STATUS = 'E'.
          GV_STEP = '80'.
          GV_STEP_DESCR = TEXT-066.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO GW_MBLNR
                      GT_BAPI_GM_ITEM_CUS.
          PERFORM SPLIT_DEL_TABLE_UPDATE.
          PERFORM ERROR_TABLE_UPDATE TABLES GT_BAPI_GM_ITEM_CUS.
          PERFORM FILE_TABLE_UPDATE USING GW_MBLNR GT_BAPI_GM_ITEM_CUS.
        ELSE.
          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              ID         = GI_BAPI_RETURN_CUS-ID
              NUMBER     = GI_BAPI_RETURN_CUS-NUMBER
              LANGUAGE   = SY-LANGU
              TEXTFORMAT = SPACE
              MESSAGE_V1 = GI_BAPI_RETURN_CUS-MESSAGE_V1
              MESSAGE_V2 = GI_BAPI_RETURN_CUS-MESSAGE_V2
              MESSAGE_V3 = GI_BAPI_RETURN_CUS-MESSAGE_V3
              MESSAGE_V4 = GI_BAPI_RETURN-MESSAGE_V4
            IMPORTING
              MESSAGE    = GW_MESSAGE.

          GW_CUS_RET_ERROR = 'X'.
          GW_REJECT_REASON_TAB = GW_MESSAGE.
          GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
          GW_INPUT_STATUS_TAB  = 'E'.
          GW_ERROR_TYPE_TAB    = 'MARC'.
          GW_SAP_ERROR_FLAG    = 'X'.
          GW_MSG_ID            = GI_BAPI_RETURN_CUS-ID.
          GW_MSG_NO            = GI_BAPI_RETURN_CUS-NUMBER.

          GW_PROCESS_STATUS = 'F'.
          GW_FAIL_STEP      = 80.
          GW_FAIL_STEP_DESC = TEXT-066.
          GW_REASON         = GW_MESSAGE.
          GW_STATUS         = TEXT-066.

** Incase of error populate, the RECH and RECL tables with error message and step no.
          GV_STATUS = 'M'.
          GV_STEP = '80'.
          GV_STEP_DESCR = TEXT-066.
          PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO GW_MBLNR
                      GT_BAPI_GM_ITEM_CUS.
          PERFORM SPLIT_DEL_TABLE_UPDATE.
          PERFORM ERROR_TABLE_UPDATE TABLES GT_BAPI_GM_ITEM_CUS.
          PERFORM FILE_TABLE_UPDATE USING GW_MBLNR GT_BAPI_GM_ITEM_CUS.
        ENDIF.
      ENDIF.
    ENDIF.
    CLEAR: GW_MBLNR,GW_MJAHR,GI_MARC_GR_ITEM, GW_MSG_ID,GW_MSG_NO,
           GI_ZTMM_MARC_GR_ERR ,GI_ZTMM_MARC_FILE,GW_ERROR_TYPE_TAB,GW_REJECT_REASON_TAB,GW_INPUT_STATUS_TAB.
    REFRESH: GT_BAPI_GM_ITEM_CUS,GT_BAPI_RETURN_CUS,GT_ZTMM_MARC_GR_ERR.
  ENDIF.

ENDFORM.                    " DELIVERY_GOODS_MVMT
*&---------------------------------------------------------------------*
*&      Form  FETCH_DATA_FOR_IDOC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GW_DEL_DELIVERY  text
*----------------------------------------------------------------------*
FORM FETCH_DATA_FOR_IDOC  USING P_DELIVERY TYPE VBELN_VL.
  CLEAR: GW_VSTEL,
         GW_LFART.
  SELECT SINGLE VSTEL
                LFART
                FROM LIKP
                INTO (GW_VSTEL, GW_LFART)
                WHERE VBELN = P_DELIVERY.
  IF SY-SUBRC IS INITIAL.
    CLEAR GW_WERKS.
    SELECT SINGLE WERKS
                  FROM LIPS
                  INTO GW_WERKS
                  WHERE VBELN = P_DELIVERY.
    IF SY-SUBRC IS NOT INITIAL.
      CLEAR GW_WERKS.
    ENDIF.
  ENDIF.

ENDFORM.                    " FETCH_DATA_FOR_IDOC
*&---------------------------------------------------------------------*
*&      Form  POST_BAPI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM POST_BAPI .
  DATA: LW_BAPI_LINES    TYPE I,
        LW_BAPI_LINES_ER TYPE I,
        LI_BAPI_GM_ITEM  TYPE BAPI2017_GM_ITEM_CREATE,
        LT_BAPI_GM_ITEM  TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.
  CLEAR: LW_BAPI_LINES, LW_BAPI_LINES_ER.
  DATA: LT_MARC_GR_ITEM TYPE STANDARD TABLE OF ZTMM_MARC_GR_ER,
        LI_MARC_GR_ITEM TYPE ZTMM_MARC_GR_ER.
  SORT GT_MARC_GR_ITEM BY BAPI_ITEM_TEXT BAPI_UNLOAD_PT .
*****IF Subset Consists of 101 & 701 Posting
  IF GT_BAPI_GM_ITEM IS NOT INITIAL.
***Test Run**
*    IF p_error = 'X'.
*      DESCRIBE TABLE gt_bapi_gm_item LINES lw_bapi_lines_er.
*    ENDIF.
    LOOP AT GT_BAPI_GM_ITEM INTO GI_BAPI_GM_ITEM.
      IF GI_BAPI_GM_ITEM-VENDOR IS NOT INITIAL.
*  **Conversion exit for Vendor number
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = GI_BAPI_GM_ITEM-VENDOR
          IMPORTING
            OUTPUT = GI_BAPI_GM_ITEM-VENDOR.
        MODIFY GT_BAPI_GM_ITEM FROM GI_BAPI_GM_ITEM.
      ENDIF.
      MOVE-CORRESPONDING GI_BAPI_GM_ITEM TO LI_BAPI_GM_ITEM.
      APPEND LI_BAPI_GM_ITEM TO LT_BAPI_GM_ITEM.
    ENDLOOP.
    CLEAR GV_STEP.
    GV_STEP = '30'.
    GV_STEP_DESCR = TEXT-072.
* Test run
    PERFORM TEST_RUN_BAPI USING GI_BAPI_GM_HEAD GI_BAPI_GM_CODE GT_BAPI_GM_ITEM.
    IF GT_BAPI_GM_ITEM IS NOT INITIAL.
      CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
        EXPORTING
          GOODSMVT_HEADER  = GI_BAPI_GM_HEAD
          GOODSMVT_CODE    = GI_BAPI_GM_CODE
        IMPORTING
          MATERIALDOCUMENT = GW_MBLNR
          MATDOCUMENTYEAR  = GW_MJAHR
        TABLES
          GOODSMVT_ITEM    = GT_BAPI_GM_ITEM " lt_bapi_gm_item  "changes by USSHSAT1  DE3K9A0EHD on 07.07.2022
          RETURN           = GT_BAPI_RETURN.

      IF GW_MBLNR IS NOT INITIAL.

        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            WAIT = GC_X.

        GV_STATUS = 'C'.
        CLEAR: GV_STEP, GV_STEP_DESCR, GW_MESSAGE, GW_MSG_ID, GW_MSG_NO.
        PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO GW_MBLNR
                                GT_BAPI_GM_ITEM.
        GW_INPUT_STATUS_TAB = 'C'.
        PERFORM FILE_TABLE_UPDATE USING GW_MBLNR GT_BAPI_GM_ITEM.
        "" Delete Entries when SAP Error Reprocessing is successful
        LOOP AT GT_BAPI_GM_ITEM INTO GI_BAPI_GM_ITEM.
          READ TABLE  GT_MARC_GR_ITEM INTO GI_MARC_GR_ITEM WITH KEY
                    BAPI_ITEM_TEXT = GI_BAPI_GM_ITEM-ITEM_TEXT
                    BAPI_UNLOAD_PT = GI_BAPI_GM_ITEM-UNLOAD_PT
                    BINARY SEARCH.

          IF SY-SUBRC = 0.
            MOVE-CORRESPONDING GI_MARC_GR_ITEM TO LI_MARC_GR_ITEM.
            APPEND LI_MARC_GR_ITEM TO LT_MARC_GR_ITEM.
          ENDIF.
        ENDLOOP.
*        DELETE ztmm_marc_gr_er FROM TABLE lt_marc_gr_item.
*****IF Overage -- Process 701 Movement Type
        PERFORM POST_BAPI_SH.
      ELSE.
        READ TABLE GT_BAPI_RETURN INTO GI_BAPI_RETURN WITH KEY TYPE = 'E'.
        IF SY-SUBRC = 0.
          CONCATENATE GI_BAPI_RETURN-ID GI_BAPI_RETURN-NUMBER INTO GW_BAPI_ERROR.
          IF GW_BAPI_ERROR IN S_RETURN.
            CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
              EXPORTING
                ID         = GI_BAPI_RETURN-ID
                NUMBER     = GI_BAPI_RETURN-NUMBER
                LANGUAGE   = SY-LANGU
                TEXTFORMAT = SPACE
                MESSAGE_V1 = GI_BAPI_RETURN-MESSAGE_V1
                MESSAGE_V2 = GI_BAPI_RETURN-MESSAGE_V2
                MESSAGE_V3 = GI_BAPI_RETURN-MESSAGE_V3
                MESSAGE_V4 = GI_BAPI_RETURN-MESSAGE_V4
              IMPORTING
                MESSAGE    = GW_MESSAGE.

            GW_REJECT_REASON_TAB = GW_MESSAGE.
            GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'SAP'.
            GW_SAP_ERROR_FLAG    = 'X'.
            GW_MSG_ID            = GI_BAPI_RETURN-ID.
            GW_MSG_NO            = GI_BAPI_RETURN-NUMBER.
** Update RECH and RECL tables with error status, fail step and error message
            GV_STATUS = 'E'.
            PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO GW_MBLNR
                                       GT_BAPI_GM_ITEM.
            PERFORM ERROR_TABLE_UPDATE TABLES GT_BAPI_GM_ITEM.
            PERFORM FILE_TABLE_UPDATE USING GW_MBLNR GT_BAPI_GM_ITEM.
          ELSE.
            CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
              EXPORTING
                ID         = GI_BAPI_RETURN-ID
                NUMBER     = GI_BAPI_RETURN-NUMBER
                LANGUAGE   = SY-LANGU
                TEXTFORMAT = SPACE
                MESSAGE_V1 = GI_BAPI_RETURN-MESSAGE_V1
                MESSAGE_V2 = GI_BAPI_RETURN-MESSAGE_V2
                MESSAGE_V3 = GI_BAPI_RETURN-MESSAGE_V3
                MESSAGE_V4 = GI_BAPI_RETURN-MESSAGE_V4
              IMPORTING
                MESSAGE    = GW_MESSAGE.

            GW_REJECT_REASON_TAB = GW_MESSAGE.
            GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'MARC'.
            GW_SAP_ERROR_FLAG    = 'X'.
            GW_MSG_ID            = GI_BAPI_RETURN-ID.
            GW_MSG_NO            = GI_BAPI_RETURN-NUMBER.
** Update RECH and RECL tables with error status, fail step and error message
            GV_STATUS = 'M'.
            PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO GW_MBLNR
                                       GT_BAPI_GM_ITEM.
            PERFORM ERROR_TABLE_UPDATE TABLES GT_BAPI_GM_ITEM.
            PERFORM FILE_TABLE_UPDATE USING GW_MBLNR GT_BAPI_GM_ITEM.
          ENDIF.
        ENDIF.
      ENDIF.
      CLEAR: GW_MBLNR,GW_MJAHR,GI_MARC_GR_ITEM, GW_MSG_ID,GW_MSG_NO,
             GI_ZTMM_MARC_GR_ERR ,GI_ZTMM_MARC_FILE,GW_ERROR_TYPE_TAB,GW_REJECT_REASON_TAB,GW_INPUT_STATUS_TAB.
      REFRESH: GT_BAPI_GM_ITEM,GT_BAPI_RETURN,GT_ZTMM_MARC_GR_ERR.
    ENDIF.
*****IF Subset Consists of only 701 Posting
  ELSEIF GT_BAPI_GM_ITEM IS INITIAL AND GT_BAPI_GM_ITEM_SH IS NOT INITIAL.
***Test Run**
*    IF p_error = 'X'.
*      DESCRIBE TABLE gt_bapi_gm_item_sh LINES lw_bapi_lines_er.
*    ENDIF.
    LOOP AT GT_BAPI_GM_ITEM_SH INTO GI_BAPI_GM_ITEM_SH.
      IF GI_BAPI_GM_ITEM_SH-VENDOR IS NOT INITIAL.
*  **Conversion exit for Vendor number
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = GI_BAPI_GM_ITEM_SH-VENDOR
          IMPORTING
            OUTPUT = GI_BAPI_GM_ITEM_SH-VENDOR.
        MODIFY GT_BAPI_GM_ITEM_SH FROM GI_BAPI_GM_ITEM_SH.
      ENDIF.
    ENDLOOP.
    CLEAR GV_STEP.
    GV_STEP = '40'.
    GV_STEP_DESCR = TEXT-073.
    PERFORM TEST_RUN_BAPI USING GI_BAPI_GM_HEAD_SH GI_BAPI_GM_CODE_SH GT_BAPI_GM_ITEM_SH.
    IF GT_BAPI_GM_ITEM_SH IS NOT INITIAL.
      CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
        EXPORTING
          GOODSMVT_HEADER  = GI_BAPI_GM_HEAD_SH
          GOODSMVT_CODE    = GI_BAPI_GM_CODE_SH
        IMPORTING
          MATERIALDOCUMENT = GW_MBLNR_SH
          MATDOCUMENTYEAR  = GW_MJAHR_SH
        TABLES
          GOODSMVT_ITEM    = GT_BAPI_GM_ITEM_SH
          RETURN           = GT_BAPI_RETURN_SH.

      IF GW_MBLNR_SH IS NOT INITIAL.

        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            WAIT = GC_X.

        GV_STATUS = 'C'.
        CLEAR: GV_STEP, GV_STEP_DESCR, GW_MESSAGE, GW_MSG_ID, GW_MSG_NO.
        PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE GW_MSG_ID GW_MSG_NO GW_MBLNR_SH
                                GT_BAPI_GM_ITEM.
        GW_INPUT_STATUS_TAB = 'C'.
        PERFORM FILE_TABLE_UPDATE USING GW_MBLNR_SH GT_BAPI_GM_ITEM_SH.
        "" Delete Entries when SAP Error Reprocessing is successful
        LOOP AT GT_BAPI_GM_ITEM_SH INTO GI_BAPI_GM_ITEM_SH.
          READ TABLE  GT_MARC_GR_ITEM INTO GI_MARC_GR_ITEM WITH KEY
                    BAPI_ITEM_TEXT = GI_BAPI_GM_ITEM_SH-ITEM_TEXT
                    BAPI_UNLOAD_PT = GI_BAPI_GM_ITEM_SH-UNLOAD_PT
                    BINARY SEARCH.
          IF SY-SUBRC = 0.
            MOVE-CORRESPONDING GI_MARC_GR_ITEM TO LI_MARC_GR_ITEM.
            APPEND LI_MARC_GR_ITEM TO LT_MARC_GR_ITEM.
          ENDIF.
        ENDLOOP.
*        DELETE ztmm_marc_gr_er FROM TABLE lt_marc_gr_item.
******IF Overage -- Process 701 Movement Type
      ELSE.
        CLEAR:GI_BAPI_RETURN_SH,GW_BAPI_ERROR."gw_bapi_error_sh.
        READ TABLE GT_BAPI_RETURN_SH INTO GI_BAPI_RETURN_SH WITH KEY TYPE = 'E'.
        IF SY-SUBRC = 0.
          CONCATENATE GI_BAPI_RETURN_SH-ID GI_BAPI_RETURN_SH-NUMBER INTO GW_BAPI_ERROR."gw_bapi_error_sh.
*          IF gw_bapi_error_sh IN s_return.
          IF GW_BAPI_ERROR IN S_RETURN.
            CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
              EXPORTING
                ID         = GI_BAPI_RETURN_SH-ID
                NUMBER     = GI_BAPI_RETURN_SH-NUMBER
                LANGUAGE   = SY-LANGU
                TEXTFORMAT = SPACE
                MESSAGE_V1 = GI_BAPI_RETURN_SH-MESSAGE_V1
                MESSAGE_V2 = GI_BAPI_RETURN_SH-MESSAGE_V2
                MESSAGE_V3 = GI_BAPI_RETURN_SH-MESSAGE_V3
                MESSAGE_V4 = GI_BAPI_RETURN_SH-MESSAGE_V4
              IMPORTING
                MESSAGE    = GW_MESSAGE_SH.

            GW_REJECT_REASON_TAB = GW_MESSAGE_SH.
            GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE_SH.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'SAP'.
            GW_SAP_ERROR_SH_FLAG = 'X'.
            GW_MSG_ID            = GI_BAPI_RETURN_SH-ID.
            GW_MSG_NO            = GI_BAPI_RETURN_SH-NUMBER.
** Update RECH and RECL tables with error status, fail step and error message
            GV_STATUS = 'E'.
            PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE_SH GW_MSG_ID GW_MSG_NO GW_MBLNR_SH
                                       GT_BAPI_GM_ITEM_SH.
            PERFORM ERROR_TABLE_UPDATE TABLES GT_BAPI_GM_ITEM_SH.
            PERFORM FILE_TABLE_UPDATE USING GW_MBLNR_SH GT_BAPI_GM_ITEM_SH.
          ELSE.
            CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
              EXPORTING
                ID         = GI_BAPI_RETURN_SH-ID
                NUMBER     = GI_BAPI_RETURN_SH-NUMBER
                LANGUAGE   = SY-LANGU
                TEXTFORMAT = SPACE
                MESSAGE_V1 = GI_BAPI_RETURN_SH-MESSAGE_V1
                MESSAGE_V2 = GI_BAPI_RETURN_SH-MESSAGE_V2
                MESSAGE_V3 = GI_BAPI_RETURN_SH-MESSAGE_V3
                MESSAGE_V4 = GI_BAPI_RETURN_SH-MESSAGE_V4
              IMPORTING
                MESSAGE    = GW_MESSAGE_SH.

            GW_REJECT_REASON_TAB = GW_MESSAGE_SH.
            GI_ERROR_FILE-REJECT_REASON = GW_MESSAGE_SH.
            GW_INPUT_STATUS_TAB  = 'E'.
            GW_ERROR_TYPE_TAB    = 'MARC'.
            GW_SAP_ERROR_SH_FLAG = 'X'.
            GW_MSG_ID            = GI_BAPI_RETURN_SH-ID.
            GW_MSG_NO            = GI_BAPI_RETURN_SH-NUMBER.
** Update RECH and RECL tables with error status, fail step and error message
            GV_STATUS = 'M'.
            PERFORM RECL_UPDATE USING  GV_STATUS GV_STEP GV_STEP_DESCR GW_MESSAGE_SH GW_MSG_ID GW_MSG_NO GW_MBLNR_SH
                                       GT_BAPI_GM_ITEM_SH.
            PERFORM ERROR_TABLE_UPDATE TABLES GT_BAPI_GM_ITEM_SH.
            PERFORM FILE_TABLE_UPDATE USING GW_MBLNR_SH GT_BAPI_GM_ITEM_SH.
          ENDIF.
        ENDIF.
      ENDIF.
      CLEAR: GW_MBLNR,GW_MJAHR,GI_MARC_GR_ITEM,
             GI_BAPI_GM_HEAD_SH,GI_BAPI_GM_CODE_SH,GW_MBLNR_SH,GW_MJAHR_SH,GW_MSG_ID,GW_MSG_NO,
             GI_ZTMM_MARC_GR_ERR ,GI_ZTMM_MARC_FILE,GW_ERROR_TYPE_TAB,GW_REJECT_REASON_TAB,GW_INPUT_STATUS_TAB.
      REFRESH: GT_BAPI_GM_ITEM,GT_BAPI_RETURN,GT_BAPI_GM_ITEM_SH,GT_BAPI_RETURN_SH,GT_ZTMM_MARC_GR_ERR.
    ENDIF.
  ENDIF.
ENDFORM.                    " POST_BAPI
*&---------------------------------------------------------------------*
*&      Form  ERROR_REPROCESS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ERROR_REPROCESS .
  CLEAR GV_FOUND.
  REFRESH: GT_GR_RECH, GT_GR_RECL.
** Begin of changes by USPRADI JE3K906283 on 29.03.2021
*  LOOP AT gt_gr_rech_main INTO gi_gr_rech WHERE comp_code = p_ccode
*                                            AND process_status = 'E'.
  LOOP AT GT_GR_RECH_MAIN INTO GI_GR_RECH WHERE COMP_CODE = P_CCODE.
    IF GI_GR_RECH-PROCESS_STATUS = 'E'.
** End of changes by USPRADI JE3K906283 on 29.03.2021
      APPEND GI_GR_RECH TO GT_GR_RECH.
      LOOP AT GT_GR_RECL_MAIN INTO GI_GR_RECL WHERE FILE_NAME = GI_GR_RECH-FILE_NAME
                                           AND COMP_CODE = GI_GR_RECH-COMP_CODE
                                           AND TRAN_SEQ_NO = GI_GR_RECH-TRAN_SEQ_NO
                                           AND PO_NO = GI_GR_RECH-PO_NO
                                           AND RECH_SEQ = GI_GR_RECH-RECH_SEQ
                                           AND PROCESS_STATUS = 'E'
                                           AND MESSAGE_ID_NUM IN S_MSGID.
        APPEND GI_GR_RECL TO GT_GR_RECL.
        GV_FOUND = 'X'. "If error records are there for given tran seq number
      ENDLOOP.
      CLEAR: GI_GR_RECH, GI_GR_RECL.
** Begin of changes by USPRADI JE3K906283 on 29.03.2021
    ENDIF.
    CLEAR GI_GR_RECH.
** End of changes by USPRADI JE3K906283 on 29.03.2021
** Processing is done per Tran Seq Number
    AT END OF TRAN_SEQ_NO.
      CLEAR: GW_SEQ_NO.
      IF GT_GR_RECH IS NOT INITIAL AND GT_GR_RECL IS NOT INITIAL.
        PERFORM PROCESS_GR .
        REFRESH: GT_GR_RECH, GT_GR_RECL.
      ENDIF.
    ENDAT.
  ENDLOOP.
** If no error records are found for any of the given tran seq numbers then throw error
  IF GV_FOUND IS INITIAL.
    MESSAGE TEXT-079 TYPE 'S' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.
ENDFORM.                    " ERROR_REPROCESS
*&---------------------------------------------------------------------*
*&      Form  FILL_AUTOMSGS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_AUTOMSGS .
** If message id and number are not given while reprocessing, only process the records which
** errored with Auto reprocess messages.
  DATA: LI_MSG LIKE LINE OF S_MSGID.
  CLEAR: GI_MARC_MSG_PR.
  IF S_MSGID IS INITIAL.
    LOOP AT GT_MARC_MSG_PR INTO GI_MARC_MSG_PR.
      IF GI_MARC_MSG_PR-PROCESSING = 'AU'. "Auto
        LI_MSG-SIGN = 'I'.
        LI_MSG-OPTION = 'EQ'.
        LI_MSG-LOW = GI_MARC_MSG_PR-MSG_ID_NUM.
        APPEND LI_MSG TO S_MSGID.
        CLEAR: LI_MSG, GI_MARC_MSG_PR.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.                    " FILL_AUTOMSGS
*&---------------------------------------------------------------------*
*&      Form  REFRESH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM REFRESH .
  REFRESH: GT_ZTUHCD1 , GT_GR_RECH, GT_GR_RECH_MAIN, GT_GR_RECL, GT_GR_RECL_MAIN,
           GT_ALV_DATA, GT_FCAT, GT_BAPI_GM_ITEM, GT_OTF, GT_TLINE, GT_OBJTXT,
           GT_LIKP, GT_LIPS, GT_LFA1, GT_VBFA, GT_LIPS1, GT_ITEM_DATA,
           GT_ITEM_CONTROL, GT_RETURN , GT_TBTCO, GT_ZTMM_MARC_GR_CUS, GT_SPLIT_ITEMDATA,
           GT_SPLIT_RETURN, GT_VBPOK_TAB, GT_PGI_RETURN, GT_INSP_DATA, GT_INSP_RETURN,
           GT_OBD_ITEM_DATA, GT_OBD_ITEM_CONTROL, GT_OBD_RETURN, GT_DEL_ITEM_DATA,
           GT_DEL_ITEM_CONTROL, GT_DEL_RETURN, GT_BATCH_ITEM_DATA, GT_BATCH_ITEM_CONTROL,
           GT_BATCH_RETURN, GT_BAPI_GM_ITEM_CUS, GT_BAPI_RETURN_CUS, GT_MARC_MSG_PR,
           GT_OBJBIN, GT_BAPI_RETURN,GT_BAPI_GM_ITEM_SH,GT_BAPI_RETURN_SH, GT_INPUT_DATA,
           GT_DIR_LIST,GT_ZTMM_MARC_TRANS,GT_ZTMM_MARC_FILE,GT_GR_MARC_FL, GT_ZTMM_MARC_GR_ERR,
           GT_MARC_GR_ITEM,GT_MARC_OVG_ITEM,GT_MARC_SUP_ITEM,GT_MARC_SPLIT_ITEM,
           GT_GR_MARC_ER,GT_ERROR_FILE, GT_ERROR_MARC,GT_ERROR_MARC_SMF,GT_MARC_GR_EF,
           GT_SAP_ERR    .

  CLEAR:GI_ZTUHCD1, GI_GR_RECH, GI_GR_RECL, GI_ALV_DATA,GI_FCAT ,GV_RECTYPE ,GV_TRAN_SEQ ,
        GV_PROD_STATUS, GV_FSTEP ,GV_PROCESS_STATUS,GV_BATCH ,GV_OVERAGE,"gv_fail_step ,
        GV_LINKED_SURP ,GI_BAPI_GM_ITEM ,GW_RESULT, GW_REJECT_REASON ,GW_MBLNR,GW_MJAHR,
        GW_MBLNR_SH,GW_MJAHR_SH,GW_PROD_STAT,GW_FILE_PATH,GW_ARC_FILE_PATH,GW_SOURCE_PATH,
        GW_TARGET_PATH,GW_TRAN_NO_TAB,GW_HEADER_TXT,GW_TRANS_SEQ_NO_TAB,GW_DATA_TYPE_TAB,
        GW_COMP_CODE_TAB,GW_PO_NO_TAB,GW_PO_LINE_NO_TAB,GW_PO_LINE_NO,GW_SKU_TAB,
        GW_QTY_EXPE_TAB,GW_QTY_EXPE,GW_PRE_PO_NO_TAB,GW_NO_HDR_RECORDS_TAB ,GW_NO_DETAIL_RECORDS_TAB,
        GW_NO_DETAIL_REC_PROCESS_TAB,GW_MAT_DOC_TAB,GW_INPUT_STATUS_TAB,GW_ERROR_TYPE_TAB,
        GW_REJECT_REASON_TAB ,GW_UOM_ABBREV ,GW_UOM,GW_LOT,GW_LP,GW_LP_TAB,GW_CART_LP,
        GW_CART_LP_TAB,GW_MESSAGE,GW_MESSAGE_SH,GW_ERR_CNT,GW_SEQ_NO,GW_SEQ_NO_TEMP,GW_SEQ_NO_CUS,
        GW_BAPI_ERROR,GW_BAPI_ERROR_SH,GW_SAP_ERROR_FLAG,GW_SAP_ERROR_SH_FLAG,GW_FMNAME,
        GI_SSFCTRLOP,GI_SSFCOMPOP,GI_SSFCRESCL,GI_OBJHEAD,GW_BUFFER,GI_TLINE,GI_RECORD,
        GI_OBJBIN,GV_LEN_IN,GI_XSTRING,GW_VBELN,GW_LIFEX,GW_DTYPE,GW_TSEQNO,GW_FNAME,
        GW_CCODE,GW_NTYPE ,GW_VALUE,GW_REC_ERROR,GW_TEST,GW_LINE_COUNT,GW_PRE_LINE_NO,
        GW_VENDOR,GW_POS_QTY,GW_NEV_QTY,GW_GR_QTY,GW_GR_OPEN_QTY,GW_GR_101_QTY,GW_GR_701_QTY,
        GW_GR_MAIN_QTY,GW_GR_CHILD_QTY,GW_GR_FULL_QTY,GW_GR_LINE_QTY,GW_MSG_ID,
        GW_MSG_NO, GW_MATNR,GW_ZZALTMN, GW_FLAG, GW_STRLN,GW_SWITCH, GW_OLD_DELI,
        GW_NEW_DELI,GW_OBD_MAIN_QTY,GW_OBD_CHILD_QTY , GW_OBD_FULL_QTY ,GW_OBD_LINE_QTY,
        GW_CUS_RET_ERROR, GW_OBD_FLAG, GW_SPLIT_FLAG,GW_DELETE_FLAG, GW_PICK_FLAG,GW_PGI_FLAG,
        GW_INSP_FLAG,GW_GOODS_FLAG,GW_BATCH_FLAG ,GW_PROCESS_STATUS,GW_FAIL_STEP,
        GW_FAIL_STEP_NO, GW_FAIL_STEP_DESC, GW_REASON , GW_STATUS,GW_SPLIT_DEL_NO,
        GW_SPLIT_DEL_LINE_NO,GW_SPLIT_DEL_QTY,GW_INSP_NO,GW_PGI_GR_NO,GW_PGI_GR_LINE_NO,
        GW_PGI_GR_QTY, GW_PGI_GR_YEAR,GW_PGI_MOVE_TYPE,GW_GR_NO,GW_GR_YEAR,GW_GR_LINE_NO,
        GW_GR_QTY_CUS,GW_GR_MOVE_TYPE,GW_INSP_CODE,GW_FOLLOWUP_ACT ,GI_BAPI_GM_HEAD ,
        GI_BAPI_GM_CODE, GW_TESTRUN,GI_BAPI_RETURN,GI_BAPI_GM_HEAD_SH ,GI_BAPI_GM_CODE_SH ,
        GW_TESTRUN_SH ,GI_BAPI_GM_ITEM_SH,GI_BAPI_RETURN_SH,GI_INPUT_DATA, GI_DIR_LIST,
        GI_ZTMM_MARC_TRANS , GI_ZTMM_MARC_FILE ,GI_GR_MARC_FL,GI_ZTMM_MARC_GR_ERR,
        GI_MARC_GR_ITEM,GI_MARC_OVG_ITEM,GI_MARC_SUP_ITEM,GI_MARC_SPLIT_ITEM,
        GI_GR_MARC_ER,GI_ERROR_FILE, GI_ERROR_MARC_SMF,GI_ERROR_MARC,GI_MARC_GR_EF,
        GI_MARC_PRINT, GI_SAP_ERR, GV_EMAIL,GI_LIKP,GI_LIPS,GI_LFA1,GI_VBFA,
        GI_VBFA_PGI,GI_LIPS1,GI_LIPS1_TMP ,GI_LIPS_SPLIT,GI_LIPS_DELETE,GI_HEADER_DATA,
        GI_HEADER_CONTROL,GW_DELIVERY,GI_ITEM_DATA,GI_ITEM_CONTROL, GI_TBTCO,
        GI_ZTMM_MARC_GR_CUS ,GI_SPLIT_ITEMDATA,GI_SPLIT_RETURN, GI_VBKOK_WA,GI_VBPOK_TAB,
        GI_PGI_HEADER_DATA,GI_PGI_HEADER_CONTROL , GI_PGI_DELIVERY ,GI_PGI_RETURN ,
        GI_INSP_DATA, GI_LONGTEXT, GI_INSP_RETURN, GI_OBD_HEADER_DATA,GI_OBD_HEADER_CONTROL,
        GW_OBD_DELIVERY, GI_OBD_ITEM_DATA,GI_OBD_ITEM_CONTROL,GI_OBD_RETURN, GI_DEL_HEADER_DATA,
        GI_DEL_HEADER_CONTROL, GW_DEL_DELIVERY,GI_DEL_ITEM_DATA,GI_DEL_ITEM_CONTROL, GI_DEL_RETURN ,
        GI_BATCH_HEADER_DATA,  GI_BATCH_HEADER_CONTROL,GW_BATCH_DELIVERY, GW_BATCH_DELIVERY,
        GI_BATCH_ITEM_DATA,GI_BATCH_ITEM_CONTROL, GI_BATCH_RETURN,GI_BAPI_GM_HEAD_CUS ,
        GI_BAPI_GM_CODE_CUS, GW_TESTRUN_CUS ,  GI_BAPI_GM_ITEM_CUS,GI_BAPI_RETURN_CUS,GI_VBUK,
        GW_VSTEL,GW_LFART, GW_WERKS, GV_RECH_COUNT, GV_RECL_COUNT,GV_STEP,  GV_STEP_DESCR,
        GV_STATUS,  GV_TABIX, GI_MARC_MSG_PR,GV_CONTINUE,GV_FOUND, GI_RETURN.

ENDFORM.                    " REFRESH

