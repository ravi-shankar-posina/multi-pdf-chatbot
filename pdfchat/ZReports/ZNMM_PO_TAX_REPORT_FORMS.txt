*&---------------------------------------------------------------------*
*&  Include           ZNRMM_PO_TAX_REPORT_FORMS
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  FETCH_RECORDS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM fetch_records .

  CLEAR:   gi_ztuhcd1_ds.
  REFRESH: gt_ztuhcd1_ds.
  gi_ztuhcd1_ds-name  = gc_form_name_ds.
  APPEND gi_ztuhcd1_ds TO gt_ztuhcd1_ds.
  CLEAR  gi_ztuhcd1_ds.
  CALL FUNCTION 'Z_UHARD_CODE_VALUE'
    TABLES
      t_ztuhcd1 = gt_ztuhcd1_ds.

*  IF sy-subrc = 0.
    SORT  gt_ztuhcd1_ds BY name zkey field.
    CLEAR gi_ztuhcd1_ds.
*  ENDIF.

  SELECT ebeln
           ernam
           bedat
           ekorg
           ekgrp
           bsart
           lifnr
           knumv FROM ekko
           INTO TABLE gt_ekko
           WHERE ebeln IN s_ebeln
             AND bedat IN s_bedat
             AND ekorg IN s_ekorg
             AND bsart IN s_bsart
             AND lifnr IN s_lifnr
             AND ernam IN s_ernam
             AND ekgrp IN s_ekgrp.

  IF sy-subrc = 0.
    SORT gt_ekko BY ebeln.
  ENDIF.

  IF gt_ekko[]  IS NOT INITIAL.
    SELECT ebeln
           ebelp
           werks
           matnr
           matkl
           infnr
           mwskz FROM ekpo
           INTO TABLE gt_ekpo
           FOR ALL ENTRIES IN gt_ekko
           WHERE ebeln = gt_ekko-ebeln
             AND loekz = ' '
             AND matnr IN s_matnr
             AND matkl IN s_matkl
             AND mwskz IN s_mwskz.

    IF sy-subrc = 0.
      SORT gt_ekpo BY ebeln ebelp.
    ENDIF.

    READ TABLE gt_ztuhcd1_ds INTO gi_ztuhcd1_ds WITH KEY name  = gc_form_name_ds
                                                         zkey  = gc_tax
                                                         field = gc_kschl BINARY SEARCH.
    IF sy-subrc EQ 0.
      SELECT knumv
             kposn
             kschl
             mwsk1 FROM konv
             INTO TABLE gt_konv
             FOR ALL ENTRIES IN gt_ekko
             WHERE knumv = gt_ekko-knumv
               AND kschl = gi_ztuhcd1_ds-low."'ZMST'.
      IF sy-subrc = 0.
        SORT gt_konv BY knumv kposn.
      ENDIF.
    ENDIF.
  ENDIF.

  IF gt_ekpo[] IS NOT INITIAL.
    SELECT infnr
           ekorg
           werks
           mwskz FROM eine
           INTO TABLE gt_eine
           FOR ALL ENTRIES IN gt_ekpo
           WHERE infnr = gt_ekpo-infnr
             AND esokz = '0'
             AND werks = gt_ekpo-werks.
    IF sy-subrc = 0.
      SORT gt_eine BY infnr ekorg werks.
    ENDIF.
  ENDIF.

ENDFORM.                    " FETCH_RECORDS
*&---------------------------------------------------------------------*
*&      Form  FIELDCATALOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM fieldcatalog .
  PERFORM fieldcat USING:
              'BEDAT'   'Purchasing Document Date'(002) ' ',
              'EBELN'   'Purchasing Document'(003)      'X',
              'EBELP'   'Item line'(004) ' ',
              'EKORG'   'Purchasing Org'(005) ' ',
              'WERKS'   'Plant Code'(006) ' ',
              'BSART'   'Document Type'(007) ' ',
              'LIFNR'   'Vendor Code'(008) ' ',
              'MATNR'   'Material'(009) ' ',
              'MATKL'   'Material Group'(010) ' ',
              'MWSKZ'   'PO Tax code'(011) ' ',
              'MWSK1'   'ZMST Tax Code'(012) ' ',
              'MWSKZ1'  'PIR Tax Code'(013) ' ',
              'ERNAM'   'Name of Person who Created the Object'(014) ' ',
              'EKGRP'   'Purchasing Group'(015) ' '.
ENDFORM.                    " FIELDCATALOG
*&---------------------------------------------------------------------*
*&      Form  FIELDCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0467   text
*      -->P_0468   text
*----------------------------------------------------------------------*
FORM fieldcat  USING p_fname p_stext p_hotspot.
  CLEAR gw_fieldcat.
  gw_fieldcat-fieldname = p_fname.
  gw_fieldcat-seltext_l = p_stext.
  gw_fieldcat-hotspot = p_hotspot.
  APPEND gw_fieldcat TO gt_fieldcat.
  CLEAR gw_fieldcat.
ENDFORM.                    " FIELDCAT
*&---------------------------------------------------------------------*
*&      Form  PREPARE_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM prepare_data .

  LOOP AT gt_ekpo INTO gw_ekpo.
    gw_final-ebelp = gw_ekpo-ebelp.
    gw_final-matkl = gw_ekpo-matkl.
    gw_final-matnr = gw_ekpo-matnr.
    gw_final-werks = gw_ekpo-werks.
    gw_final-mwskz = gw_ekpo-mwskz.

    READ TABLE gt_ekko INTO gw_ekko WITH KEY ebeln = gw_ekpo-ebeln BINARY SEARCH.
    IF  sy-subrc IS INITIAL.
      gw_final-ebeln = gw_ekko-ebeln.
      gw_final-ernam = gw_ekko-ernam.
      gw_final-bedat = gw_ekko-bedat.
      gw_final-ekorg = gw_ekko-ekorg.
      gw_final-ekgrp = gw_ekko-ekgrp.
      gw_final-bsart = gw_ekko-bsart.
      gw_final-lifnr = gw_ekko-lifnr.

      READ TABLE gt_konv INTO gw_konv WITH KEY knumv = gw_ekko-knumv
                                               kposn = gw_final-ebelp BINARY SEARCH.
      IF sy-subrc = 0.
        gw_final-mwsk1 =  gw_konv-mwsk1.
        IF p_tax IS NOT INITIAL AND
           gw_final-mwsk1 = gw_final-mwskz.
          CLEAR: gw_ekko,
                 gw_ekpo,
                 gw_konv,
                 gw_eine,
                 gw_final.
          CONTINUE.
        ENDIF.
      ENDIF.
    ENDIF.
    READ TABLE gt_eine INTO gw_eine WITH KEY infnr = gw_ekpo-infnr
                                             werks = gw_ekpo-werks
                                             ekorg = gw_final-ekorg BINARY SEARCH.
    IF sy-subrc = 0.
      gw_final-mwskz1 = gw_eine-mwskz.
    ENDIF.

    APPEND gw_final TO gt_final.
    CLEAR: gw_ekko,
           gw_ekpo,
           gw_konv,
           gw_eine,
           gw_final.
  ENDLOOP.

ENDFORM.                    " PREPARE_DATA
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_alv .
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      it_fieldcat             = gt_fieldcat
      i_callback_program      = sy-repid
      i_callback_user_command = 'USER_COMMAND'
    TABLES
      t_outtab                = gt_final
    EXCEPTIONS
      program_error           = 1
      OTHERS                  = 2.

ENDFORM.                    " DISPLAY_ALV

*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->R_UCOMM      text
*      -->RS_SELFIELD  text
*----------------------------------------------------------------------*
FORM user_command USING r_ucomm LIKE sy-ucomm
rs_selfield TYPE slis_selfield.
  IF rs_selfield-fieldname = 'EBELN'.
    SET PARAMETER ID 'BES' FIELD rs_selfield-value.
    CALL TRANSACTION 'ME23N' ."AND SKIP FIRST SCREEN.
  ENDIF.
ENDFORM. "user_command
*&---------------------------------------------------------------------*
*&      Form  UPDATE_TAXCODE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM update_taxcode .
*gv_PURCHASEORDER TYPE EBELN,
*      gt_POITEM TYPE STANDARD TABLE OF BAPIMEPOITEM,
*      gw_poitem TYPE BAPIMEPOITEM,
*      gt_POITEMX TYPE STANDARD TABLE OF BAPIMEPOITEMX,
*      gw_POITEMX TYPE BAPIMEPOITEMX.
*  GT_RETURN
  SORT gt_final BY ebeln.
  LOOP AT gt_final INTO gw_finalt.
    gw_final = gw_finalt.
    gw_poitem-po_item =  gw_final-ebelp.
    IF gw_final-mwsk1 IS INITIAL.
     CLEAR: gw_finalt, gw_final.
     CONTINUE.
    ENDIF.
    gw_poitem-tax_code = gw_final-mwsk1.
    APPEND gw_poitem TO gt_poitem.
    CLEAR: gw_poitem.
    gw_poitemx-po_item =  gw_final-ebelp.
    gw_poitemx-tax_code = 'X'.
    APPEND gw_poitemx TO gt_poitemx.
    CLEAR: gw_poitemx.
    AT END OF ebeln.
      gv_purchaseorder = gw_final-ebeln.
      CALL FUNCTION 'BAPI_PO_CHANGE'
        EXPORTING
          purchaseorder                =  gv_purchaseorder
*      POHEADER                     =
*      POHEADERX                    =
*      POADDRVENDOR                 =
*      TESTRUN                      =
*      MEMORY_UNCOMPLETE            =
*      MEMORY_COMPLETE              =
*      POEXPIMPHEADER               =
*      POEXPIMPHEADERX              =
*      VERSIONS                     =
*      NO_MESSAGING                 =
*      NO_MESSAGE_REQ               =
*      NO_AUTHORITY                 =
*      NO_PRICE_FROM_PO             =
*      PARK_UNCOMPLETE              =
*      PARK_COMPLETE                =
*    IMPORTING
*      EXPHEADER                    =
*      EXPPOEXPIMPHEADER            =
       TABLES
         return                       = gt_return
         poitem                       = gt_poitem
         poitemx                      = gt_poitemx
*      POADDRDELIVERY               =
*      POSCHEDULE                   =
*      POSCHEDULEX                  =
*      POACCOUNT                    =
*      POACCOUNTPROFITSEGMENT       =
*      POACCOUNTX                   =
*      POCONDHEADER                 =
*      POCONDHEADERX                =
*      POCOND                       =
*      POCONDX                      =
*      POLIMITS                     =
*      POCONTRACTLIMITS             =
*      POSERVICES                   =
*      POSRVACCESSVALUES            =
*      POSERVICESTEXT               =
*      EXTENSIONIN                  =
*      EXTENSIONOUT                 =
*      POEXPIMPITEM                 =
*      POEXPIMPITEMX                =
*      POTEXTHEADER                 =
*      POTEXTITEM                   =
*      ALLVERSIONS                  =
*      POPARTNER                    =
*      POCOMPONENTS                 =
*      POCOMPONENTSX                =
*      POSHIPPING                   =
*      POSHIPPINGX                  =
*      POSHIPPINGEXP                =
*      POHISTORY                    =
*      POHISTORY_TOTALS             =
*      POCONFIRMATION               =
*      SERIALNUMBER                 =
*      SERIALNUMBERX                =
*      INVPLANHEADER                =
*      INVPLANHEADERX               =
*      INVPLANITEM                  =
*      INVPLANITEMX                 =
*      POHISTORY_MA                 =
                .
      READ TABLE gt_return INTO gw_return WITH KEY type = 'E'.
      IF sy-subrc = 0.
        gw_ret-ebeln =  gv_purchaseorder.
        gw_ret-mtype = gw_return-type.
        gw_ret-msg = gw_return-message.
        APPEND gw_ret TO gt_ret.
      ELSE.
        READ TABLE gt_return INTO gw_return WITH KEY type = 'A'.
        IF sy-subrc = 0.
          gw_ret-ebeln =  gv_purchaseorder.
          gw_ret-mtype = 'E'.
          gw_ret-msg = gw_return-message.
          APPEND gw_ret TO gt_ret.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*          EXPORTING
*            WAIT          =
*          IMPORTING
*            RETURN        =
                    .
          gw_ret-ebeln =  gv_purchaseorder.
          gw_ret-mtype = 'S'.
          gw_ret-msg = TEXT-020.
          APPEND gw_ret TO gt_ret.
        ENDIF.

      ENDIF.
      REFRESH: gt_return[], gt_poitem[], gt_poitemx[].
      CLEAR:  gv_purchaseorder.
    ENDAT.

    CLEAR: gw_final, gw_finalt.
  ENDLOOP.

ENDFORM.                    " UPDATE_TAXCODE
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_ERRORS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_errors .
  REFRESH:gt_fieldcat1[].
  CLEAR: gw_fieldcat1.

  PERFORM create_field_cat USING: '1' 'EBELN' text-017,
                                  '2' 'MTYPE' text-018,
                                  '3' 'MSG' text-019.
  gw_layout-colwidth_optimize = 'X' .

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
   EXPORTING
*     I_INTERFACE_CHECK                 = ' '
*     I_BYPASSING_BUFFER                = ' '
*     I_BUFFER_ACTIVE                   = ' '
     i_callback_program                = gv_repid
*     I_CALLBACK_PF_STATUS_SET          = ' '
*     I_CALLBACK_USER_COMMAND           = ' '
*     I_CALLBACK_TOP_OF_PAGE            = ' '
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME                  =
*     I_BACKGROUND_ID                   = ' '
*     I_GRID_TITLE                      =
*     I_GRID_SETTINGS                   =
     is_layout                         = gw_layout
     it_fieldcat                       = gt_fieldcat1
*     IT_EXCLUDING                      =
*     IT_SPECIAL_GROUPS                 =
*     IT_SORT                           =
*     IT_FILTER                         =
*     IS_SEL_HIDE                       =
*     I_DEFAULT                         = 'X'
**** CHG0479283 DE3K946635 modification starts by 502030850 03/09/2014
     i_save                            = 'X'
**** CHG0479283 DE3K946635 modification ends by 502030850 03/09/2014
*     IS_VARIANT                        =
*     IT_EVENTS                         =
*     IT_EVENT_EXIT                     =
*     IS_PRINT                          =
*     IS_REPREP_ID                      =
*     I_SCREEN_START_COLUMN             = 0
*     I_SCREEN_START_LINE               = 0
*     I_SCREEN_END_COLUMN               = 0
*     I_SCREEN_END_LINE                 = 0
*     I_HTML_HEIGHT_TOP                 = 0
*     I_HTML_HEIGHT_END                 = 0
*     IT_ALV_GRAPHICS                   =
*     IT_HYPERLINK                      =
*     IT_ADD_FIELDCAT                   =
*     IT_EXCEPT_QINFO                   =
*     IR_SALV_FULLSCREEN_ADAPTER        =
*   IMPORTING
*     E_EXIT_CAUSED_BY_CALLER           =
*     ES_EXIT_CAUSED_BY_USER            =
    TABLES
      t_outtab                          = gt_ret
   EXCEPTIONS
     program_error                     = 1
     OTHERS                            = 2
            .
  IF sy-subrc <> 0.
    MESSAGE text-055 TYPE 'E'.
  ENDIF.
ENDFORM.                    " DISPLAY_ERRORS
*&---------------------------------------------------------------------*
*&      Form  CREATE_FIELD_CAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0685   text
*      -->P_0686   text
*      -->P_TEXT_004  text
*----------------------------------------------------------------------*
FORM create_field_cat  USING    p_col
                                p_fname
                                p_seltext.
  gw_fieldcat1-col_pos   = p_col.
  gw_fieldcat1-fieldname = p_fname.
  gw_fieldcat1-seltext_l = p_seltext.
  APPEND gw_fieldcat1 TO gt_fieldcat1.
  CLEAR gw_fieldcat1.

ENDFORM.                    " CREATE_FIELD_CAT

