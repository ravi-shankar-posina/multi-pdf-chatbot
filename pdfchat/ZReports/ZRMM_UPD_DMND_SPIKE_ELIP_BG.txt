*&---------------------------------------------------------------------*
*& Report ZRMM_UPD_DMND_SPIKE_ELIP_BG
*&---------------------------------------------------------------------*
** Note : Please check before changing the paramters of subroutines**
******they are called externally from backgorund job program******
*&***------------------------------------------------------------------***
*** Created by            : Manas MIsra
*** Creation Date         : 27/02/2023
*** Transport Request #   : E3K9A0J08
*** RICEF Object No #     : 2635
*** TC ode                : ZMM2635
*** Description           : Conversion & maintaince program to upload
***                         Demand Spike ELIP  table
***                         Data would be uploaded via  a file from PC
*&---------------------------------------------------------------------*
REPORT zrmm_upd_dmnd_spike_elip_bg.

*TABLES : somlreci1, zds911e.

TYPES : BEGIN OF gty_upload,
          tabname    TYPE dd02l-tabname,
          spmon      TYPE zds911e-spmon,
          vkorg      TYPE zds911e-vkorg,
          vtweg      TYPE zds911e-vtweg,
          spart      TYPE zds911e-spart,
          mvgr1      TYPE zds911e-mvgr1,
          matnr      TYPE zds911e-matnr,
          werks      TYPE zds911e-werks,
          absat      TYPE zds911e-absat,
          wmeng      TYPE zds911e-wmeng,
          zsale_hist TYPE zds911e-zsale_hist,
          basme      TYPE zds911e-basme,
        END OF gty_upload,
        BEGIN OF gty_upload_e,
          tabname      TYPE dd02l-tabname,
          spmon        TYPE zds911e-spmon,
          vkorg        TYPE zds911e-vkorg,
          vtweg        TYPE zds911e-vtweg,
          spart        TYPE zds911e-spart,
          mvgr1        TYPE zds911e-mvgr1,
          matnr        TYPE zds911e-matnr,
          werks        TYPE zds911e-werks,
          absat        TYPE zds911e-absat,
          wmeng        TYPE zds911e-wmeng,
          zsale_hist   TYPE zds911e-zsale_hist,
          basme        TYPE zds911e-basme,
          type(1)      TYPE c,
          message(150) TYPE c,
        END OF gty_upload_e,
        gtt_upload   TYPE STANDARD TABLE OF gty_upload WITH DEFAULT KEY,
        gtt_upload_e TYPE STANDARD TABLE OF gty_upload_e WITH DEFAULT KEY,
        BEGIN OF gty_parameters,
          p_test(1),
          p_purge(1),
          p_is1      TYPE dd02l-tabname,
        END OF gty_parameters.

DATA: gt_upload          TYPE gtt_upload,
      gt_upload_e        TYPE gtt_upload_e,
      gt_upload_s        TYPE gtt_upload_e,
      gv_error_records   TYPE sy-index,
      gv_success_records TYPE sy-index,
      gv_total_records   TYPE sy-index,
      gt_zds911e         TYPE STANDARD TABLE OF zds911e,
      gt_parameters      TYPE STANDARD TABLE OF gty_parameters,
      rs_selfield        TYPE slis_selfield,
      subrc              TYPE sy-subrc,
      gt_fname           TYPE tline_t,
      p_test(1),
      p_purge(1),
      p_is1              TYPE dd02l-tabname,
      ex_root            TYPE REF TO cx_root.

DATA: s_email TYPE RANGE OF somlreci1-receiver WITH HEADER LINE.

***Import the data from ZRMM_UPD_DMND_SPIKE_ELIP
IMPORT gt_upload[] FROM DATABASE indx(m1) ID 'SPIKE1'.
IMPORT gt_parameters[] FROM DATABASE indx(m2) ID 'SPIKE2'.
IMPORT s_email[] FROM DATABASE indx(m3) ID 'SPIKE3'.

IF gt_upload[] IS NOT INITIAL.
  gv_total_records = lines( gt_upload[] ).

  PERFORM get_tabledata IN PROGRAM zrmm_upd_dmnd_spike_elip
                          TABLES gt_upload
                                 gt_zds911e
                                 gt_upload_s
                                 gt_upload_e
                                 gt_parameters
                          CHANGING subrc IF FOUND.

  IF gt_parameters[] IS NOT INITIAL.
    TRY.
        p_test = gt_parameters[ 1 ]-p_test.
        p_purge = gt_parameters[ 1 ]-p_purge.
        p_is1 = gt_parameters[ 1 ]-p_is1.
      CATCH cx_sy_itab_line_not_found.
    ENDTRY.
  ENDIF.
  IF p_test <> 'X'.
    IF gt_upload_e[] IS NOT INITIAL.
      gv_error_records = lines( gt_upload_e[] ).
    ENDIF.
    IF gt_upload_s[] IS NOT INITIAL.
      gv_success_records = lines( gt_zds911e[] ).
    ENDIF.

    IF gt_zds911e[] IS NOT INITIAL.
      PERFORM update_data IN PROGRAM zrmm_upd_dmnd_spike_elip
                            TABLES gt_zds911e
                                   gt_parameters
                            CHANGING  rs_selfield.

      APPEND VALUE #( tdline =  'BGJOB'  tdformat = 'JS' ) TO gt_fname.
      PERFORM print_success_status IN PROGRAM zrmm_upd_dmnd_spike_elip
                                       TABLES gt_fname
                                              gt_upload_e
                                        USING gv_total_records
                                              gv_success_records
                                              gv_error_records IF FOUND.

      IF gt_upload_e[] IS NOT INITIAL AND s_email[] IS NOT INITIAL.
        PERFORM send_mail USING TEXT-027.
      ENDIF.
    ENDIF.
  ELSE.
    APPEND VALUE #( tdline =  'BJOB'  tdformat = 'JS' ) TO gt_fname.
    PERFORM print_success_status IN PROGRAM zrmm_upd_dmnd_spike_elip
                                       TABLES gt_fname
                                              gt_upload_e
                                        USING gv_total_records
                                              gv_success_records
                                              gv_error_records IF FOUND.

*    IF gt_upload_e[] IS NOT INITIAL AND s_email[] IS NOT INITIAL.
*      PERFORM send_mail USING TEXT-027.
*    ENDIF.
  ENDIF.
ELSE.
  APPEND VALUE #(  tdline =  'JOB_FAIL' tdformat = 'JS' ) TO gt_fname.
  PERFORM print_success_status IN PROGRAM zrmm_upd_dmnd_spike_elip
                                       TABLES gt_fname
                                              gt_upload_e
                                        USING gv_total_records
                                              gv_success_records
                                              gv_error_records IF FOUND.

  IF gt_upload_e[] IS NOT INITIAL AND s_email[] IS NOT INITIAL.
    PERFORM send_mail USING TEXT-027.
  ENDIF.

ENDIF.
*&---------------------------------------------------------------------*

FORM send_mail USING p_desc.

  CONSTANTS: c_x          VALUE 'X', "Constant value for X
             c_rec_type   TYPE so_escape VALUE 'U',   "Record Type for Email
             c_com_type   TYPE so_snd_art VALUE 'INT', "Communication Type of Email
             c_doc_type   TYPE so_obj_tp VALUE 'RAW', "Document Type of Email
             c_obj_name   TYPE so_obj_nam VALUE 'SAPRPT', "Object Name for Email Purpose
             c_sensitivty TYPE so_obj_sns VALUE 'F',
             c_tab        TYPE c VALUE cl_abap_char_utilities=>horizontal_tab,
             c_cret       TYPE c VALUE cl_abap_char_utilities=>cr_lf.


  "Object Sensitivity for Email Purpose
  DATA: wa_message      TYPE solisti1,        "Workarea for Mail Message
        wa_attach       TYPE solisti1,         "Workarea for Mail Attach
        wa_packing_list TYPE sopcklsti1, "Workarea for Mail packing
        wa_receivers    TYPE somlreci1.     "Workarea for Mail Receivers

  DATA: it_message      TYPE STANDARD TABLE OF solisti1, "Int Table for Mail Message
        it_attach       TYPE STANDARD TABLE OF solisti1, "Int Table for Mail Attach
        it_packing_list TYPE STANDARD TABLE OF sopcklsti1, "Int Table for Mail Packing
        it_receivers    TYPE STANDARD TABLE OF somlreci1, "Int Table for Mail Receiver
        it_attachment   TYPE STANDARD TABLE OF solisti1. "Int Table for Attachment

  DATA: g_cnt      TYPE i,              "Record Count
        g_sent_all TYPE c,              "Flag for Mail sending
        g_doc_data LIKE sodocchgi1.     "Mail Document Data

  DATA: l_format              TYPE  so_obj_tp VALUE 'XLS',
        l_attdescription      TYPE  so_obj_nam,
        l_sender_address      LIKE  soextreci1-receiver,
        l_sender_address_type LIKE  soextreci1-adr_typ,
        l_firstname           LIKE adrp-name_first,
        l_lastname            LIKE adrp-name_last.

  TRY.

      APPEND INITIAL LINE TO it_attach ASSIGNING FIELD-SYMBOL(<ls_attach>).
      CONCATENATE TEXT-201 TEXT-202 TEXT-203 TEXT-204 TEXT-205 TEXT-206 TEXT-207
      TEXT-208 TEXT-209 TEXT-210 TEXT-211 TEXT-212
                 INTO <ls_attach> SEPARATED BY c_tab.
      CONCATENATE c_cret <ls_attach> INTO <ls_attach>.


      LOOP AT gt_upload_e ASSIGNING FIELD-SYMBOL(<ls_error>).
        APPEND INITIAL LINE TO it_attach ASSIGNING <ls_attach>.

        IF <ls_error>-absat IS NOT INITIAL.
          DATA(lv_absat) = CONV char8( <ls_error>-absat ).
        ENDIF.
        IF <ls_error>-wmeng IS NOT INITIAL.
          DATA(lv_wmeng) = CONV char8( <ls_error>-wmeng ).
        ENDIF.
        IF <ls_error>-zsale_hist IS NOT INITIAL.
          DATA(lv_zsale_hist) = CONV char8( <ls_error>-zsale_hist ).
        ENDIF.

        CONCATENATE <ls_error>-tabname
                    <ls_error>-spmon
                    <ls_error>-vkorg
                    <ls_error>-vtweg
                    <ls_error>-spart
                    <ls_error>-mvgr1
                    <ls_error>-matnr
                    <ls_error>-werks
                    lv_absat
                    lv_wmeng
                    lv_zsale_hist
                    <ls_error>-basme
                    INTO <ls_attach> SEPARATED BY c_tab.
        IF sy-tabix > 1.
          CONCATENATE c_cret <ls_attach> INTO <ls_attach>.
        ENDIF.
        CLEAR: lv_absat, lv_wmeng, lv_zsale_hist.
      ENDLOOP.

    CATCH cx_root INTO ex_root.
      WRITE ex_root->get_text( ).
  ENDTRY.

  REFRESH it_message.

  l_attdescription      = space.
  l_sender_address      = space.
  l_sender_address_type = space.

  SELECT SINGLE b~name_first
         b~name_last
    INTO (l_firstname, l_lastname)
    FROM usr21 AS a INNER JOIN adrp AS b
    ON a~persnumber = b~persnumber
    WHERE a~bname = sy-uname.

  CLEAR wa_message.
  wa_message-line = TEXT-017.
  APPEND wa_message TO it_message.
  CLEAR wa_message.
  wa_message-line = space.
  APPEND wa_message TO it_message.
  CLEAR wa_message.
  wa_message-line = space.
  APPEND wa_message TO it_message.
  CLEAR wa_message.

  wa_message-line = space.
  APPEND wa_message TO it_message.
  CLEAR wa_message.
  wa_message-line = TEXT-018.
  APPEND wa_message TO it_message.
  CLEAR wa_message.
  wa_message-line = space.
  APPEND wa_message TO it_message.
  CLEAR wa_message.

  wa_message-line = |{ TEXT-002 } { gv_total_records }|.
  APPEND wa_message TO it_message.
  CLEAR wa_message.

  wa_message-line = |{ TEXT-003 } { gv_success_records }|.
  APPEND wa_message TO it_message.
  CLEAR wa_message.

  wa_message-line = |{ TEXT-004 } { gv_error_records }|.
  APPEND wa_message TO it_message.
  CLEAR wa_message.
  wa_message-line = space.
  APPEND wa_message TO it_message.
  CLEAR wa_message.
  wa_message-line = TEXT-019.
  APPEND wa_message TO it_message.
  CLEAR wa_message.
  wa_message-line = space.
  APPEND wa_message TO it_message.
  CLEAR wa_message.
  wa_message-line = TEXT-020.
  APPEND wa_message TO it_message.
  CLEAR wa_message.
  wa_message-line = TEXT-021.
  APPEND wa_message TO it_message.
  CLEAR wa_message.
  wa_message-line = space.
  APPEND wa_message TO it_message.
  CLEAR wa_message.
  wa_message-line = TEXT-022.
  APPEND wa_message TO it_message.
  CLEAR wa_message.
  wa_message-line = TEXT-023.
  APPEND wa_message TO it_message.
  CLEAR wa_message.

* Fill the document data.
  g_doc_data-doc_size = 1.

* Fill the document data and get size of attachment
  CLEAR g_doc_data.
  READ TABLE it_attach INTO wa_attach INDEX g_cnt.
  g_doc_data-doc_size =
     ( g_cnt - 1 ) * 255 + strlen( wa_attach ).
  g_doc_data-obj_langu  = sy-langu.
  g_doc_data-obj_name   = c_obj_name.
  g_doc_data-obj_descr  = p_desc.
  g_doc_data-sensitivty = c_sensitivty.

  REFRESH it_attachment.
  it_attachment[] = it_attach[].

* Describe the body of the message
  CLEAR wa_packing_list.
  REFRESH it_packing_list.
  wa_packing_list-transf_bin = space.
  wa_packing_list-head_start = 1.
  wa_packing_list-head_num = 0.
  wa_packing_list-body_start = 1.
  DESCRIBE TABLE it_message LINES wa_packing_list-body_num.
  wa_packing_list-doc_type = c_doc_type.
  APPEND wa_packing_list TO it_packing_list.
  CLEAR wa_packing_list.
* Create attachment notification
  wa_packing_list-transf_bin = c_x.
  wa_packing_list-head_start = 1.
  wa_packing_list-head_num   = 1.
  wa_packing_list-body_start = 1.

  DESCRIBE TABLE it_attachment LINES wa_packing_list-body_num.
  wa_packing_list-doc_type   =  l_format.
  wa_packing_list-obj_descr  =  l_attdescription.
  wa_packing_list-obj_name   =  TEXT-024.
  wa_packing_list-doc_size   =  wa_packing_list-body_num * 255.
  APPEND wa_packing_list TO it_packing_list.

* Add the recipients email address
  CLEAR wa_receivers.
  REFRESH it_receivers.
  LOOP AT s_email.
    wa_receivers-receiver = s_email-low.
    wa_receivers-rec_type = c_rec_type.
    wa_receivers-com_type = c_com_type.
    wa_receivers-notif_del = c_x.
    wa_receivers-notif_ndel = c_x.
    APPEND wa_receivers TO it_receivers.
    CLEAR wa_receivers.
  ENDLOOP.

  CALL FUNCTION 'SO_DOCUMENT_SEND_API1'
    EXPORTING
      document_data              = g_doc_data
      put_in_outbox              = c_x
      sender_address             = l_sender_address
      sender_address_type        = l_sender_address_type
      commit_work                = c_x
    IMPORTING
      sent_to_all                = g_sent_all
    TABLES
      packing_list               = it_packing_list
      contents_bin               = it_attachment
      contents_txt               = it_message
      receivers                  = it_receivers
    EXCEPTIONS
      too_many_receivers         = 1
      document_not_sent          = 2
      document_type_not_exist    = 3
      operation_no_authorization = 4
      parameter_error            = 5
      x_error                    = 6
      enqueue_error              = 7
      OTHERS                     = 8.
  IF sy-subrc = 0.
    WRITE:/ sy-uline.
    WRITE:/10 TEXT-011 COLOR 1.
    SKIP.
    WRITE:/30 TEXT-009.
  ELSE.
    WRITE:/ sy-uline.
    WRITE:/10 TEXT-011 COLOR 1.
    SKIP.
    CASE sy-subrc.
      WHEN '1'.
        WRITE:/30 TEXT-e01.
      WHEN '2'.
        WRITE:/30 TEXT-e02.
      WHEN '3'.
        WRITE:/30 TEXT-e03.
      WHEN '4'.
        WRITE:/30 TEXT-e04.
      WHEN '5'.
        WRITE:/30 TEXT-e05.
      WHEN '6'.
        WRITE:/30 TEXT-e05.
      WHEN '7'.
        WRITE:/30 TEXT-e06.
      WHEN '8'.
        WRITE:/30 TEXT-d02.
    ENDCASE.
  ENDIF.
  WRITE:/ sy-uline.

ENDFORM.                    " F4000_SEND_MAIL

